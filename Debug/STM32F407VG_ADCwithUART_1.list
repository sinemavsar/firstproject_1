
STM32F407VG_ADCwithUART_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005200  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  08005390  08005390  00015390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005484  08005484  0002009c  2**0
                  CONTENTS
  4 .ARM          00000008  08005484  08005484  00015484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800548c  0800548c  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800548c  0800548c  0001548c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005490  08005490  00015490  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  08005494  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002009c  2**0
                  CONTENTS
 10 .bss          000002c4  200000a0  200000a0  000200a0  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20000364  20000364  000200a0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000db96  00000000  00000000  0002010f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001f0a  00000000  00000000  0002dca5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000cd0  00000000  00000000  0002fbb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000a05  00000000  00000000  00030880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00021c50  00000000  00000000  00031285  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000fb61  00000000  00000000  00052ed5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d58c7  00000000  00000000  00062a36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003cd0  00000000  00000000  00138300  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000075  00000000  00000000  0013bfd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a0 	.word	0x200000a0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005378 	.word	0x08005378

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000a4 	.word	0x200000a4
 80001cc:	08005378 	.word	0x08005378

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2iz>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b34:	d215      	bcs.n	8000b62 <__aeabi_d2iz+0x36>
 8000b36:	d511      	bpl.n	8000b5c <__aeabi_d2iz+0x30>
 8000b38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d912      	bls.n	8000b68 <__aeabi_d2iz+0x3c>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	bf18      	it	ne
 8000b58:	4240      	negne	r0, r0
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d105      	bne.n	8000b74 <__aeabi_d2iz+0x48>
 8000b68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b6c:	bf08      	it	eq
 8000b6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2uiz>:
 8000b7c:	004a      	lsls	r2, r1, #1
 8000b7e:	d211      	bcs.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b84:	d211      	bcs.n	8000baa <__aeabi_d2uiz+0x2e>
 8000b86:	d50d      	bpl.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b90:	d40e      	bmi.n	8000bb0 <__aeabi_d2uiz+0x34>
 8000b92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bae:	d102      	bne.n	8000bb6 <__aeabi_d2uiz+0x3a>
 8000bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb4:	4770      	bx	lr
 8000bb6:	f04f 0000 	mov.w	r0, #0
 8000bba:	4770      	bx	lr

08000bbc <__aeabi_d2f>:
 8000bbc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bc0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc4:	bf24      	itt	cs
 8000bc6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bce:	d90d      	bls.n	8000bec <__aeabi_d2f+0x30>
 8000bd0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bdc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000be0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be4:	bf08      	it	eq
 8000be6:	f020 0001 	biceq.w	r0, r0, #1
 8000bea:	4770      	bx	lr
 8000bec:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bf0:	d121      	bne.n	8000c36 <__aeabi_d2f+0x7a>
 8000bf2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf6:	bfbc      	itt	lt
 8000bf8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bfc:	4770      	bxlt	lr
 8000bfe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c02:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c06:	f1c2 0218 	rsb	r2, r2, #24
 8000c0a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c12:	fa20 f002 	lsr.w	r0, r0, r2
 8000c16:	bf18      	it	ne
 8000c18:	f040 0001 	orrne.w	r0, r0, #1
 8000c1c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c24:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c28:	ea40 000c 	orr.w	r0, r0, ip
 8000c2c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c34:	e7cc      	b.n	8000bd0 <__aeabi_d2f+0x14>
 8000c36:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c3a:	d107      	bne.n	8000c4c <__aeabi_d2f+0x90>
 8000c3c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c40:	bf1e      	ittt	ne
 8000c42:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c46:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c4a:	4770      	bxne	lr
 8000c4c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c50:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop

08000c5c <__aeabi_uldivmod>:
 8000c5c:	b953      	cbnz	r3, 8000c74 <__aeabi_uldivmod+0x18>
 8000c5e:	b94a      	cbnz	r2, 8000c74 <__aeabi_uldivmod+0x18>
 8000c60:	2900      	cmp	r1, #0
 8000c62:	bf08      	it	eq
 8000c64:	2800      	cmpeq	r0, #0
 8000c66:	bf1c      	itt	ne
 8000c68:	f04f 31ff 	movne.w	r1, #4294967295
 8000c6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c70:	f000 b970 	b.w	8000f54 <__aeabi_idiv0>
 8000c74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c7c:	f000 f806 	bl	8000c8c <__udivmoddi4>
 8000c80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c88:	b004      	add	sp, #16
 8000c8a:	4770      	bx	lr

08000c8c <__udivmoddi4>:
 8000c8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c90:	9e08      	ldr	r6, [sp, #32]
 8000c92:	460d      	mov	r5, r1
 8000c94:	4604      	mov	r4, r0
 8000c96:	460f      	mov	r7, r1
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d14a      	bne.n	8000d32 <__udivmoddi4+0xa6>
 8000c9c:	428a      	cmp	r2, r1
 8000c9e:	4694      	mov	ip, r2
 8000ca0:	d965      	bls.n	8000d6e <__udivmoddi4+0xe2>
 8000ca2:	fab2 f382 	clz	r3, r2
 8000ca6:	b143      	cbz	r3, 8000cba <__udivmoddi4+0x2e>
 8000ca8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cac:	f1c3 0220 	rsb	r2, r3, #32
 8000cb0:	409f      	lsls	r7, r3
 8000cb2:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb6:	4317      	orrs	r7, r2
 8000cb8:	409c      	lsls	r4, r3
 8000cba:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cbe:	fa1f f58c 	uxth.w	r5, ip
 8000cc2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cc6:	0c22      	lsrs	r2, r4, #16
 8000cc8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000ccc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cd0:	fb01 f005 	mul.w	r0, r1, r5
 8000cd4:	4290      	cmp	r0, r2
 8000cd6:	d90a      	bls.n	8000cee <__udivmoddi4+0x62>
 8000cd8:	eb1c 0202 	adds.w	r2, ip, r2
 8000cdc:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ce0:	f080 811c 	bcs.w	8000f1c <__udivmoddi4+0x290>
 8000ce4:	4290      	cmp	r0, r2
 8000ce6:	f240 8119 	bls.w	8000f1c <__udivmoddi4+0x290>
 8000cea:	3902      	subs	r1, #2
 8000cec:	4462      	add	r2, ip
 8000cee:	1a12      	subs	r2, r2, r0
 8000cf0:	b2a4      	uxth	r4, r4
 8000cf2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cf6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cfa:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cfe:	fb00 f505 	mul.w	r5, r0, r5
 8000d02:	42a5      	cmp	r5, r4
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x90>
 8000d06:	eb1c 0404 	adds.w	r4, ip, r4
 8000d0a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d0e:	f080 8107 	bcs.w	8000f20 <__udivmoddi4+0x294>
 8000d12:	42a5      	cmp	r5, r4
 8000d14:	f240 8104 	bls.w	8000f20 <__udivmoddi4+0x294>
 8000d18:	4464      	add	r4, ip
 8000d1a:	3802      	subs	r0, #2
 8000d1c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d20:	1b64      	subs	r4, r4, r5
 8000d22:	2100      	movs	r1, #0
 8000d24:	b11e      	cbz	r6, 8000d2e <__udivmoddi4+0xa2>
 8000d26:	40dc      	lsrs	r4, r3
 8000d28:	2300      	movs	r3, #0
 8000d2a:	e9c6 4300 	strd	r4, r3, [r6]
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d908      	bls.n	8000d48 <__udivmoddi4+0xbc>
 8000d36:	2e00      	cmp	r6, #0
 8000d38:	f000 80ed 	beq.w	8000f16 <__udivmoddi4+0x28a>
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	e9c6 0500 	strd	r0, r5, [r6]
 8000d42:	4608      	mov	r0, r1
 8000d44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d48:	fab3 f183 	clz	r1, r3
 8000d4c:	2900      	cmp	r1, #0
 8000d4e:	d149      	bne.n	8000de4 <__udivmoddi4+0x158>
 8000d50:	42ab      	cmp	r3, r5
 8000d52:	d302      	bcc.n	8000d5a <__udivmoddi4+0xce>
 8000d54:	4282      	cmp	r2, r0
 8000d56:	f200 80f8 	bhi.w	8000f4a <__udivmoddi4+0x2be>
 8000d5a:	1a84      	subs	r4, r0, r2
 8000d5c:	eb65 0203 	sbc.w	r2, r5, r3
 8000d60:	2001      	movs	r0, #1
 8000d62:	4617      	mov	r7, r2
 8000d64:	2e00      	cmp	r6, #0
 8000d66:	d0e2      	beq.n	8000d2e <__udivmoddi4+0xa2>
 8000d68:	e9c6 4700 	strd	r4, r7, [r6]
 8000d6c:	e7df      	b.n	8000d2e <__udivmoddi4+0xa2>
 8000d6e:	b902      	cbnz	r2, 8000d72 <__udivmoddi4+0xe6>
 8000d70:	deff      	udf	#255	; 0xff
 8000d72:	fab2 f382 	clz	r3, r2
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	f040 8090 	bne.w	8000e9c <__udivmoddi4+0x210>
 8000d7c:	1a8a      	subs	r2, r1, r2
 8000d7e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d82:	fa1f fe8c 	uxth.w	lr, ip
 8000d86:	2101      	movs	r1, #1
 8000d88:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d8c:	fb07 2015 	mls	r0, r7, r5, r2
 8000d90:	0c22      	lsrs	r2, r4, #16
 8000d92:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d96:	fb0e f005 	mul.w	r0, lr, r5
 8000d9a:	4290      	cmp	r0, r2
 8000d9c:	d908      	bls.n	8000db0 <__udivmoddi4+0x124>
 8000d9e:	eb1c 0202 	adds.w	r2, ip, r2
 8000da2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000da6:	d202      	bcs.n	8000dae <__udivmoddi4+0x122>
 8000da8:	4290      	cmp	r0, r2
 8000daa:	f200 80cb 	bhi.w	8000f44 <__udivmoddi4+0x2b8>
 8000dae:	4645      	mov	r5, r8
 8000db0:	1a12      	subs	r2, r2, r0
 8000db2:	b2a4      	uxth	r4, r4
 8000db4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000db8:	fb07 2210 	mls	r2, r7, r0, r2
 8000dbc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dc0:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc4:	45a6      	cmp	lr, r4
 8000dc6:	d908      	bls.n	8000dda <__udivmoddi4+0x14e>
 8000dc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000dcc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dd0:	d202      	bcs.n	8000dd8 <__udivmoddi4+0x14c>
 8000dd2:	45a6      	cmp	lr, r4
 8000dd4:	f200 80bb 	bhi.w	8000f4e <__udivmoddi4+0x2c2>
 8000dd8:	4610      	mov	r0, r2
 8000dda:	eba4 040e 	sub.w	r4, r4, lr
 8000dde:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000de2:	e79f      	b.n	8000d24 <__udivmoddi4+0x98>
 8000de4:	f1c1 0720 	rsb	r7, r1, #32
 8000de8:	408b      	lsls	r3, r1
 8000dea:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dee:	ea4c 0c03 	orr.w	ip, ip, r3
 8000df2:	fa05 f401 	lsl.w	r4, r5, r1
 8000df6:	fa20 f307 	lsr.w	r3, r0, r7
 8000dfa:	40fd      	lsrs	r5, r7
 8000dfc:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e00:	4323      	orrs	r3, r4
 8000e02:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e06:	fa1f fe8c 	uxth.w	lr, ip
 8000e0a:	fb09 5518 	mls	r5, r9, r8, r5
 8000e0e:	0c1c      	lsrs	r4, r3, #16
 8000e10:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e14:	fb08 f50e 	mul.w	r5, r8, lr
 8000e18:	42a5      	cmp	r5, r4
 8000e1a:	fa02 f201 	lsl.w	r2, r2, r1
 8000e1e:	fa00 f001 	lsl.w	r0, r0, r1
 8000e22:	d90b      	bls.n	8000e3c <__udivmoddi4+0x1b0>
 8000e24:	eb1c 0404 	adds.w	r4, ip, r4
 8000e28:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e2c:	f080 8088 	bcs.w	8000f40 <__udivmoddi4+0x2b4>
 8000e30:	42a5      	cmp	r5, r4
 8000e32:	f240 8085 	bls.w	8000f40 <__udivmoddi4+0x2b4>
 8000e36:	f1a8 0802 	sub.w	r8, r8, #2
 8000e3a:	4464      	add	r4, ip
 8000e3c:	1b64      	subs	r4, r4, r5
 8000e3e:	b29d      	uxth	r5, r3
 8000e40:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e44:	fb09 4413 	mls	r4, r9, r3, r4
 8000e48:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e4c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e50:	45a6      	cmp	lr, r4
 8000e52:	d908      	bls.n	8000e66 <__udivmoddi4+0x1da>
 8000e54:	eb1c 0404 	adds.w	r4, ip, r4
 8000e58:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e5c:	d26c      	bcs.n	8000f38 <__udivmoddi4+0x2ac>
 8000e5e:	45a6      	cmp	lr, r4
 8000e60:	d96a      	bls.n	8000f38 <__udivmoddi4+0x2ac>
 8000e62:	3b02      	subs	r3, #2
 8000e64:	4464      	add	r4, ip
 8000e66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e6a:	fba3 9502 	umull	r9, r5, r3, r2
 8000e6e:	eba4 040e 	sub.w	r4, r4, lr
 8000e72:	42ac      	cmp	r4, r5
 8000e74:	46c8      	mov	r8, r9
 8000e76:	46ae      	mov	lr, r5
 8000e78:	d356      	bcc.n	8000f28 <__udivmoddi4+0x29c>
 8000e7a:	d053      	beq.n	8000f24 <__udivmoddi4+0x298>
 8000e7c:	b156      	cbz	r6, 8000e94 <__udivmoddi4+0x208>
 8000e7e:	ebb0 0208 	subs.w	r2, r0, r8
 8000e82:	eb64 040e 	sbc.w	r4, r4, lr
 8000e86:	fa04 f707 	lsl.w	r7, r4, r7
 8000e8a:	40ca      	lsrs	r2, r1
 8000e8c:	40cc      	lsrs	r4, r1
 8000e8e:	4317      	orrs	r7, r2
 8000e90:	e9c6 7400 	strd	r7, r4, [r6]
 8000e94:	4618      	mov	r0, r3
 8000e96:	2100      	movs	r1, #0
 8000e98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9c:	f1c3 0120 	rsb	r1, r3, #32
 8000ea0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ea4:	fa20 f201 	lsr.w	r2, r0, r1
 8000ea8:	fa25 f101 	lsr.w	r1, r5, r1
 8000eac:	409d      	lsls	r5, r3
 8000eae:	432a      	orrs	r2, r5
 8000eb0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb4:	fa1f fe8c 	uxth.w	lr, ip
 8000eb8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ebc:	fb07 1510 	mls	r5, r7, r0, r1
 8000ec0:	0c11      	lsrs	r1, r2, #16
 8000ec2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ec6:	fb00 f50e 	mul.w	r5, r0, lr
 8000eca:	428d      	cmp	r5, r1
 8000ecc:	fa04 f403 	lsl.w	r4, r4, r3
 8000ed0:	d908      	bls.n	8000ee4 <__udivmoddi4+0x258>
 8000ed2:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000eda:	d22f      	bcs.n	8000f3c <__udivmoddi4+0x2b0>
 8000edc:	428d      	cmp	r5, r1
 8000ede:	d92d      	bls.n	8000f3c <__udivmoddi4+0x2b0>
 8000ee0:	3802      	subs	r0, #2
 8000ee2:	4461      	add	r1, ip
 8000ee4:	1b49      	subs	r1, r1, r5
 8000ee6:	b292      	uxth	r2, r2
 8000ee8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000eec:	fb07 1115 	mls	r1, r7, r5, r1
 8000ef0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ef4:	fb05 f10e 	mul.w	r1, r5, lr
 8000ef8:	4291      	cmp	r1, r2
 8000efa:	d908      	bls.n	8000f0e <__udivmoddi4+0x282>
 8000efc:	eb1c 0202 	adds.w	r2, ip, r2
 8000f00:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f04:	d216      	bcs.n	8000f34 <__udivmoddi4+0x2a8>
 8000f06:	4291      	cmp	r1, r2
 8000f08:	d914      	bls.n	8000f34 <__udivmoddi4+0x2a8>
 8000f0a:	3d02      	subs	r5, #2
 8000f0c:	4462      	add	r2, ip
 8000f0e:	1a52      	subs	r2, r2, r1
 8000f10:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f14:	e738      	b.n	8000d88 <__udivmoddi4+0xfc>
 8000f16:	4631      	mov	r1, r6
 8000f18:	4630      	mov	r0, r6
 8000f1a:	e708      	b.n	8000d2e <__udivmoddi4+0xa2>
 8000f1c:	4639      	mov	r1, r7
 8000f1e:	e6e6      	b.n	8000cee <__udivmoddi4+0x62>
 8000f20:	4610      	mov	r0, r2
 8000f22:	e6fb      	b.n	8000d1c <__udivmoddi4+0x90>
 8000f24:	4548      	cmp	r0, r9
 8000f26:	d2a9      	bcs.n	8000e7c <__udivmoddi4+0x1f0>
 8000f28:	ebb9 0802 	subs.w	r8, r9, r2
 8000f2c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f30:	3b01      	subs	r3, #1
 8000f32:	e7a3      	b.n	8000e7c <__udivmoddi4+0x1f0>
 8000f34:	4645      	mov	r5, r8
 8000f36:	e7ea      	b.n	8000f0e <__udivmoddi4+0x282>
 8000f38:	462b      	mov	r3, r5
 8000f3a:	e794      	b.n	8000e66 <__udivmoddi4+0x1da>
 8000f3c:	4640      	mov	r0, r8
 8000f3e:	e7d1      	b.n	8000ee4 <__udivmoddi4+0x258>
 8000f40:	46d0      	mov	r8, sl
 8000f42:	e77b      	b.n	8000e3c <__udivmoddi4+0x1b0>
 8000f44:	3d02      	subs	r5, #2
 8000f46:	4462      	add	r2, ip
 8000f48:	e732      	b.n	8000db0 <__udivmoddi4+0x124>
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	e70a      	b.n	8000d64 <__udivmoddi4+0xd8>
 8000f4e:	4464      	add	r4, ip
 8000f50:	3802      	subs	r0, #2
 8000f52:	e742      	b.n	8000dda <__udivmoddi4+0x14e>

08000f54 <__aeabi_idiv0>:
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop

08000f58 <pinset>:
int button_2 = 0;
int old_button_1 = 0;
int old_button_2 = 0;


void pinset(void){
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
    button_2 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3);
    if (button_2 == GPIO_PIN_RESET) {
        counter++;
    }
*/
	button_1 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2);
 8000f5c:	2104      	movs	r1, #4
 8000f5e:	48b4      	ldr	r0, [pc, #720]	; (8001230 <pinset+0x2d8>)
 8000f60:	f002 f84e 	bl	8003000 <HAL_GPIO_ReadPin>
 8000f64:	4603      	mov	r3, r0
 8000f66:	461a      	mov	r2, r3
 8000f68:	4bb2      	ldr	r3, [pc, #712]	; (8001234 <pinset+0x2dc>)
 8000f6a:	601a      	str	r2, [r3, #0]
	    if (button_1 - old_button_1 == (-1)) {
 8000f6c:	4bb1      	ldr	r3, [pc, #708]	; (8001234 <pinset+0x2dc>)
 8000f6e:	681a      	ldr	r2, [r3, #0]
 8000f70:	4bb1      	ldr	r3, [pc, #708]	; (8001238 <pinset+0x2e0>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	1ad3      	subs	r3, r2, r3
 8000f76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f7a:	d10f      	bne.n	8000f9c <pinset+0x44>
	        counter = (counter - 1) % 10 ;
 8000f7c:	4baf      	ldr	r3, [pc, #700]	; (800123c <pinset+0x2e4>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	1e59      	subs	r1, r3, #1
 8000f82:	4baf      	ldr	r3, [pc, #700]	; (8001240 <pinset+0x2e8>)
 8000f84:	fb83 2301 	smull	r2, r3, r3, r1
 8000f88:	109a      	asrs	r2, r3, #2
 8000f8a:	17cb      	asrs	r3, r1, #31
 8000f8c:	1ad2      	subs	r2, r2, r3
 8000f8e:	4613      	mov	r3, r2
 8000f90:	009b      	lsls	r3, r3, #2
 8000f92:	4413      	add	r3, r2
 8000f94:	005b      	lsls	r3, r3, #1
 8000f96:	1aca      	subs	r2, r1, r3
 8000f98:	4ba8      	ldr	r3, [pc, #672]	; (800123c <pinset+0x2e4>)
 8000f9a:	601a      	str	r2, [r3, #0]
	    }
	    old_button_1=button_1;
 8000f9c:	4ba5      	ldr	r3, [pc, #660]	; (8001234 <pinset+0x2dc>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4aa5      	ldr	r2, [pc, #660]	; (8001238 <pinset+0x2e0>)
 8000fa2:	6013      	str	r3, [r2, #0]

	    button_2 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3);
 8000fa4:	2108      	movs	r1, #8
 8000fa6:	48a2      	ldr	r0, [pc, #648]	; (8001230 <pinset+0x2d8>)
 8000fa8:	f002 f82a 	bl	8003000 <HAL_GPIO_ReadPin>
 8000fac:	4603      	mov	r3, r0
 8000fae:	461a      	mov	r2, r3
 8000fb0:	4ba4      	ldr	r3, [pc, #656]	; (8001244 <pinset+0x2ec>)
 8000fb2:	601a      	str	r2, [r3, #0]
	    if (button_2 - old_button_2 == (-1)) {
 8000fb4:	4ba3      	ldr	r3, [pc, #652]	; (8001244 <pinset+0x2ec>)
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	4ba3      	ldr	r3, [pc, #652]	; (8001248 <pinset+0x2f0>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	1ad3      	subs	r3, r2, r3
 8000fbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fc2:	d10f      	bne.n	8000fe4 <pinset+0x8c>
	        counter = (counter + 1) % 10 ;
 8000fc4:	4b9d      	ldr	r3, [pc, #628]	; (800123c <pinset+0x2e4>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	1c59      	adds	r1, r3, #1
 8000fca:	4b9d      	ldr	r3, [pc, #628]	; (8001240 <pinset+0x2e8>)
 8000fcc:	fb83 2301 	smull	r2, r3, r3, r1
 8000fd0:	109a      	asrs	r2, r3, #2
 8000fd2:	17cb      	asrs	r3, r1, #31
 8000fd4:	1ad2      	subs	r2, r2, r3
 8000fd6:	4613      	mov	r3, r2
 8000fd8:	009b      	lsls	r3, r3, #2
 8000fda:	4413      	add	r3, r2
 8000fdc:	005b      	lsls	r3, r3, #1
 8000fde:	1aca      	subs	r2, r1, r3
 8000fe0:	4b96      	ldr	r3, [pc, #600]	; (800123c <pinset+0x2e4>)
 8000fe2:	601a      	str	r2, [r3, #0]
	    }
	    old_button_2=button_2;
 8000fe4:	4b97      	ldr	r3, [pc, #604]	; (8001244 <pinset+0x2ec>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a97      	ldr	r2, [pc, #604]	; (8001248 <pinset+0x2f0>)
 8000fea:	6013      	str	r3, [r2, #0]


    if (counter < 0) {
 8000fec:	4b93      	ldr	r3, [pc, #588]	; (800123c <pinset+0x2e4>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	da03      	bge.n	8000ffc <pinset+0xa4>
          counter = 0;
 8000ff4:	4b91      	ldr	r3, [pc, #580]	; (800123c <pinset+0x2e4>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	601a      	str	r2, [r3, #0]
 8000ffa:	e006      	b.n	800100a <pinset+0xb2>
      } else if (counter > 9) {
 8000ffc:	4b8f      	ldr	r3, [pc, #572]	; (800123c <pinset+0x2e4>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	2b09      	cmp	r3, #9
 8001002:	dd02      	ble.n	800100a <pinset+0xb2>
          counter = 9;
 8001004:	4b8d      	ldr	r3, [pc, #564]	; (800123c <pinset+0x2e4>)
 8001006:	2209      	movs	r2, #9
 8001008:	601a      	str	r2, [r3, #0]
      }

	switch (counter) {
 800100a:	4b8c      	ldr	r3, [pc, #560]	; (800123c <pinset+0x2e4>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	2b09      	cmp	r3, #9
 8001010:	f200 81c2 	bhi.w	8001398 <pinset+0x440>
 8001014:	a201      	add	r2, pc, #4	; (adr r2, 800101c <pinset+0xc4>)
 8001016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800101a:	bf00      	nop
 800101c:	08001045 	.word	0x08001045
 8001020:	08001097 	.word	0x08001097
 8001024:	080010e9 	.word	0x080010e9
 8001028:	0800113b 	.word	0x0800113b
 800102c:	0800118d 	.word	0x0800118d
 8001030:	080011df 	.word	0x080011df
 8001034:	08001251 	.word	0x08001251
 8001038:	080012a3 	.word	0x080012a3
 800103c:	080012f5 	.word	0x080012f5
 8001040:	08001347 	.word	0x08001347

		case 0:
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001044:	2201      	movs	r2, #1
 8001046:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800104a:	4879      	ldr	r0, [pc, #484]	; (8001230 <pinset+0x2d8>)
 800104c:	f001 fff0 	bl	8003030 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8001050:	2200      	movs	r2, #0
 8001052:	2140      	movs	r1, #64	; 0x40
 8001054:	487d      	ldr	r0, [pc, #500]	; (800124c <pinset+0x2f4>)
 8001056:	f001 ffeb 	bl	8003030 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 800105a:	2200      	movs	r2, #0
 800105c:	2180      	movs	r1, #128	; 0x80
 800105e:	487b      	ldr	r0, [pc, #492]	; (800124c <pinset+0x2f4>)
 8001060:	f001 ffe6 	bl	8003030 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8001064:	2200      	movs	r2, #0
 8001066:	f44f 7180 	mov.w	r1, #256	; 0x100
 800106a:	4878      	ldr	r0, [pc, #480]	; (800124c <pinset+0x2f4>)
 800106c:	f001 ffe0 	bl	8003030 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8001070:	2200      	movs	r2, #0
 8001072:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001076:	4875      	ldr	r0, [pc, #468]	; (800124c <pinset+0x2f4>)
 8001078:	f001 ffda 	bl	8003030 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800107c:	2200      	movs	r2, #0
 800107e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001082:	486b      	ldr	r0, [pc, #428]	; (8001230 <pinset+0x2d8>)
 8001084:	f001 ffd4 	bl	8003030 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8001088:	2200      	movs	r2, #0
 800108a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800108e:	4868      	ldr	r0, [pc, #416]	; (8001230 <pinset+0x2d8>)
 8001090:	f001 ffce 	bl	8003030 <HAL_GPIO_WritePin>
		}
		break;
 8001094:	e180      	b.n	8001398 <pinset+0x440>

		case 1:
		{
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8001096:	2201      	movs	r2, #1
 8001098:	2140      	movs	r1, #64	; 0x40
 800109a:	486c      	ldr	r0, [pc, #432]	; (800124c <pinset+0x2f4>)
 800109c:	f001 ffc8 	bl	8003030 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 80010a0:	2201      	movs	r2, #1
 80010a2:	2180      	movs	r1, #128	; 0x80
 80010a4:	4869      	ldr	r0, [pc, #420]	; (800124c <pinset+0x2f4>)
 80010a6:	f001 ffc3 	bl	8003030 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 80010aa:	2200      	movs	r2, #0
 80010ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010b0:	4866      	ldr	r0, [pc, #408]	; (800124c <pinset+0x2f4>)
 80010b2:	f001 ffbd 	bl	8003030 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 80010b6:	2201      	movs	r2, #1
 80010b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010bc:	4863      	ldr	r0, [pc, #396]	; (800124c <pinset+0x2f4>)
 80010be:	f001 ffb7 	bl	8003030 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80010c2:	2201      	movs	r2, #1
 80010c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010c8:	4859      	ldr	r0, [pc, #356]	; (8001230 <pinset+0x2d8>)
 80010ca:	f001 ffb1 	bl	8003030 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80010ce:	2200      	movs	r2, #0
 80010d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010d4:	4856      	ldr	r0, [pc, #344]	; (8001230 <pinset+0x2d8>)
 80010d6:	f001 ffab 	bl	8003030 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80010da:	2201      	movs	r2, #1
 80010dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010e0:	4853      	ldr	r0, [pc, #332]	; (8001230 <pinset+0x2d8>)
 80010e2:	f001 ffa5 	bl	8003030 <HAL_GPIO_WritePin>
		}
		break;
 80010e6:	e157      	b.n	8001398 <pinset+0x440>

		case 2:
		{
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 80010e8:	2200      	movs	r2, #0
 80010ea:	2140      	movs	r1, #64	; 0x40
 80010ec:	4857      	ldr	r0, [pc, #348]	; (800124c <pinset+0x2f4>)
 80010ee:	f001 ff9f 	bl	8003030 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 80010f2:	2201      	movs	r2, #1
 80010f4:	2180      	movs	r1, #128	; 0x80
 80010f6:	4855      	ldr	r0, [pc, #340]	; (800124c <pinset+0x2f4>)
 80010f8:	f001 ff9a 	bl	8003030 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 80010fc:	2200      	movs	r2, #0
 80010fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001102:	4852      	ldr	r0, [pc, #328]	; (800124c <pinset+0x2f4>)
 8001104:	f001 ff94 	bl	8003030 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8001108:	2200      	movs	r2, #0
 800110a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800110e:	484f      	ldr	r0, [pc, #316]	; (800124c <pinset+0x2f4>)
 8001110:	f001 ff8e 	bl	8003030 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8001114:	2200      	movs	r2, #0
 8001116:	f44f 7180 	mov.w	r1, #256	; 0x100
 800111a:	4845      	ldr	r0, [pc, #276]	; (8001230 <pinset+0x2d8>)
 800111c:	f001 ff88 	bl	8003030 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8001120:	2201      	movs	r2, #1
 8001122:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001126:	4842      	ldr	r0, [pc, #264]	; (8001230 <pinset+0x2d8>)
 8001128:	f001 ff82 	bl	8003030 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800112c:	2200      	movs	r2, #0
 800112e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001132:	483f      	ldr	r0, [pc, #252]	; (8001230 <pinset+0x2d8>)
 8001134:	f001 ff7c 	bl	8003030 <HAL_GPIO_WritePin>
		}
		break;
 8001138:	e12e      	b.n	8001398 <pinset+0x440>

		case 3:
		{
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 800113a:	2200      	movs	r2, #0
 800113c:	2140      	movs	r1, #64	; 0x40
 800113e:	4843      	ldr	r0, [pc, #268]	; (800124c <pinset+0x2f4>)
 8001140:	f001 ff76 	bl	8003030 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8001144:	2201      	movs	r2, #1
 8001146:	2180      	movs	r1, #128	; 0x80
 8001148:	4840      	ldr	r0, [pc, #256]	; (800124c <pinset+0x2f4>)
 800114a:	f001 ff71 	bl	8003030 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800114e:	2200      	movs	r2, #0
 8001150:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001154:	483d      	ldr	r0, [pc, #244]	; (800124c <pinset+0x2f4>)
 8001156:	f001 ff6b 	bl	8003030 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800115a:	2201      	movs	r2, #1
 800115c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001160:	483a      	ldr	r0, [pc, #232]	; (800124c <pinset+0x2f4>)
 8001162:	f001 ff65 	bl	8003030 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8001166:	2200      	movs	r2, #0
 8001168:	f44f 7180 	mov.w	r1, #256	; 0x100
 800116c:	4830      	ldr	r0, [pc, #192]	; (8001230 <pinset+0x2d8>)
 800116e:	f001 ff5f 	bl	8003030 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8001172:	2200      	movs	r2, #0
 8001174:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001178:	482d      	ldr	r0, [pc, #180]	; (8001230 <pinset+0x2d8>)
 800117a:	f001 ff59 	bl	8003030 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800117e:	2200      	movs	r2, #0
 8001180:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001184:	482a      	ldr	r0, [pc, #168]	; (8001230 <pinset+0x2d8>)
 8001186:	f001 ff53 	bl	8003030 <HAL_GPIO_WritePin>
		}
		break;
 800118a:	e105      	b.n	8001398 <pinset+0x440>

		case 4:
		{
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 800118c:	2201      	movs	r2, #1
 800118e:	2140      	movs	r1, #64	; 0x40
 8001190:	482e      	ldr	r0, [pc, #184]	; (800124c <pinset+0x2f4>)
 8001192:	f001 ff4d 	bl	8003030 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8001196:	2200      	movs	r2, #0
 8001198:	2180      	movs	r1, #128	; 0x80
 800119a:	482c      	ldr	r0, [pc, #176]	; (800124c <pinset+0x2f4>)
 800119c:	f001 ff48 	bl	8003030 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 80011a0:	2200      	movs	r2, #0
 80011a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011a6:	4829      	ldr	r0, [pc, #164]	; (800124c <pinset+0x2f4>)
 80011a8:	f001 ff42 	bl	8003030 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 80011ac:	2201      	movs	r2, #1
 80011ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011b2:	4826      	ldr	r0, [pc, #152]	; (800124c <pinset+0x2f4>)
 80011b4:	f001 ff3c 	bl	8003030 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80011b8:	2201      	movs	r2, #1
 80011ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011be:	481c      	ldr	r0, [pc, #112]	; (8001230 <pinset+0x2d8>)
 80011c0:	f001 ff36 	bl	8003030 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80011c4:	2200      	movs	r2, #0
 80011c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011ca:	4819      	ldr	r0, [pc, #100]	; (8001230 <pinset+0x2d8>)
 80011cc:	f001 ff30 	bl	8003030 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80011d0:	2200      	movs	r2, #0
 80011d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011d6:	4816      	ldr	r0, [pc, #88]	; (8001230 <pinset+0x2d8>)
 80011d8:	f001 ff2a 	bl	8003030 <HAL_GPIO_WritePin>
		}
		break;
 80011dc:	e0dc      	b.n	8001398 <pinset+0x440>

		case 5:
		{
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 80011de:	2200      	movs	r2, #0
 80011e0:	2140      	movs	r1, #64	; 0x40
 80011e2:	481a      	ldr	r0, [pc, #104]	; (800124c <pinset+0x2f4>)
 80011e4:	f001 ff24 	bl	8003030 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80011e8:	2200      	movs	r2, #0
 80011ea:	2180      	movs	r1, #128	; 0x80
 80011ec:	4817      	ldr	r0, [pc, #92]	; (800124c <pinset+0x2f4>)
 80011ee:	f001 ff1f 	bl	8003030 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 80011f2:	2201      	movs	r2, #1
 80011f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011f8:	4814      	ldr	r0, [pc, #80]	; (800124c <pinset+0x2f4>)
 80011fa:	f001 ff19 	bl	8003030 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 80011fe:	2201      	movs	r2, #1
 8001200:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001204:	4811      	ldr	r0, [pc, #68]	; (800124c <pinset+0x2f4>)
 8001206:	f001 ff13 	bl	8003030 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800120a:	2200      	movs	r2, #0
 800120c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001210:	4807      	ldr	r0, [pc, #28]	; (8001230 <pinset+0x2d8>)
 8001212:	f001 ff0d 	bl	8003030 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8001216:	2200      	movs	r2, #0
 8001218:	f44f 7100 	mov.w	r1, #512	; 0x200
 800121c:	4804      	ldr	r0, [pc, #16]	; (8001230 <pinset+0x2d8>)
 800121e:	f001 ff07 	bl	8003030 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001222:	2200      	movs	r2, #0
 8001224:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001228:	4801      	ldr	r0, [pc, #4]	; (8001230 <pinset+0x2d8>)
 800122a:	f001 ff01 	bl	8003030 <HAL_GPIO_WritePin>
		}
		break;
 800122e:	e0b3      	b.n	8001398 <pinset+0x440>
 8001230:	40020000 	.word	0x40020000
 8001234:	200000c0 	.word	0x200000c0
 8001238:	200000c8 	.word	0x200000c8
 800123c:	200000bc 	.word	0x200000bc
 8001240:	66666667 	.word	0x66666667
 8001244:	200000c4 	.word	0x200000c4
 8001248:	200000cc 	.word	0x200000cc
 800124c:	40020800 	.word	0x40020800

		case 6:
		{
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8001250:	2200      	movs	r2, #0
 8001252:	2140      	movs	r1, #64	; 0x40
 8001254:	4851      	ldr	r0, [pc, #324]	; (800139c <pinset+0x444>)
 8001256:	f001 feeb 	bl	8003030 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 800125a:	2200      	movs	r2, #0
 800125c:	2180      	movs	r1, #128	; 0x80
 800125e:	484f      	ldr	r0, [pc, #316]	; (800139c <pinset+0x444>)
 8001260:	f001 fee6 	bl	8003030 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8001264:	2201      	movs	r2, #1
 8001266:	f44f 7180 	mov.w	r1, #256	; 0x100
 800126a:	484c      	ldr	r0, [pc, #304]	; (800139c <pinset+0x444>)
 800126c:	f001 fee0 	bl	8003030 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8001270:	2200      	movs	r2, #0
 8001272:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001276:	4849      	ldr	r0, [pc, #292]	; (800139c <pinset+0x444>)
 8001278:	f001 feda 	bl	8003030 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800127c:	2200      	movs	r2, #0
 800127e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001282:	4847      	ldr	r0, [pc, #284]	; (80013a0 <pinset+0x448>)
 8001284:	f001 fed4 	bl	8003030 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8001288:	2200      	movs	r2, #0
 800128a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800128e:	4844      	ldr	r0, [pc, #272]	; (80013a0 <pinset+0x448>)
 8001290:	f001 fece 	bl	8003030 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001294:	2200      	movs	r2, #0
 8001296:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800129a:	4841      	ldr	r0, [pc, #260]	; (80013a0 <pinset+0x448>)
 800129c:	f001 fec8 	bl	8003030 <HAL_GPIO_WritePin>
		}
		break;
 80012a0:	e07a      	b.n	8001398 <pinset+0x440>

		case 7:
		{
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 80012a2:	2200      	movs	r2, #0
 80012a4:	2140      	movs	r1, #64	; 0x40
 80012a6:	483d      	ldr	r0, [pc, #244]	; (800139c <pinset+0x444>)
 80012a8:	f001 fec2 	bl	8003030 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80012ac:	2200      	movs	r2, #0
 80012ae:	2180      	movs	r1, #128	; 0x80
 80012b0:	483a      	ldr	r0, [pc, #232]	; (800139c <pinset+0x444>)
 80012b2:	f001 febd 	bl	8003030 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 80012b6:	2200      	movs	r2, #0
 80012b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012bc:	4837      	ldr	r0, [pc, #220]	; (800139c <pinset+0x444>)
 80012be:	f001 feb7 	bl	8003030 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 80012c2:	2201      	movs	r2, #1
 80012c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012c8:	4834      	ldr	r0, [pc, #208]	; (800139c <pinset+0x444>)
 80012ca:	f001 feb1 	bl	8003030 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80012ce:	2201      	movs	r2, #1
 80012d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012d4:	4832      	ldr	r0, [pc, #200]	; (80013a0 <pinset+0x448>)
 80012d6:	f001 feab 	bl	8003030 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80012da:	2200      	movs	r2, #0
 80012dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012e0:	482f      	ldr	r0, [pc, #188]	; (80013a0 <pinset+0x448>)
 80012e2:	f001 fea5 	bl	8003030 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80012e6:	2201      	movs	r2, #1
 80012e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012ec:	482c      	ldr	r0, [pc, #176]	; (80013a0 <pinset+0x448>)
 80012ee:	f001 fe9f 	bl	8003030 <HAL_GPIO_WritePin>
		}
		break;
 80012f2:	e051      	b.n	8001398 <pinset+0x440>

		case 8:
		{
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 80012f4:	2200      	movs	r2, #0
 80012f6:	2140      	movs	r1, #64	; 0x40
 80012f8:	4828      	ldr	r0, [pc, #160]	; (800139c <pinset+0x444>)
 80012fa:	f001 fe99 	bl	8003030 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80012fe:	2200      	movs	r2, #0
 8001300:	2180      	movs	r1, #128	; 0x80
 8001302:	4826      	ldr	r0, [pc, #152]	; (800139c <pinset+0x444>)
 8001304:	f001 fe94 	bl	8003030 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8001308:	2200      	movs	r2, #0
 800130a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800130e:	4823      	ldr	r0, [pc, #140]	; (800139c <pinset+0x444>)
 8001310:	f001 fe8e 	bl	8003030 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8001314:	2200      	movs	r2, #0
 8001316:	f44f 7100 	mov.w	r1, #512	; 0x200
 800131a:	4820      	ldr	r0, [pc, #128]	; (800139c <pinset+0x444>)
 800131c:	f001 fe88 	bl	8003030 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8001320:	2200      	movs	r2, #0
 8001322:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001326:	481e      	ldr	r0, [pc, #120]	; (80013a0 <pinset+0x448>)
 8001328:	f001 fe82 	bl	8003030 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 800132c:	2200      	movs	r2, #0
 800132e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001332:	481b      	ldr	r0, [pc, #108]	; (80013a0 <pinset+0x448>)
 8001334:	f001 fe7c 	bl	8003030 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001338:	2200      	movs	r2, #0
 800133a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800133e:	4818      	ldr	r0, [pc, #96]	; (80013a0 <pinset+0x448>)
 8001340:	f001 fe76 	bl	8003030 <HAL_GPIO_WritePin>
		}
		break;
 8001344:	e028      	b.n	8001398 <pinset+0x440>

		case 9:
		{
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8001346:	2200      	movs	r2, #0
 8001348:	2140      	movs	r1, #64	; 0x40
 800134a:	4814      	ldr	r0, [pc, #80]	; (800139c <pinset+0x444>)
 800134c:	f001 fe70 	bl	8003030 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8001350:	2200      	movs	r2, #0
 8001352:	2180      	movs	r1, #128	; 0x80
 8001354:	4811      	ldr	r0, [pc, #68]	; (800139c <pinset+0x444>)
 8001356:	f001 fe6b 	bl	8003030 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800135a:	2200      	movs	r2, #0
 800135c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001360:	480e      	ldr	r0, [pc, #56]	; (800139c <pinset+0x444>)
 8001362:	f001 fe65 	bl	8003030 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8001366:	2201      	movs	r2, #1
 8001368:	f44f 7100 	mov.w	r1, #512	; 0x200
 800136c:	480b      	ldr	r0, [pc, #44]	; (800139c <pinset+0x444>)
 800136e:	f001 fe5f 	bl	8003030 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8001372:	2200      	movs	r2, #0
 8001374:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001378:	4809      	ldr	r0, [pc, #36]	; (80013a0 <pinset+0x448>)
 800137a:	f001 fe59 	bl	8003030 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 800137e:	2200      	movs	r2, #0
 8001380:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001384:	4806      	ldr	r0, [pc, #24]	; (80013a0 <pinset+0x448>)
 8001386:	f001 fe53 	bl	8003030 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800138a:	2200      	movs	r2, #0
 800138c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001390:	4803      	ldr	r0, [pc, #12]	; (80013a0 <pinset+0x448>)
 8001392:	f001 fe4d 	bl	8003030 <HAL_GPIO_WritePin>
		}
		break;
 8001396:	bf00      	nop

	}

}
 8001398:	bf00      	nop
 800139a:	bd80      	pop	{r7, pc}
 800139c:	40020800 	.word	0x40020800
 80013a0:	40020000 	.word	0x40020000

080013a4 <Read_ADC>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


uint16_t Read_ADC()
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
  	HAL_ADC_Start(&hadc1);
 80013aa:	480b      	ldr	r0, [pc, #44]	; (80013d8 <Read_ADC+0x34>)
 80013ac:	f000 ffbe 	bl	800232c <HAL_ADC_Start>
  	uint16_t temp;
// ADC dönüşümünü başlatır
  	if(HAL_ADC_PollForConversion(&hadc1, 100000 ) == HAL_OK)
 80013b0:	490a      	ldr	r1, [pc, #40]	; (80013dc <Read_ADC+0x38>)
 80013b2:	4809      	ldr	r0, [pc, #36]	; (80013d8 <Read_ADC+0x34>)
 80013b4:	f001 f8bf 	bl	8002536 <HAL_ADC_PollForConversion>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d104      	bne.n	80013c8 <Read_ADC+0x24>
  	{
// ADC tarafından ölçülen değeri alır
  		temp = HAL_ADC_GetValue(&hadc1);
 80013be:	4806      	ldr	r0, [pc, #24]	; (80013d8 <Read_ADC+0x34>)
 80013c0:	f001 f944 	bl	800264c <HAL_ADC_GetValue>
 80013c4:	4603      	mov	r3, r0
 80013c6:	80fb      	strh	r3, [r7, #6]
  	}
// ADC'yi kapatır
  	HAL_ADC_Stop(&hadc1);
 80013c8:	4803      	ldr	r0, [pc, #12]	; (80013d8 <Read_ADC+0x34>)
 80013ca:	f001 f881 	bl	80024d0 <HAL_ADC_Stop>
// Ölçüm sonucunu döndürür
  	return temp;
 80013ce:	88fb      	ldrh	r3, [r7, #6]
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3708      	adds	r7, #8
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	200000d0 	.word	0x200000d0
 80013dc:	000186a0 	.word	0x000186a0

080013e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013e0:	b5b0      	push	{r4, r5, r7, lr}
 80013e2:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013e8:	f000 feea 	bl	80021c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013ec:	f000 f9c2 	bl	8001774 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013f0:	f000 faf2 	bl	80019d8 <MX_GPIO_Init>
  MX_ADC1_Init();
 80013f4:	f000 fa28 	bl	8001848 <MX_ADC1_Init>
  MX_UART5_Init();
 80013f8:	f000 fac4 	bl	8001984 <MX_UART5_Init>
  MX_TIM2_Init();
 80013fc:	f000 fa76 	bl	80018ec <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim2);
 8001400:	4854      	ldr	r0, [pc, #336]	; (8001554 <main+0x174>)
 8001402:	f002 fb17 	bl	8003a34 <HAL_TIM_Base_Start_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
// LED'leri kontrol eden işlevi çağırır
	  ledHandle();
 8001406:	f000 fbab 	bl	8001b60 <ledHandle>
	  if ((time_count-buffer_counter_median) > 5){
 800140a:	4b53      	ldr	r3, [pc, #332]	; (8001558 <main+0x178>)
 800140c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001410:	4b52      	ldr	r3, [pc, #328]	; (800155c <main+0x17c>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4618      	mov	r0, r3
 8001416:	f7ff f885 	bl	8000524 <__aeabi_i2d>
 800141a:	4602      	mov	r2, r0
 800141c:	460b      	mov	r3, r1
 800141e:	4620      	mov	r0, r4
 8001420:	4629      	mov	r1, r5
 8001422:	f7fe ff31 	bl	8000288 <__aeabi_dsub>
 8001426:	4602      	mov	r2, r0
 8001428:	460b      	mov	r3, r1
 800142a:	4610      	mov	r0, r2
 800142c:	4619      	mov	r1, r3
 800142e:	f04f 0200 	mov.w	r2, #0
 8001432:	4b4b      	ldr	r3, [pc, #300]	; (8001560 <main+0x180>)
 8001434:	f7ff fb70 	bl	8000b18 <__aeabi_dcmpgt>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d017      	beq.n	800146e <main+0x8e>
// Ölçüm aralığını kontrol etmek için bir zaman karşılaştırması yapar
	 		  buffer_counter_median=time_count;
 800143e:	4b46      	ldr	r3, [pc, #280]	; (8001558 <main+0x178>)
 8001440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001444:	4610      	mov	r0, r2
 8001446:	4619      	mov	r1, r3
 8001448:	f7ff fb70 	bl	8000b2c <__aeabi_d2iz>
 800144c:	4603      	mov	r3, r0
 800144e:	4a43      	ldr	r2, [pc, #268]	; (800155c <main+0x17c>)
 8001450:	6013      	str	r3, [r2, #0]
// ADC ölçümünü alır ve filtreleme tamponuna kaydeder
	 		  filter_buffer_median[buffer_index_median] =  Read_ADC();
 8001452:	4b44      	ldr	r3, [pc, #272]	; (8001564 <main+0x184>)
 8001454:	681c      	ldr	r4, [r3, #0]
 8001456:	f7ff ffa5 	bl	80013a4 <Read_ADC>
 800145a:	4603      	mov	r3, r0
 800145c:	461a      	mov	r2, r3
 800145e:	4b42      	ldr	r3, [pc, #264]	; (8001568 <main+0x188>)
 8001460:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
	 		  buffer_index_median++;
 8001464:	4b3f      	ldr	r3, [pc, #252]	; (8001564 <main+0x184>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	3301      	adds	r3, #1
 800146a:	4a3e      	ldr	r2, [pc, #248]	; (8001564 <main+0x184>)
 800146c:	6013      	str	r3, [r2, #0]
	  }

	  if(buffer_index_median == BUFFER_SIZE_MEDIAN - 1){
 800146e:	4b3d      	ldr	r3, [pc, #244]	; (8001564 <main+0x184>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	2b13      	cmp	r3, #19
 8001474:	f040 80b0 	bne.w	80015d8 <main+0x1f8>
// Median filtreleme işlemi yapmak için tampon dolmuş mu kontrol eder
		  buffer_index_median=0;
 8001478:	4b3a      	ldr	r3, [pc, #232]	; (8001564 <main+0x184>)
 800147a:	2200      	movs	r2, #0
 800147c:	601a      	str	r2, [r3, #0]

		  for (int i = 0; i < BUFFER_SIZE_MEDIAN - 1; i++) {
 800147e:	2300      	movs	r3, #0
 8001480:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 8001484:	e037      	b.n	80014f6 <main+0x116>
		      for (int j = i + 1; j < BUFFER_SIZE_MEDIAN; j++) {
 8001486:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800148a:	3301      	adds	r3, #1
 800148c:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8001490:	e028      	b.n	80014e4 <main+0x104>
		          if (filter_buffer_median[i] > filter_buffer_median[j]) {
 8001492:	4a35      	ldr	r2, [pc, #212]	; (8001568 <main+0x188>)
 8001494:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8001498:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800149c:	4932      	ldr	r1, [pc, #200]	; (8001568 <main+0x188>)
 800149e:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80014a2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80014a6:	429a      	cmp	r2, r3
 80014a8:	d917      	bls.n	80014da <main+0xfa>
// Median filtreleme işlemi için değişkenleri sıralar
		              uint16_t temp = filter_buffer_median[i];
 80014aa:	4a2f      	ldr	r2, [pc, #188]	; (8001568 <main+0x188>)
 80014ac:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80014b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80014b4:	f8a7 3202 	strh.w	r3, [r7, #514]	; 0x202
		              filter_buffer_median[i] = filter_buffer_median[j];
 80014b8:	4a2b      	ldr	r2, [pc, #172]	; (8001568 <main+0x188>)
 80014ba:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80014be:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80014c2:	4a29      	ldr	r2, [pc, #164]	; (8001568 <main+0x188>)
 80014c4:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80014c8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		              filter_buffer_median[j] = temp;
 80014cc:	4926      	ldr	r1, [pc, #152]	; (8001568 <main+0x188>)
 80014ce:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80014d2:	f8b7 2202 	ldrh.w	r2, [r7, #514]	; 0x202
 80014d6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		      for (int j = i + 1; j < BUFFER_SIZE_MEDIAN; j++) {
 80014da:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80014de:	3301      	adds	r3, #1
 80014e0:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 80014e4:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80014e8:	2b13      	cmp	r3, #19
 80014ea:	ddd2      	ble.n	8001492 <main+0xb2>
		  for (int i = 0; i < BUFFER_SIZE_MEDIAN - 1; i++) {
 80014ec:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80014f0:	3301      	adds	r3, #1
 80014f2:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 80014f6:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80014fa:	2b12      	cmp	r3, #18
 80014fc:	ddc3      	ble.n	8001486 <main+0xa6>
		          }
		      }
		  }
// Median filtreleme sonucunu hesaplar ve tampona kaydeder
		  buffer_counter_median = (filter_buffer_median[BUFFER_SIZE_MEDIAN / 2 - 1] + filter_buffer_median[BUFFER_SIZE_MEDIAN / 2]) / 2;
 80014fe:	4b1a      	ldr	r3, [pc, #104]	; (8001568 <main+0x188>)
 8001500:	8a5b      	ldrh	r3, [r3, #18]
 8001502:	461a      	mov	r2, r3
 8001504:	4b18      	ldr	r3, [pc, #96]	; (8001568 <main+0x188>)
 8001506:	8a9b      	ldrh	r3, [r3, #20]
 8001508:	4413      	add	r3, r2
 800150a:	0fda      	lsrs	r2, r3, #31
 800150c:	4413      	add	r3, r2
 800150e:	105b      	asrs	r3, r3, #1
 8001510:	461a      	mov	r2, r3
 8001512:	4b12      	ldr	r3, [pc, #72]	; (800155c <main+0x17c>)
 8001514:	601a      	str	r2, [r3, #0]
		  filter_buffer[buffer_index] =  buffer_counter_median;
 8001516:	4b11      	ldr	r3, [pc, #68]	; (800155c <main+0x17c>)
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	4b14      	ldr	r3, [pc, #80]	; (800156c <main+0x18c>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	b291      	uxth	r1, r2
 8001520:	4a13      	ldr	r2, [pc, #76]	; (8001570 <main+0x190>)
 8001522:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		  buffer_index++;
 8001526:	4b11      	ldr	r3, [pc, #68]	; (800156c <main+0x18c>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	3301      	adds	r3, #1
 800152c:	4a0f      	ldr	r2, [pc, #60]	; (800156c <main+0x18c>)
 800152e:	6013      	str	r3, [r2, #0]


	  if(buffer_index == BUFFER_SIZE - 1){
 8001530:	4b0e      	ldr	r3, [pc, #56]	; (800156c <main+0x18c>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	2b13      	cmp	r3, #19
 8001536:	d14f      	bne.n	80015d8 <main+0x1f8>
// Daha fazla veri biriktiğinde ADC değerini hesaplar
		  buffer_index = 0;
 8001538:	4b0c      	ldr	r3, [pc, #48]	; (800156c <main+0x18c>)
 800153a:	2200      	movs	r2, #0
 800153c:	601a      	str	r2, [r3, #0]
		  double sum=0;
 800153e:	f04f 0200 	mov.w	r2, #0
 8001542:	f04f 0300 	mov.w	r3, #0
 8001546:	e9c7 2382 	strd	r2, r3, [r7, #520]	; 0x208
		  for(int i=0; i < BUFFER_SIZE; i++)
 800154a:	2300      	movs	r3, #0
 800154c:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 8001550:	e027      	b.n	80015a2 <main+0x1c2>
 8001552:	bf00      	nop
 8001554:	20000118 	.word	0x20000118
 8001558:	200001a8 	.word	0x200001a8
 800155c:	200001b4 	.word	0x200001b4
 8001560:	40140000 	.word	0x40140000
 8001564:	200001bc 	.word	0x200001bc
 8001568:	200001e8 	.word	0x200001e8
 800156c:	200001b8 	.word	0x200001b8
 8001570:	200001c0 	.word	0x200001c0
			  sum = sum + filter_buffer[i];
 8001574:	4a70      	ldr	r2, [pc, #448]	; (8001738 <main+0x358>)
 8001576:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 800157a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800157e:	4618      	mov	r0, r3
 8001580:	f7fe ffd0 	bl	8000524 <__aeabi_i2d>
 8001584:	4602      	mov	r2, r0
 8001586:	460b      	mov	r3, r1
 8001588:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	; 0x208
 800158c:	f7fe fe7e 	bl	800028c <__adddf3>
 8001590:	4602      	mov	r2, r0
 8001592:	460b      	mov	r3, r1
 8001594:	e9c7 2382 	strd	r2, r3, [r7, #520]	; 0x208
		  for(int i=0; i < BUFFER_SIZE; i++)
 8001598:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 800159c:	3301      	adds	r3, #1
 800159e:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 80015a2:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80015a6:	2b13      	cmp	r3, #19
 80015a8:	dde4      	ble.n	8001574 <main+0x194>
		 adc_value= sum/BUFFER_SIZE;
 80015aa:	f04f 0200 	mov.w	r2, #0
 80015ae:	4b63      	ldr	r3, [pc, #396]	; (800173c <main+0x35c>)
 80015b0:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	; 0x208
 80015b4:	f7ff f94a 	bl	800084c <__aeabi_ddiv>
 80015b8:	4602      	mov	r2, r0
 80015ba:	460b      	mov	r3, r1
 80015bc:	4610      	mov	r0, r2
 80015be:	4619      	mov	r1, r3
 80015c0:	f7ff fadc 	bl	8000b7c <__aeabi_d2uiz>
 80015c4:	4603      	mov	r3, r0
 80015c6:	b29a      	uxth	r2, r3
 80015c8:	4b5d      	ldr	r3, [pc, #372]	; (8001740 <main+0x360>)
 80015ca:	801a      	strh	r2, [r3, #0]
		 setLedPeriyot(&led_1, adc_value);// LED'in yanma periyodunu ayarlar
 80015cc:	4b5c      	ldr	r3, [pc, #368]	; (8001740 <main+0x360>)
 80015ce:	881b      	ldrh	r3, [r3, #0]
 80015d0:	4619      	mov	r1, r3
 80015d2:	485c      	ldr	r0, [pc, #368]	; (8001744 <main+0x364>)
 80015d4:	f000 fc2e 	bl	8001e34 <setLedPeriyot>
	  }
  }

	     if( adc_value != adc_value_old ) {
 80015d8:	4b59      	ldr	r3, [pc, #356]	; (8001740 <main+0x360>)
 80015da:	881a      	ldrh	r2, [r3, #0]
 80015dc:	4b5a      	ldr	r3, [pc, #360]	; (8001748 <main+0x368>)
 80015de:	881b      	ldrh	r3, [r3, #0]
 80015e0:	429a      	cmp	r2, r3
 80015e2:	f000 80a5 	beq.w	8001730 <main+0x350>
// Önceki ADC değeri ile yeni ölçülen değeri karşılaştırır
		  adc_value_old = adc_value;
 80015e6:	4b56      	ldr	r3, [pc, #344]	; (8001740 <main+0x360>)
 80015e8:	881a      	ldrh	r2, [r3, #0]
 80015ea:	4b57      	ldr	r3, [pc, #348]	; (8001748 <main+0x368>)
 80015ec:	801a      	strh	r2, [r3, #0]

		  uint8_t veri[512] = {0};
 80015ee:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80015f2:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 80015f6:	2200      	movs	r2, #0
 80015f8:	601a      	str	r2, [r3, #0]
 80015fa:	3304      	adds	r3, #4
 80015fc:	f44f 72fe 	mov.w	r2, #508	; 0x1fc
 8001600:	2100      	movs	r1, #0
 8001602:	4618      	mov	r0, r3
 8001604:	f003 fa34 	bl	8004a70 <memset>
// İletiyi başlık ve ayracı ekleyerek oluşturur
		  sprintf((char *)veri,"********************************\n\n\r  ");
 8001608:	463b      	mov	r3, r7
 800160a:	4950      	ldr	r1, [pc, #320]	; (800174c <main+0x36c>)
 800160c:	4618      	mov	r0, r3
 800160e:	f003 fa0f 	bl	8004a30 <siprintf>
		  HAL_UART_Transmit(&huart5, veri, (uint16_t)strlen(veri),1000);
 8001612:	463b      	mov	r3, r7
 8001614:	4618      	mov	r0, r3
 8001616:	f7fe fddb 	bl	80001d0 <strlen>
 800161a:	4603      	mov	r3, r0
 800161c:	b29a      	uxth	r2, r3
 800161e:	4639      	mov	r1, r7
 8001620:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001624:	484a      	ldr	r0, [pc, #296]	; (8001750 <main+0x370>)
 8001626:	f002 fe8e 	bl	8004346 <HAL_UART_Transmit>
// LED periyotlarını ve potansiyometre değerini iletiye ekler
		  memset(veri,0,512);
 800162a:	463b      	mov	r3, r7
 800162c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001630:	2100      	movs	r1, #0
 8001632:	4618      	mov	r0, r3
 8001634:	f003 fa1c 	bl	8004a70 <memset>
		  sprintf((char *)veri,"Led_1 period:%d ms  \n  ", (int)(led_1.period));
 8001638:	4b42      	ldr	r3, [pc, #264]	; (8001744 <main+0x364>)
 800163a:	68da      	ldr	r2, [r3, #12]
 800163c:	463b      	mov	r3, r7
 800163e:	4945      	ldr	r1, [pc, #276]	; (8001754 <main+0x374>)
 8001640:	4618      	mov	r0, r3
 8001642:	f003 f9f5 	bl	8004a30 <siprintf>
		  HAL_UART_Transmit(&huart5, veri, (uint16_t)strlen(veri),1000);
 8001646:	463b      	mov	r3, r7
 8001648:	4618      	mov	r0, r3
 800164a:	f7fe fdc1 	bl	80001d0 <strlen>
 800164e:	4603      	mov	r3, r0
 8001650:	b29a      	uxth	r2, r3
 8001652:	4639      	mov	r1, r7
 8001654:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001658:	483d      	ldr	r0, [pc, #244]	; (8001750 <main+0x370>)
 800165a:	f002 fe74 	bl	8004346 <HAL_UART_Transmit>

		  memset(veri,0,512);
 800165e:	463b      	mov	r3, r7
 8001660:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001664:	2100      	movs	r1, #0
 8001666:	4618      	mov	r0, r3
 8001668:	f003 fa02 	bl	8004a70 <memset>
		  sprintf((char *)veri,"Led_2 period:%d  ms \n  ", (int)(led_2.period));
 800166c:	4b3a      	ldr	r3, [pc, #232]	; (8001758 <main+0x378>)
 800166e:	68da      	ldr	r2, [r3, #12]
 8001670:	463b      	mov	r3, r7
 8001672:	493a      	ldr	r1, [pc, #232]	; (800175c <main+0x37c>)
 8001674:	4618      	mov	r0, r3
 8001676:	f003 f9db 	bl	8004a30 <siprintf>
		  HAL_UART_Transmit(&huart5, veri, (uint16_t)strlen(veri),1000);
 800167a:	463b      	mov	r3, r7
 800167c:	4618      	mov	r0, r3
 800167e:	f7fe fda7 	bl	80001d0 <strlen>
 8001682:	4603      	mov	r3, r0
 8001684:	b29a      	uxth	r2, r3
 8001686:	4639      	mov	r1, r7
 8001688:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800168c:	4830      	ldr	r0, [pc, #192]	; (8001750 <main+0x370>)
 800168e:	f002 fe5a 	bl	8004346 <HAL_UART_Transmit>

		  memset(veri,0,512);
 8001692:	463b      	mov	r3, r7
 8001694:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001698:	2100      	movs	r1, #0
 800169a:	4618      	mov	r0, r3
 800169c:	f003 f9e8 	bl	8004a70 <memset>
		  sprintf((char *)veri,"Led_3 period:%d ms  \n  ", (int)(led_3.period));
 80016a0:	4b2f      	ldr	r3, [pc, #188]	; (8001760 <main+0x380>)
 80016a2:	68da      	ldr	r2, [r3, #12]
 80016a4:	463b      	mov	r3, r7
 80016a6:	492f      	ldr	r1, [pc, #188]	; (8001764 <main+0x384>)
 80016a8:	4618      	mov	r0, r3
 80016aa:	f003 f9c1 	bl	8004a30 <siprintf>
		  HAL_UART_Transmit(&huart5, veri, (uint16_t)strlen(veri),1000);
 80016ae:	463b      	mov	r3, r7
 80016b0:	4618      	mov	r0, r3
 80016b2:	f7fe fd8d 	bl	80001d0 <strlen>
 80016b6:	4603      	mov	r3, r0
 80016b8:	b29a      	uxth	r2, r3
 80016ba:	4639      	mov	r1, r7
 80016bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016c0:	4823      	ldr	r0, [pc, #140]	; (8001750 <main+0x370>)
 80016c2:	f002 fe40 	bl	8004346 <HAL_UART_Transmit>

		  memset(veri,0,512);
 80016c6:	463b      	mov	r3, r7
 80016c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016cc:	2100      	movs	r1, #0
 80016ce:	4618      	mov	r0, r3
 80016d0:	f003 f9ce 	bl	8004a70 <memset>
		  sprintf((char *)veri,"Led_4 period:%d ms  \n  ", (int)(led_4.period));
 80016d4:	4b24      	ldr	r3, [pc, #144]	; (8001768 <main+0x388>)
 80016d6:	68da      	ldr	r2, [r3, #12]
 80016d8:	463b      	mov	r3, r7
 80016da:	4924      	ldr	r1, [pc, #144]	; (800176c <main+0x38c>)
 80016dc:	4618      	mov	r0, r3
 80016de:	f003 f9a7 	bl	8004a30 <siprintf>
		  HAL_UART_Transmit(&huart5, veri, (uint16_t)strlen(veri),1000);
 80016e2:	463b      	mov	r3, r7
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7fe fd73 	bl	80001d0 <strlen>
 80016ea:	4603      	mov	r3, r0
 80016ec:	b29a      	uxth	r2, r3
 80016ee:	4639      	mov	r1, r7
 80016f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016f4:	4816      	ldr	r0, [pc, #88]	; (8001750 <main+0x370>)
 80016f6:	f002 fe26 	bl	8004346 <HAL_UART_Transmit>

		  memset(veri,0,512);
 80016fa:	463b      	mov	r3, r7
 80016fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001700:	2100      	movs	r1, #0
 8001702:	4618      	mov	r0, r3
 8001704:	f003 f9b4 	bl	8004a70 <memset>
		  sprintf((char *)veri,"Potansiyometer Values:%d  \n  ",adc_value);
 8001708:	4b0d      	ldr	r3, [pc, #52]	; (8001740 <main+0x360>)
 800170a:	881b      	ldrh	r3, [r3, #0]
 800170c:	461a      	mov	r2, r3
 800170e:	463b      	mov	r3, r7
 8001710:	4917      	ldr	r1, [pc, #92]	; (8001770 <main+0x390>)
 8001712:	4618      	mov	r0, r3
 8001714:	f003 f98c 	bl	8004a30 <siprintf>
		  HAL_UART_Transmit(&huart5, veri, (uint16_t)strlen(veri),1000);
 8001718:	463b      	mov	r3, r7
 800171a:	4618      	mov	r0, r3
 800171c:	f7fe fd58 	bl	80001d0 <strlen>
 8001720:	4603      	mov	r3, r0
 8001722:	b29a      	uxth	r2, r3
 8001724:	4639      	mov	r1, r7
 8001726:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800172a:	4809      	ldr	r0, [pc, #36]	; (8001750 <main+0x370>)
 800172c:	f002 fe0b 	bl	8004346 <HAL_UART_Transmit>
	}
	     pinset();
 8001730:	f7ff fc12 	bl	8000f58 <pinset>
	  ledHandle();
 8001734:	e667      	b.n	8001406 <main+0x26>
 8001736:	bf00      	nop
 8001738:	200001c0 	.word	0x200001c0
 800173c:	40340000 	.word	0x40340000
 8001740:	200001b0 	.word	0x200001b0
 8001744:	20000000 	.word	0x20000000
 8001748:	200001b2 	.word	0x200001b2
 800174c:	08005390 	.word	0x08005390
 8001750:	20000160 	.word	0x20000160
 8001754:	080053b8 	.word	0x080053b8
 8001758:	20000010 	.word	0x20000010
 800175c:	080053d0 	.word	0x080053d0
 8001760:	20000020 	.word	0x20000020
 8001764:	080053e8 	.word	0x080053e8
 8001768:	20000030 	.word	0x20000030
 800176c:	08005400 	.word	0x08005400
 8001770:	08005418 	.word	0x08005418

08001774 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b094      	sub	sp, #80	; 0x50
 8001778:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800177a:	f107 0320 	add.w	r3, r7, #32
 800177e:	2230      	movs	r2, #48	; 0x30
 8001780:	2100      	movs	r1, #0
 8001782:	4618      	mov	r0, r3
 8001784:	f003 f974 	bl	8004a70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001788:	f107 030c 	add.w	r3, r7, #12
 800178c:	2200      	movs	r2, #0
 800178e:	601a      	str	r2, [r3, #0]
 8001790:	605a      	str	r2, [r3, #4]
 8001792:	609a      	str	r2, [r3, #8]
 8001794:	60da      	str	r2, [r3, #12]
 8001796:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001798:	2300      	movs	r3, #0
 800179a:	60bb      	str	r3, [r7, #8]
 800179c:	4b28      	ldr	r3, [pc, #160]	; (8001840 <SystemClock_Config+0xcc>)
 800179e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a0:	4a27      	ldr	r2, [pc, #156]	; (8001840 <SystemClock_Config+0xcc>)
 80017a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017a6:	6413      	str	r3, [r2, #64]	; 0x40
 80017a8:	4b25      	ldr	r3, [pc, #148]	; (8001840 <SystemClock_Config+0xcc>)
 80017aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017b0:	60bb      	str	r3, [r7, #8]
 80017b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017b4:	2300      	movs	r3, #0
 80017b6:	607b      	str	r3, [r7, #4]
 80017b8:	4b22      	ldr	r3, [pc, #136]	; (8001844 <SystemClock_Config+0xd0>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a21      	ldr	r2, [pc, #132]	; (8001844 <SystemClock_Config+0xd0>)
 80017be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017c2:	6013      	str	r3, [r2, #0]
 80017c4:	4b1f      	ldr	r3, [pc, #124]	; (8001844 <SystemClock_Config+0xd0>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017cc:	607b      	str	r3, [r7, #4]
 80017ce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80017d0:	2301      	movs	r3, #1
 80017d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017d8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017da:	2302      	movs	r3, #2
 80017dc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017de:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80017e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80017e4:	2308      	movs	r3, #8
 80017e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80017e8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80017ec:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017ee:	2302      	movs	r3, #2
 80017f0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80017f2:	2307      	movs	r3, #7
 80017f4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017f6:	f107 0320 	add.w	r3, r7, #32
 80017fa:	4618      	mov	r0, r3
 80017fc:	f001 fc32 	bl	8003064 <HAL_RCC_OscConfig>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001806:	f000 f9a5 	bl	8001b54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800180a:	230f      	movs	r3, #15
 800180c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800180e:	2302      	movs	r3, #2
 8001810:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001812:	2300      	movs	r3, #0
 8001814:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001816:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800181a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800181c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001820:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001822:	f107 030c 	add.w	r3, r7, #12
 8001826:	2105      	movs	r1, #5
 8001828:	4618      	mov	r0, r3
 800182a:	f001 fe93 	bl	8003554 <HAL_RCC_ClockConfig>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d001      	beq.n	8001838 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001834:	f000 f98e 	bl	8001b54 <Error_Handler>
  }
}
 8001838:	bf00      	nop
 800183a:	3750      	adds	r7, #80	; 0x50
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	40023800 	.word	0x40023800
 8001844:	40007000 	.word	0x40007000

08001848 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b084      	sub	sp, #16
 800184c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800184e:	463b      	mov	r3, r7
 8001850:	2200      	movs	r2, #0
 8001852:	601a      	str	r2, [r3, #0]
 8001854:	605a      	str	r2, [r3, #4]
 8001856:	609a      	str	r2, [r3, #8]
 8001858:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800185a:	4b21      	ldr	r3, [pc, #132]	; (80018e0 <MX_ADC1_Init+0x98>)
 800185c:	4a21      	ldr	r2, [pc, #132]	; (80018e4 <MX_ADC1_Init+0x9c>)
 800185e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001860:	4b1f      	ldr	r3, [pc, #124]	; (80018e0 <MX_ADC1_Init+0x98>)
 8001862:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001866:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001868:	4b1d      	ldr	r3, [pc, #116]	; (80018e0 <MX_ADC1_Init+0x98>)
 800186a:	2200      	movs	r2, #0
 800186c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800186e:	4b1c      	ldr	r3, [pc, #112]	; (80018e0 <MX_ADC1_Init+0x98>)
 8001870:	2200      	movs	r2, #0
 8001872:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001874:	4b1a      	ldr	r3, [pc, #104]	; (80018e0 <MX_ADC1_Init+0x98>)
 8001876:	2201      	movs	r2, #1
 8001878:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800187a:	4b19      	ldr	r3, [pc, #100]	; (80018e0 <MX_ADC1_Init+0x98>)
 800187c:	2200      	movs	r2, #0
 800187e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001882:	4b17      	ldr	r3, [pc, #92]	; (80018e0 <MX_ADC1_Init+0x98>)
 8001884:	2200      	movs	r2, #0
 8001886:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001888:	4b15      	ldr	r3, [pc, #84]	; (80018e0 <MX_ADC1_Init+0x98>)
 800188a:	4a17      	ldr	r2, [pc, #92]	; (80018e8 <MX_ADC1_Init+0xa0>)
 800188c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800188e:	4b14      	ldr	r3, [pc, #80]	; (80018e0 <MX_ADC1_Init+0x98>)
 8001890:	2200      	movs	r2, #0
 8001892:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001894:	4b12      	ldr	r3, [pc, #72]	; (80018e0 <MX_ADC1_Init+0x98>)
 8001896:	2201      	movs	r2, #1
 8001898:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800189a:	4b11      	ldr	r3, [pc, #68]	; (80018e0 <MX_ADC1_Init+0x98>)
 800189c:	2200      	movs	r2, #0
 800189e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80018a2:	4b0f      	ldr	r3, [pc, #60]	; (80018e0 <MX_ADC1_Init+0x98>)
 80018a4:	2201      	movs	r2, #1
 80018a6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80018a8:	480d      	ldr	r0, [pc, #52]	; (80018e0 <MX_ADC1_Init+0x98>)
 80018aa:	f000 fcfb 	bl	80022a4 <HAL_ADC_Init>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80018b4:	f000 f94e 	bl	8001b54 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80018b8:	230f      	movs	r3, #15
 80018ba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80018bc:	2301      	movs	r3, #1
 80018be:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80018c0:	2300      	movs	r3, #0
 80018c2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018c4:	463b      	mov	r3, r7
 80018c6:	4619      	mov	r1, r3
 80018c8:	4805      	ldr	r0, [pc, #20]	; (80018e0 <MX_ADC1_Init+0x98>)
 80018ca:	f000 fecd 	bl	8002668 <HAL_ADC_ConfigChannel>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d001      	beq.n	80018d8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80018d4:	f000 f93e 	bl	8001b54 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80018d8:	bf00      	nop
 80018da:	3710      	adds	r7, #16
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	200000d0 	.word	0x200000d0
 80018e4:	40012000 	.word	0x40012000
 80018e8:	0f000001 	.word	0x0f000001

080018ec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b086      	sub	sp, #24
 80018f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018f2:	f107 0308 	add.w	r3, r7, #8
 80018f6:	2200      	movs	r2, #0
 80018f8:	601a      	str	r2, [r3, #0]
 80018fa:	605a      	str	r2, [r3, #4]
 80018fc:	609a      	str	r2, [r3, #8]
 80018fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001900:	463b      	mov	r3, r7
 8001902:	2200      	movs	r2, #0
 8001904:	601a      	str	r2, [r3, #0]
 8001906:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001908:	4b1d      	ldr	r3, [pc, #116]	; (8001980 <MX_TIM2_Init+0x94>)
 800190a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800190e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8001910:	4b1b      	ldr	r3, [pc, #108]	; (8001980 <MX_TIM2_Init+0x94>)
 8001912:	2253      	movs	r2, #83	; 0x53
 8001914:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001916:	4b1a      	ldr	r3, [pc, #104]	; (8001980 <MX_TIM2_Init+0x94>)
 8001918:	2200      	movs	r2, #0
 800191a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 800191c:	4b18      	ldr	r3, [pc, #96]	; (8001980 <MX_TIM2_Init+0x94>)
 800191e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001922:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001924:	4b16      	ldr	r3, [pc, #88]	; (8001980 <MX_TIM2_Init+0x94>)
 8001926:	2200      	movs	r2, #0
 8001928:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800192a:	4b15      	ldr	r3, [pc, #84]	; (8001980 <MX_TIM2_Init+0x94>)
 800192c:	2280      	movs	r2, #128	; 0x80
 800192e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001930:	4813      	ldr	r0, [pc, #76]	; (8001980 <MX_TIM2_Init+0x94>)
 8001932:	f002 f82f 	bl	8003994 <HAL_TIM_Base_Init>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800193c:	f000 f90a 	bl	8001b54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001940:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001944:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001946:	f107 0308 	add.w	r3, r7, #8
 800194a:	4619      	mov	r1, r3
 800194c:	480c      	ldr	r0, [pc, #48]	; (8001980 <MX_TIM2_Init+0x94>)
 800194e:	f002 f9e9 	bl	8003d24 <HAL_TIM_ConfigClockSource>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d001      	beq.n	800195c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001958:	f000 f8fc 	bl	8001b54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800195c:	2300      	movs	r3, #0
 800195e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001960:	2300      	movs	r3, #0
 8001962:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001964:	463b      	mov	r3, r7
 8001966:	4619      	mov	r1, r3
 8001968:	4805      	ldr	r0, [pc, #20]	; (8001980 <MX_TIM2_Init+0x94>)
 800196a:	f002 fc0f 	bl	800418c <HAL_TIMEx_MasterConfigSynchronization>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d001      	beq.n	8001978 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001974:	f000 f8ee 	bl	8001b54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001978:	bf00      	nop
 800197a:	3718      	adds	r7, #24
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	20000118 	.word	0x20000118

08001984 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001988:	4b11      	ldr	r3, [pc, #68]	; (80019d0 <MX_UART5_Init+0x4c>)
 800198a:	4a12      	ldr	r2, [pc, #72]	; (80019d4 <MX_UART5_Init+0x50>)
 800198c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800198e:	4b10      	ldr	r3, [pc, #64]	; (80019d0 <MX_UART5_Init+0x4c>)
 8001990:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001994:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001996:	4b0e      	ldr	r3, [pc, #56]	; (80019d0 <MX_UART5_Init+0x4c>)
 8001998:	2200      	movs	r2, #0
 800199a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800199c:	4b0c      	ldr	r3, [pc, #48]	; (80019d0 <MX_UART5_Init+0x4c>)
 800199e:	2200      	movs	r2, #0
 80019a0:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80019a2:	4b0b      	ldr	r3, [pc, #44]	; (80019d0 <MX_UART5_Init+0x4c>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80019a8:	4b09      	ldr	r3, [pc, #36]	; (80019d0 <MX_UART5_Init+0x4c>)
 80019aa:	220c      	movs	r2, #12
 80019ac:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019ae:	4b08      	ldr	r3, [pc, #32]	; (80019d0 <MX_UART5_Init+0x4c>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80019b4:	4b06      	ldr	r3, [pc, #24]	; (80019d0 <MX_UART5_Init+0x4c>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80019ba:	4805      	ldr	r0, [pc, #20]	; (80019d0 <MX_UART5_Init+0x4c>)
 80019bc:	f002 fc76 	bl	80042ac <HAL_UART_Init>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <MX_UART5_Init+0x46>
  {
    Error_Handler();
 80019c6:	f000 f8c5 	bl	8001b54 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80019ca:	bf00      	nop
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	20000160 	.word	0x20000160
 80019d4:	40005000 	.word	0x40005000

080019d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b08a      	sub	sp, #40	; 0x28
 80019dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019de:	f107 0314 	add.w	r3, r7, #20
 80019e2:	2200      	movs	r2, #0
 80019e4:	601a      	str	r2, [r3, #0]
 80019e6:	605a      	str	r2, [r3, #4]
 80019e8:	609a      	str	r2, [r3, #8]
 80019ea:	60da      	str	r2, [r3, #12]
 80019ec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019ee:	2300      	movs	r3, #0
 80019f0:	613b      	str	r3, [r7, #16]
 80019f2:	4b53      	ldr	r3, [pc, #332]	; (8001b40 <MX_GPIO_Init+0x168>)
 80019f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f6:	4a52      	ldr	r2, [pc, #328]	; (8001b40 <MX_GPIO_Init+0x168>)
 80019f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019fc:	6313      	str	r3, [r2, #48]	; 0x30
 80019fe:	4b50      	ldr	r3, [pc, #320]	; (8001b40 <MX_GPIO_Init+0x168>)
 8001a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a06:	613b      	str	r3, [r7, #16]
 8001a08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	60fb      	str	r3, [r7, #12]
 8001a0e:	4b4c      	ldr	r3, [pc, #304]	; (8001b40 <MX_GPIO_Init+0x168>)
 8001a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a12:	4a4b      	ldr	r2, [pc, #300]	; (8001b40 <MX_GPIO_Init+0x168>)
 8001a14:	f043 0301 	orr.w	r3, r3, #1
 8001a18:	6313      	str	r3, [r2, #48]	; 0x30
 8001a1a:	4b49      	ldr	r3, [pc, #292]	; (8001b40 <MX_GPIO_Init+0x168>)
 8001a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1e:	f003 0301 	and.w	r3, r3, #1
 8001a22:	60fb      	str	r3, [r7, #12]
 8001a24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a26:	2300      	movs	r3, #0
 8001a28:	60bb      	str	r3, [r7, #8]
 8001a2a:	4b45      	ldr	r3, [pc, #276]	; (8001b40 <MX_GPIO_Init+0x168>)
 8001a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2e:	4a44      	ldr	r2, [pc, #272]	; (8001b40 <MX_GPIO_Init+0x168>)
 8001a30:	f043 0304 	orr.w	r3, r3, #4
 8001a34:	6313      	str	r3, [r2, #48]	; 0x30
 8001a36:	4b42      	ldr	r3, [pc, #264]	; (8001b40 <MX_GPIO_Init+0x168>)
 8001a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3a:	f003 0304 	and.w	r3, r3, #4
 8001a3e:	60bb      	str	r3, [r7, #8]
 8001a40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a42:	2300      	movs	r3, #0
 8001a44:	607b      	str	r3, [r7, #4]
 8001a46:	4b3e      	ldr	r3, [pc, #248]	; (8001b40 <MX_GPIO_Init+0x168>)
 8001a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4a:	4a3d      	ldr	r2, [pc, #244]	; (8001b40 <MX_GPIO_Init+0x168>)
 8001a4c:	f043 0302 	orr.w	r3, r3, #2
 8001a50:	6313      	str	r3, [r2, #48]	; 0x30
 8001a52:	4b3b      	ldr	r3, [pc, #236]	; (8001b40 <MX_GPIO_Init+0x168>)
 8001a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a56:	f003 0302 	and.w	r3, r3, #2
 8001a5a:	607b      	str	r3, [r7, #4]
 8001a5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a5e:	2300      	movs	r3, #0
 8001a60:	603b      	str	r3, [r7, #0]
 8001a62:	4b37      	ldr	r3, [pc, #220]	; (8001b40 <MX_GPIO_Init+0x168>)
 8001a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a66:	4a36      	ldr	r2, [pc, #216]	; (8001b40 <MX_GPIO_Init+0x168>)
 8001a68:	f043 0308 	orr.w	r3, r3, #8
 8001a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a6e:	4b34      	ldr	r3, [pc, #208]	; (8001b40 <MX_GPIO_Init+0x168>)
 8001a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a72:	f003 0308 	and.w	r3, r3, #8
 8001a76:	603b      	str	r3, [r7, #0]
 8001a78:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	2104      	movs	r1, #4
 8001a7e:	4831      	ldr	r0, [pc, #196]	; (8001b44 <MX_GPIO_Init+0x16c>)
 8001a80:	f001 fad6 	bl	8003030 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin, GPIO_PIN_RESET);
 8001a84:	2200      	movs	r2, #0
 8001a86:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001a8a:	482f      	ldr	r0, [pc, #188]	; (8001b48 <MX_GPIO_Init+0x170>)
 8001a8c:	f001 fad0 	bl	8003030 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8001a90:	2200      	movs	r2, #0
 8001a92:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8001a96:	482d      	ldr	r0, [pc, #180]	; (8001b4c <MX_GPIO_Init+0x174>)
 8001a98:	f001 faca 	bl	8003030 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8001aa2:	482b      	ldr	r0, [pc, #172]	; (8001b50 <MX_GPIO_Init+0x178>)
 8001aa4:	f001 fac4 	bl	8003030 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001aa8:	230c      	movs	r3, #12
 8001aaa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001aac:	2300      	movs	r3, #0
 8001aae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ab4:	f107 0314 	add.w	r3, r7, #20
 8001ab8:	4619      	mov	r1, r3
 8001aba:	4825      	ldr	r0, [pc, #148]	; (8001b50 <MX_GPIO_Init+0x178>)
 8001abc:	f001 f904 	bl	8002cc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001ac0:	2304      	movs	r3, #4
 8001ac2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001acc:	2300      	movs	r3, #0
 8001ace:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ad0:	f107 0314 	add.w	r3, r7, #20
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	481b      	ldr	r0, [pc, #108]	; (8001b44 <MX_GPIO_Init+0x16c>)
 8001ad8:	f001 f8f6 	bl	8002cc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin LED4_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin;
 8001adc:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001ae0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aea:	2300      	movs	r3, #0
 8001aec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001aee:	f107 0314 	add.w	r3, r7, #20
 8001af2:	4619      	mov	r1, r3
 8001af4:	4814      	ldr	r0, [pc, #80]	; (8001b48 <MX_GPIO_Init+0x170>)
 8001af6:	f001 f8e7 	bl	8002cc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001afa:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001afe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b00:	2301      	movs	r3, #1
 8001b02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b04:	2300      	movs	r3, #0
 8001b06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b0c:	f107 0314 	add.w	r3, r7, #20
 8001b10:	4619      	mov	r1, r3
 8001b12:	480e      	ldr	r0, [pc, #56]	; (8001b4c <MX_GPIO_Init+0x174>)
 8001b14:	f001 f8d8 	bl	8002cc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001b18:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001b1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b22:	2300      	movs	r3, #0
 8001b24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b26:	2300      	movs	r3, #0
 8001b28:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b2a:	f107 0314 	add.w	r3, r7, #20
 8001b2e:	4619      	mov	r1, r3
 8001b30:	4807      	ldr	r0, [pc, #28]	; (8001b50 <MX_GPIO_Init+0x178>)
 8001b32:	f001 f8c9 	bl	8002cc8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b36:	bf00      	nop
 8001b38:	3728      	adds	r7, #40	; 0x28
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	40023800 	.word	0x40023800
 8001b44:	40020400 	.word	0x40020400
 8001b48:	40020c00 	.word	0x40020c00
 8001b4c:	40020800 	.word	0x40020800
 8001b50:	40020000 	.word	0x40020000

08001b54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b58:	b672      	cpsid	i
}
 8001b5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b5c:	e7fe      	b.n	8001b5c <Error_Handler+0x8>
	...

08001b60 <ledHandle>:
led_t led_3 = {0, 0, 0.0, 1000};
led_t led_4 = {0, 0, 0.0, 1000};

// LED'lerin durumunu ve yanma süresini kontrol eden işlev
void ledHandle(void)
{
 8001b60:	b5b0      	push	{r4, r5, r7, lr}
 8001b62:	af00      	add	r7, sp, #0
// LED1'in yanma süresini kontrol et
	  if((time_count - led_1.count) > led_1.period/2){
 8001b64:	4bac      	ldr	r3, [pc, #688]	; (8001e18 <ledHandle+0x2b8>)
 8001b66:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001b6a:	4bac      	ldr	r3, [pc, #688]	; (8001e1c <ledHandle+0x2bc>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f7fe fcd8 	bl	8000524 <__aeabi_i2d>
 8001b74:	4602      	mov	r2, r0
 8001b76:	460b      	mov	r3, r1
 8001b78:	4620      	mov	r0, r4
 8001b7a:	4629      	mov	r1, r5
 8001b7c:	f7fe fb84 	bl	8000288 <__aeabi_dsub>
 8001b80:	4602      	mov	r2, r0
 8001b82:	460b      	mov	r3, r1
 8001b84:	4614      	mov	r4, r2
 8001b86:	461d      	mov	r5, r3
 8001b88:	4ba4      	ldr	r3, [pc, #656]	; (8001e1c <ledHandle+0x2bc>)
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	0fda      	lsrs	r2, r3, #31
 8001b8e:	4413      	add	r3, r2
 8001b90:	105b      	asrs	r3, r3, #1
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7fe fcc6 	bl	8000524 <__aeabi_i2d>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	460b      	mov	r3, r1
 8001b9c:	4620      	mov	r0, r4
 8001b9e:	4629      	mov	r1, r5
 8001ba0:	f7fe ffba 	bl	8000b18 <__aeabi_dcmpgt>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d01d      	beq.n	8001be6 <ledHandle+0x86>
			  led_1.count = time_count;
 8001baa:	4b9b      	ldr	r3, [pc, #620]	; (8001e18 <ledHandle+0x2b8>)
 8001bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bb0:	4610      	mov	r0, r2
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	f7fe ffba 	bl	8000b2c <__aeabi_d2iz>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	4a98      	ldr	r2, [pc, #608]	; (8001e1c <ledHandle+0x2bc>)
 8001bbc:	6013      	str	r3, [r2, #0]
// LED1'in durumunu değiştir (yanıp sönme)
		   if (led_1.durum == 0) {
 8001bbe:	4b97      	ldr	r3, [pc, #604]	; (8001e1c <ledHandle+0x2bc>)
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d103      	bne.n	8001bce <ledHandle+0x6e>
			   led_1.durum = 1;
 8001bc6:	4b95      	ldr	r3, [pc, #596]	; (8001e1c <ledHandle+0x2bc>)
 8001bc8:	2201      	movs	r2, #1
 8001bca:	605a      	str	r2, [r3, #4]
 8001bcc:	e002      	b.n	8001bd4 <ledHandle+0x74>
		   }
		   else {
			   led_1.durum = 0;
 8001bce:	4b93      	ldr	r3, [pc, #588]	; (8001e1c <ledHandle+0x2bc>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	605a      	str	r2, [r3, #4]
		   }
// LED1'in fiziksel durumunu güncelle
		    HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, led_1.durum);
 8001bd4:	4b91      	ldr	r3, [pc, #580]	; (8001e1c <ledHandle+0x2bc>)
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	461a      	mov	r2, r3
 8001bdc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001be0:	488f      	ldr	r0, [pc, #572]	; (8001e20 <ledHandle+0x2c0>)
 8001be2:	f001 fa25 	bl	8003030 <HAL_GPIO_WritePin>

		  }
// Aynı işlemler LED2, LED3 ve LED4 için tekrarlanır
		  if((time_count - led_2.count) > led_2.period/2){
 8001be6:	4b8c      	ldr	r3, [pc, #560]	; (8001e18 <ledHandle+0x2b8>)
 8001be8:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001bec:	4b8d      	ldr	r3, [pc, #564]	; (8001e24 <ledHandle+0x2c4>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7fe fc97 	bl	8000524 <__aeabi_i2d>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	4620      	mov	r0, r4
 8001bfc:	4629      	mov	r1, r5
 8001bfe:	f7fe fb43 	bl	8000288 <__aeabi_dsub>
 8001c02:	4602      	mov	r2, r0
 8001c04:	460b      	mov	r3, r1
 8001c06:	4614      	mov	r4, r2
 8001c08:	461d      	mov	r5, r3
 8001c0a:	4b86      	ldr	r3, [pc, #536]	; (8001e24 <ledHandle+0x2c4>)
 8001c0c:	68db      	ldr	r3, [r3, #12]
 8001c0e:	0fda      	lsrs	r2, r3, #31
 8001c10:	4413      	add	r3, r2
 8001c12:	105b      	asrs	r3, r3, #1
 8001c14:	4618      	mov	r0, r3
 8001c16:	f7fe fc85 	bl	8000524 <__aeabi_i2d>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	460b      	mov	r3, r1
 8001c1e:	4620      	mov	r0, r4
 8001c20:	4629      	mov	r1, r5
 8001c22:	f7fe ff79 	bl	8000b18 <__aeabi_dcmpgt>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d01d      	beq.n	8001c68 <ledHandle+0x108>
			  led_2.count = time_count;
 8001c2c:	4b7a      	ldr	r3, [pc, #488]	; (8001e18 <ledHandle+0x2b8>)
 8001c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c32:	4610      	mov	r0, r2
 8001c34:	4619      	mov	r1, r3
 8001c36:	f7fe ff79 	bl	8000b2c <__aeabi_d2iz>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	4a79      	ldr	r2, [pc, #484]	; (8001e24 <ledHandle+0x2c4>)
 8001c3e:	6013      	str	r3, [r2, #0]

		   if (led_2.durum == 0) {
 8001c40:	4b78      	ldr	r3, [pc, #480]	; (8001e24 <ledHandle+0x2c4>)
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d103      	bne.n	8001c50 <ledHandle+0xf0>
			   led_2.durum = 1;
 8001c48:	4b76      	ldr	r3, [pc, #472]	; (8001e24 <ledHandle+0x2c4>)
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	605a      	str	r2, [r3, #4]
 8001c4e:	e002      	b.n	8001c56 <ledHandle+0xf6>
		   }
		   else {
			   led_2.durum = 0;
 8001c50:	4b74      	ldr	r3, [pc, #464]	; (8001e24 <ledHandle+0x2c4>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	605a      	str	r2, [r3, #4]
		   }

		    HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, led_2.durum);
 8001c56:	4b73      	ldr	r3, [pc, #460]	; (8001e24 <ledHandle+0x2c4>)
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c62:	486f      	ldr	r0, [pc, #444]	; (8001e20 <ledHandle+0x2c0>)
 8001c64:	f001 f9e4 	bl	8003030 <HAL_GPIO_WritePin>

		  }

		  if((time_count - led_3.count) > led_3.period/2){
 8001c68:	4b6b      	ldr	r3, [pc, #428]	; (8001e18 <ledHandle+0x2b8>)
 8001c6a:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001c6e:	4b6e      	ldr	r3, [pc, #440]	; (8001e28 <ledHandle+0x2c8>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4618      	mov	r0, r3
 8001c74:	f7fe fc56 	bl	8000524 <__aeabi_i2d>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	460b      	mov	r3, r1
 8001c7c:	4620      	mov	r0, r4
 8001c7e:	4629      	mov	r1, r5
 8001c80:	f7fe fb02 	bl	8000288 <__aeabi_dsub>
 8001c84:	4602      	mov	r2, r0
 8001c86:	460b      	mov	r3, r1
 8001c88:	4614      	mov	r4, r2
 8001c8a:	461d      	mov	r5, r3
 8001c8c:	4b66      	ldr	r3, [pc, #408]	; (8001e28 <ledHandle+0x2c8>)
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	0fda      	lsrs	r2, r3, #31
 8001c92:	4413      	add	r3, r2
 8001c94:	105b      	asrs	r3, r3, #1
 8001c96:	4618      	mov	r0, r3
 8001c98:	f7fe fc44 	bl	8000524 <__aeabi_i2d>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	460b      	mov	r3, r1
 8001ca0:	4620      	mov	r0, r4
 8001ca2:	4629      	mov	r1, r5
 8001ca4:	f7fe ff38 	bl	8000b18 <__aeabi_dcmpgt>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d01d      	beq.n	8001cea <ledHandle+0x18a>
			  led_3.count = time_count;
 8001cae:	4b5a      	ldr	r3, [pc, #360]	; (8001e18 <ledHandle+0x2b8>)
 8001cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cb4:	4610      	mov	r0, r2
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	f7fe ff38 	bl	8000b2c <__aeabi_d2iz>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	4a5a      	ldr	r2, [pc, #360]	; (8001e28 <ledHandle+0x2c8>)
 8001cc0:	6013      	str	r3, [r2, #0]

		   if (led_3.durum == 0) {
 8001cc2:	4b59      	ldr	r3, [pc, #356]	; (8001e28 <ledHandle+0x2c8>)
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d103      	bne.n	8001cd2 <ledHandle+0x172>
			   led_3.durum = 1;
 8001cca:	4b57      	ldr	r3, [pc, #348]	; (8001e28 <ledHandle+0x2c8>)
 8001ccc:	2201      	movs	r2, #1
 8001cce:	605a      	str	r2, [r3, #4]
 8001cd0:	e002      	b.n	8001cd8 <ledHandle+0x178>
		   }
		   else {
			   led_3.durum = 0;
 8001cd2:	4b55      	ldr	r3, [pc, #340]	; (8001e28 <ledHandle+0x2c8>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	605a      	str	r2, [r3, #4]
		   }

		    HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, led_3.durum);
 8001cd8:	4b53      	ldr	r3, [pc, #332]	; (8001e28 <ledHandle+0x2c8>)
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	461a      	mov	r2, r3
 8001ce0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ce4:	484e      	ldr	r0, [pc, #312]	; (8001e20 <ledHandle+0x2c0>)
 8001ce6:	f001 f9a3 	bl	8003030 <HAL_GPIO_WritePin>

		  }

		  if((time_count - led_4.count) > led_4.period/2){
 8001cea:	4b4b      	ldr	r3, [pc, #300]	; (8001e18 <ledHandle+0x2b8>)
 8001cec:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001cf0:	4b4e      	ldr	r3, [pc, #312]	; (8001e2c <ledHandle+0x2cc>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7fe fc15 	bl	8000524 <__aeabi_i2d>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	4620      	mov	r0, r4
 8001d00:	4629      	mov	r1, r5
 8001d02:	f7fe fac1 	bl	8000288 <__aeabi_dsub>
 8001d06:	4602      	mov	r2, r0
 8001d08:	460b      	mov	r3, r1
 8001d0a:	4614      	mov	r4, r2
 8001d0c:	461d      	mov	r5, r3
 8001d0e:	4b47      	ldr	r3, [pc, #284]	; (8001e2c <ledHandle+0x2cc>)
 8001d10:	68db      	ldr	r3, [r3, #12]
 8001d12:	0fda      	lsrs	r2, r3, #31
 8001d14:	4413      	add	r3, r2
 8001d16:	105b      	asrs	r3, r3, #1
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f7fe fc03 	bl	8000524 <__aeabi_i2d>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	460b      	mov	r3, r1
 8001d22:	4620      	mov	r0, r4
 8001d24:	4629      	mov	r1, r5
 8001d26:	f7fe fef7 	bl	8000b18 <__aeabi_dcmpgt>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d01d      	beq.n	8001d6c <ledHandle+0x20c>
			  led_4.count = time_count;
 8001d30:	4b39      	ldr	r3, [pc, #228]	; (8001e18 <ledHandle+0x2b8>)
 8001d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d36:	4610      	mov	r0, r2
 8001d38:	4619      	mov	r1, r3
 8001d3a:	f7fe fef7 	bl	8000b2c <__aeabi_d2iz>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	4a3a      	ldr	r2, [pc, #232]	; (8001e2c <ledHandle+0x2cc>)
 8001d42:	6013      	str	r3, [r2, #0]

		   if (led_4.durum == 0) {
 8001d44:	4b39      	ldr	r3, [pc, #228]	; (8001e2c <ledHandle+0x2cc>)
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d103      	bne.n	8001d54 <ledHandle+0x1f4>
			   led_4.durum = 1;
 8001d4c:	4b37      	ldr	r3, [pc, #220]	; (8001e2c <ledHandle+0x2cc>)
 8001d4e:	2201      	movs	r2, #1
 8001d50:	605a      	str	r2, [r3, #4]
 8001d52:	e002      	b.n	8001d5a <ledHandle+0x1fa>
		   }
		   else {
			   led_4.durum = 0;
 8001d54:	4b35      	ldr	r3, [pc, #212]	; (8001e2c <ledHandle+0x2cc>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	605a      	str	r2, [r3, #4]
		   }

		    HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, led_4.durum);
 8001d5a:	4b34      	ldr	r3, [pc, #208]	; (8001e2c <ledHandle+0x2cc>)
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	461a      	mov	r2, r3
 8001d62:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d66:	482e      	ldr	r0, [pc, #184]	; (8001e20 <ledHandle+0x2c0>)
 8001d68:	f001 f962 	bl	8003030 <HAL_GPIO_WritePin>
		  }
// LED'lerin frekansını güncelle
		  led_1.frequency = 1.0/led_1.period;
 8001d6c:	4b2b      	ldr	r3, [pc, #172]	; (8001e1c <ledHandle+0x2bc>)
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7fe fbd7 	bl	8000524 <__aeabi_i2d>
 8001d76:	4602      	mov	r2, r0
 8001d78:	460b      	mov	r3, r1
 8001d7a:	f04f 0000 	mov.w	r0, #0
 8001d7e:	492c      	ldr	r1, [pc, #176]	; (8001e30 <ledHandle+0x2d0>)
 8001d80:	f7fe fd64 	bl	800084c <__aeabi_ddiv>
 8001d84:	4602      	mov	r2, r0
 8001d86:	460b      	mov	r3, r1
 8001d88:	4610      	mov	r0, r2
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	f7fe ff16 	bl	8000bbc <__aeabi_d2f>
 8001d90:	4603      	mov	r3, r0
 8001d92:	4a22      	ldr	r2, [pc, #136]	; (8001e1c <ledHandle+0x2bc>)
 8001d94:	6093      	str	r3, [r2, #8]
		  led_2.frequency = 1.0/led_2.period;
 8001d96:	4b23      	ldr	r3, [pc, #140]	; (8001e24 <ledHandle+0x2c4>)
 8001d98:	68db      	ldr	r3, [r3, #12]
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7fe fbc2 	bl	8000524 <__aeabi_i2d>
 8001da0:	4602      	mov	r2, r0
 8001da2:	460b      	mov	r3, r1
 8001da4:	f04f 0000 	mov.w	r0, #0
 8001da8:	4921      	ldr	r1, [pc, #132]	; (8001e30 <ledHandle+0x2d0>)
 8001daa:	f7fe fd4f 	bl	800084c <__aeabi_ddiv>
 8001dae:	4602      	mov	r2, r0
 8001db0:	460b      	mov	r3, r1
 8001db2:	4610      	mov	r0, r2
 8001db4:	4619      	mov	r1, r3
 8001db6:	f7fe ff01 	bl	8000bbc <__aeabi_d2f>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	4a19      	ldr	r2, [pc, #100]	; (8001e24 <ledHandle+0x2c4>)
 8001dbe:	6093      	str	r3, [r2, #8]
		  led_3.frequency = 1.0/led_3.period;
 8001dc0:	4b19      	ldr	r3, [pc, #100]	; (8001e28 <ledHandle+0x2c8>)
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7fe fbad 	bl	8000524 <__aeabi_i2d>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	460b      	mov	r3, r1
 8001dce:	f04f 0000 	mov.w	r0, #0
 8001dd2:	4917      	ldr	r1, [pc, #92]	; (8001e30 <ledHandle+0x2d0>)
 8001dd4:	f7fe fd3a 	bl	800084c <__aeabi_ddiv>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	460b      	mov	r3, r1
 8001ddc:	4610      	mov	r0, r2
 8001dde:	4619      	mov	r1, r3
 8001de0:	f7fe feec 	bl	8000bbc <__aeabi_d2f>
 8001de4:	4603      	mov	r3, r0
 8001de6:	4a10      	ldr	r2, [pc, #64]	; (8001e28 <ledHandle+0x2c8>)
 8001de8:	6093      	str	r3, [r2, #8]
		  led_4.frequency = 1.0/led_4.period;
 8001dea:	4b10      	ldr	r3, [pc, #64]	; (8001e2c <ledHandle+0x2cc>)
 8001dec:	68db      	ldr	r3, [r3, #12]
 8001dee:	4618      	mov	r0, r3
 8001df0:	f7fe fb98 	bl	8000524 <__aeabi_i2d>
 8001df4:	4602      	mov	r2, r0
 8001df6:	460b      	mov	r3, r1
 8001df8:	f04f 0000 	mov.w	r0, #0
 8001dfc:	490c      	ldr	r1, [pc, #48]	; (8001e30 <ledHandle+0x2d0>)
 8001dfe:	f7fe fd25 	bl	800084c <__aeabi_ddiv>
 8001e02:	4602      	mov	r2, r0
 8001e04:	460b      	mov	r3, r1
 8001e06:	4610      	mov	r0, r2
 8001e08:	4619      	mov	r1, r3
 8001e0a:	f7fe fed7 	bl	8000bbc <__aeabi_d2f>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	4a06      	ldr	r2, [pc, #24]	; (8001e2c <ledHandle+0x2cc>)
 8001e12:	6093      	str	r3, [r2, #8]
}
 8001e14:	bf00      	nop
 8001e16:	bdb0      	pop	{r4, r5, r7, pc}
 8001e18:	200001a8 	.word	0x200001a8
 8001e1c:	20000000 	.word	0x20000000
 8001e20:	40020c00 	.word	0x40020c00
 8001e24:	20000010 	.word	0x20000010
 8001e28:	20000020 	.word	0x20000020
 8001e2c:	20000030 	.word	0x20000030
 8001e30:	3ff00000 	.word	0x3ff00000

08001e34 <setLedPeriyot>:
// LED'nin yanma süresini ayarlayan işlev
void setLedPeriyot(led_t *led, int pri)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	6039      	str	r1, [r7, #0]
    led->period = pri;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	683a      	ldr	r2, [r7, #0]
 8001e42:	60da      	str	r2, [r3, #12]
}
 8001e44:	bf00      	nop
 8001e46:	370c      	adds	r7, #12
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr

08001e50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e56:	2300      	movs	r3, #0
 8001e58:	607b      	str	r3, [r7, #4]
 8001e5a:	4b10      	ldr	r3, [pc, #64]	; (8001e9c <HAL_MspInit+0x4c>)
 8001e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e5e:	4a0f      	ldr	r2, [pc, #60]	; (8001e9c <HAL_MspInit+0x4c>)
 8001e60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e64:	6453      	str	r3, [r2, #68]	; 0x44
 8001e66:	4b0d      	ldr	r3, [pc, #52]	; (8001e9c <HAL_MspInit+0x4c>)
 8001e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e6e:	607b      	str	r3, [r7, #4]
 8001e70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e72:	2300      	movs	r3, #0
 8001e74:	603b      	str	r3, [r7, #0]
 8001e76:	4b09      	ldr	r3, [pc, #36]	; (8001e9c <HAL_MspInit+0x4c>)
 8001e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7a:	4a08      	ldr	r2, [pc, #32]	; (8001e9c <HAL_MspInit+0x4c>)
 8001e7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e80:	6413      	str	r3, [r2, #64]	; 0x40
 8001e82:	4b06      	ldr	r3, [pc, #24]	; (8001e9c <HAL_MspInit+0x4c>)
 8001e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e8a:	603b      	str	r3, [r7, #0]
 8001e8c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001e8e:	2007      	movs	r0, #7
 8001e90:	f000 fed8 	bl	8002c44 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e94:	bf00      	nop
 8001e96:	3708      	adds	r7, #8
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	40023800 	.word	0x40023800

08001ea0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b08a      	sub	sp, #40	; 0x28
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ea8:	f107 0314 	add.w	r3, r7, #20
 8001eac:	2200      	movs	r2, #0
 8001eae:	601a      	str	r2, [r3, #0]
 8001eb0:	605a      	str	r2, [r3, #4]
 8001eb2:	609a      	str	r2, [r3, #8]
 8001eb4:	60da      	str	r2, [r3, #12]
 8001eb6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a17      	ldr	r2, [pc, #92]	; (8001f1c <HAL_ADC_MspInit+0x7c>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d127      	bne.n	8001f12 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	613b      	str	r3, [r7, #16]
 8001ec6:	4b16      	ldr	r3, [pc, #88]	; (8001f20 <HAL_ADC_MspInit+0x80>)
 8001ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eca:	4a15      	ldr	r2, [pc, #84]	; (8001f20 <HAL_ADC_MspInit+0x80>)
 8001ecc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ed0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ed2:	4b13      	ldr	r3, [pc, #76]	; (8001f20 <HAL_ADC_MspInit+0x80>)
 8001ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eda:	613b      	str	r3, [r7, #16]
 8001edc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ede:	2300      	movs	r3, #0
 8001ee0:	60fb      	str	r3, [r7, #12]
 8001ee2:	4b0f      	ldr	r3, [pc, #60]	; (8001f20 <HAL_ADC_MspInit+0x80>)
 8001ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee6:	4a0e      	ldr	r2, [pc, #56]	; (8001f20 <HAL_ADC_MspInit+0x80>)
 8001ee8:	f043 0304 	orr.w	r3, r3, #4
 8001eec:	6313      	str	r3, [r2, #48]	; 0x30
 8001eee:	4b0c      	ldr	r3, [pc, #48]	; (8001f20 <HAL_ADC_MspInit+0x80>)
 8001ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef2:	f003 0304 	and.w	r3, r3, #4
 8001ef6:	60fb      	str	r3, [r7, #12]
 8001ef8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001efa:	2320      	movs	r3, #32
 8001efc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001efe:	2303      	movs	r3, #3
 8001f00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f02:	2300      	movs	r3, #0
 8001f04:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f06:	f107 0314 	add.w	r3, r7, #20
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	4805      	ldr	r0, [pc, #20]	; (8001f24 <HAL_ADC_MspInit+0x84>)
 8001f0e:	f000 fedb 	bl	8002cc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001f12:	bf00      	nop
 8001f14:	3728      	adds	r7, #40	; 0x28
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	40012000 	.word	0x40012000
 8001f20:	40023800 	.word	0x40023800
 8001f24:	40020800 	.word	0x40020800

08001f28 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b084      	sub	sp, #16
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f38:	d115      	bne.n	8001f66 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	60fb      	str	r3, [r7, #12]
 8001f3e:	4b0c      	ldr	r3, [pc, #48]	; (8001f70 <HAL_TIM_Base_MspInit+0x48>)
 8001f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f42:	4a0b      	ldr	r2, [pc, #44]	; (8001f70 <HAL_TIM_Base_MspInit+0x48>)
 8001f44:	f043 0301 	orr.w	r3, r3, #1
 8001f48:	6413      	str	r3, [r2, #64]	; 0x40
 8001f4a:	4b09      	ldr	r3, [pc, #36]	; (8001f70 <HAL_TIM_Base_MspInit+0x48>)
 8001f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4e:	f003 0301 	and.w	r3, r3, #1
 8001f52:	60fb      	str	r3, [r7, #12]
 8001f54:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001f56:	2200      	movs	r2, #0
 8001f58:	2100      	movs	r1, #0
 8001f5a:	201c      	movs	r0, #28
 8001f5c:	f000 fe7d 	bl	8002c5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001f60:	201c      	movs	r0, #28
 8001f62:	f000 fe96 	bl	8002c92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001f66:	bf00      	nop
 8001f68:	3710      	adds	r7, #16
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	40023800 	.word	0x40023800

08001f74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b08a      	sub	sp, #40	; 0x28
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f7c:	f107 0314 	add.w	r3, r7, #20
 8001f80:	2200      	movs	r2, #0
 8001f82:	601a      	str	r2, [r3, #0]
 8001f84:	605a      	str	r2, [r3, #4]
 8001f86:	609a      	str	r2, [r3, #8]
 8001f88:	60da      	str	r2, [r3, #12]
 8001f8a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a28      	ldr	r2, [pc, #160]	; (8002034 <HAL_UART_MspInit+0xc0>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d14a      	bne.n	800202c <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001f96:	2300      	movs	r3, #0
 8001f98:	613b      	str	r3, [r7, #16]
 8001f9a:	4b27      	ldr	r3, [pc, #156]	; (8002038 <HAL_UART_MspInit+0xc4>)
 8001f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9e:	4a26      	ldr	r2, [pc, #152]	; (8002038 <HAL_UART_MspInit+0xc4>)
 8001fa0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001fa4:	6413      	str	r3, [r2, #64]	; 0x40
 8001fa6:	4b24      	ldr	r3, [pc, #144]	; (8002038 <HAL_UART_MspInit+0xc4>)
 8001fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001faa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fae:	613b      	str	r3, [r7, #16]
 8001fb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	60fb      	str	r3, [r7, #12]
 8001fb6:	4b20      	ldr	r3, [pc, #128]	; (8002038 <HAL_UART_MspInit+0xc4>)
 8001fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fba:	4a1f      	ldr	r2, [pc, #124]	; (8002038 <HAL_UART_MspInit+0xc4>)
 8001fbc:	f043 0304 	orr.w	r3, r3, #4
 8001fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fc2:	4b1d      	ldr	r3, [pc, #116]	; (8002038 <HAL_UART_MspInit+0xc4>)
 8001fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc6:	f003 0304 	and.w	r3, r3, #4
 8001fca:	60fb      	str	r3, [r7, #12]
 8001fcc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fce:	2300      	movs	r3, #0
 8001fd0:	60bb      	str	r3, [r7, #8]
 8001fd2:	4b19      	ldr	r3, [pc, #100]	; (8002038 <HAL_UART_MspInit+0xc4>)
 8001fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd6:	4a18      	ldr	r2, [pc, #96]	; (8002038 <HAL_UART_MspInit+0xc4>)
 8001fd8:	f043 0308 	orr.w	r3, r3, #8
 8001fdc:	6313      	str	r3, [r2, #48]	; 0x30
 8001fde:	4b16      	ldr	r3, [pc, #88]	; (8002038 <HAL_UART_MspInit+0xc4>)
 8001fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe2:	f003 0308 	and.w	r3, r3, #8
 8001fe6:	60bb      	str	r3, [r7, #8]
 8001fe8:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001fea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff0:	2302      	movs	r3, #2
 8001ff2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ff8:	2303      	movs	r3, #3
 8001ffa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001ffc:	2308      	movs	r3, #8
 8001ffe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002000:	f107 0314 	add.w	r3, r7, #20
 8002004:	4619      	mov	r1, r3
 8002006:	480d      	ldr	r0, [pc, #52]	; (800203c <HAL_UART_MspInit+0xc8>)
 8002008:	f000 fe5e 	bl	8002cc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800200c:	2304      	movs	r3, #4
 800200e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002010:	2302      	movs	r3, #2
 8002012:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002014:	2300      	movs	r3, #0
 8002016:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002018:	2303      	movs	r3, #3
 800201a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800201c:	2308      	movs	r3, #8
 800201e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002020:	f107 0314 	add.w	r3, r7, #20
 8002024:	4619      	mov	r1, r3
 8002026:	4806      	ldr	r0, [pc, #24]	; (8002040 <HAL_UART_MspInit+0xcc>)
 8002028:	f000 fe4e 	bl	8002cc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 800202c:	bf00      	nop
 800202e:	3728      	adds	r7, #40	; 0x28
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	40005000 	.word	0x40005000
 8002038:	40023800 	.word	0x40023800
 800203c:	40020800 	.word	0x40020800
 8002040:	40020c00 	.word	0x40020c00

08002044 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002048:	e7fe      	b.n	8002048 <NMI_Handler+0x4>

0800204a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800204a:	b480      	push	{r7}
 800204c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800204e:	e7fe      	b.n	800204e <HardFault_Handler+0x4>

08002050 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002054:	e7fe      	b.n	8002054 <MemManage_Handler+0x4>

08002056 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002056:	b480      	push	{r7}
 8002058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800205a:	e7fe      	b.n	800205a <BusFault_Handler+0x4>

0800205c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002060:	e7fe      	b.n	8002060 <UsageFault_Handler+0x4>

08002062 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002062:	b480      	push	{r7}
 8002064:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002066:	bf00      	nop
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr

08002070 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002074:	bf00      	nop
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr

0800207e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800207e:	b480      	push	{r7}
 8002080:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002082:	bf00      	nop
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr

0800208c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002090:	f000 f8e8 	bl	8002264 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  testcount++;
 8002094:	4b03      	ldr	r3, [pc, #12]	; (80020a4 <SysTick_Handler+0x18>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	3301      	adds	r3, #1
 800209a:	4a02      	ldr	r2, [pc, #8]	; (80020a4 <SysTick_Handler+0x18>)
 800209c:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 1 */
}
 800209e:	bf00      	nop
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	20000210 	.word	0x20000210

080020a8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	time_count++;
 80020ac:	4b08      	ldr	r3, [pc, #32]	; (80020d0 <TIM2_IRQHandler+0x28>)
 80020ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80020b2:	f04f 0200 	mov.w	r2, #0
 80020b6:	4b07      	ldr	r3, [pc, #28]	; (80020d4 <TIM2_IRQHandler+0x2c>)
 80020b8:	f7fe f8e8 	bl	800028c <__adddf3>
 80020bc:	4602      	mov	r2, r0
 80020be:	460b      	mov	r3, r1
 80020c0:	4903      	ldr	r1, [pc, #12]	; (80020d0 <TIM2_IRQHandler+0x28>)
 80020c2:	e9c1 2300 	strd	r2, r3, [r1]
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80020c6:	4804      	ldr	r0, [pc, #16]	; (80020d8 <TIM2_IRQHandler+0x30>)
 80020c8:	f001 fd24 	bl	8003b14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  /* USER CODE END TIM2_IRQn 1 */
}
 80020cc:	bf00      	nop
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	200001a8 	.word	0x200001a8
 80020d4:	3ff00000 	.word	0x3ff00000
 80020d8:	20000118 	.word	0x20000118

080020dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b086      	sub	sp, #24
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020e4:	4a14      	ldr	r2, [pc, #80]	; (8002138 <_sbrk+0x5c>)
 80020e6:	4b15      	ldr	r3, [pc, #84]	; (800213c <_sbrk+0x60>)
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020f0:	4b13      	ldr	r3, [pc, #76]	; (8002140 <_sbrk+0x64>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d102      	bne.n	80020fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020f8:	4b11      	ldr	r3, [pc, #68]	; (8002140 <_sbrk+0x64>)
 80020fa:	4a12      	ldr	r2, [pc, #72]	; (8002144 <_sbrk+0x68>)
 80020fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020fe:	4b10      	ldr	r3, [pc, #64]	; (8002140 <_sbrk+0x64>)
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4413      	add	r3, r2
 8002106:	693a      	ldr	r2, [r7, #16]
 8002108:	429a      	cmp	r2, r3
 800210a:	d207      	bcs.n	800211c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800210c:	f002 fcb8 	bl	8004a80 <__errno>
 8002110:	4603      	mov	r3, r0
 8002112:	220c      	movs	r2, #12
 8002114:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002116:	f04f 33ff 	mov.w	r3, #4294967295
 800211a:	e009      	b.n	8002130 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800211c:	4b08      	ldr	r3, [pc, #32]	; (8002140 <_sbrk+0x64>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002122:	4b07      	ldr	r3, [pc, #28]	; (8002140 <_sbrk+0x64>)
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4413      	add	r3, r2
 800212a:	4a05      	ldr	r2, [pc, #20]	; (8002140 <_sbrk+0x64>)
 800212c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800212e:	68fb      	ldr	r3, [r7, #12]
}
 8002130:	4618      	mov	r0, r3
 8002132:	3718      	adds	r7, #24
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	20020000 	.word	0x20020000
 800213c:	00000400 	.word	0x00000400
 8002140:	20000214 	.word	0x20000214
 8002144:	20000368 	.word	0x20000368

08002148 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002148:	b480      	push	{r7}
 800214a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800214c:	4b06      	ldr	r3, [pc, #24]	; (8002168 <SystemInit+0x20>)
 800214e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002152:	4a05      	ldr	r2, [pc, #20]	; (8002168 <SystemInit+0x20>)
 8002154:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002158:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800215c:	bf00      	nop
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop
 8002168:	e000ed00 	.word	0xe000ed00

0800216c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800216c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021a4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002170:	480d      	ldr	r0, [pc, #52]	; (80021a8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002172:	490e      	ldr	r1, [pc, #56]	; (80021ac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002174:	4a0e      	ldr	r2, [pc, #56]	; (80021b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002176:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002178:	e002      	b.n	8002180 <LoopCopyDataInit>

0800217a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800217a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800217c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800217e:	3304      	adds	r3, #4

08002180 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002180:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002182:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002184:	d3f9      	bcc.n	800217a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002186:	4a0b      	ldr	r2, [pc, #44]	; (80021b4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002188:	4c0b      	ldr	r4, [pc, #44]	; (80021b8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800218a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800218c:	e001      	b.n	8002192 <LoopFillZerobss>

0800218e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800218e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002190:	3204      	adds	r2, #4

08002192 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002192:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002194:	d3fb      	bcc.n	800218e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002196:	f7ff ffd7 	bl	8002148 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800219a:	f002 fc77 	bl	8004a8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800219e:	f7ff f91f 	bl	80013e0 <main>
  bx  lr    
 80021a2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80021a4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80021a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021ac:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 80021b0:	08005494 	.word	0x08005494
  ldr r2, =_sbss
 80021b4:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 80021b8:	20000364 	.word	0x20000364

080021bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021bc:	e7fe      	b.n	80021bc <ADC_IRQHandler>
	...

080021c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80021c4:	4b0e      	ldr	r3, [pc, #56]	; (8002200 <HAL_Init+0x40>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a0d      	ldr	r2, [pc, #52]	; (8002200 <HAL_Init+0x40>)
 80021ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80021d0:	4b0b      	ldr	r3, [pc, #44]	; (8002200 <HAL_Init+0x40>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a0a      	ldr	r2, [pc, #40]	; (8002200 <HAL_Init+0x40>)
 80021d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021dc:	4b08      	ldr	r3, [pc, #32]	; (8002200 <HAL_Init+0x40>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a07      	ldr	r2, [pc, #28]	; (8002200 <HAL_Init+0x40>)
 80021e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021e8:	2003      	movs	r0, #3
 80021ea:	f000 fd2b 	bl	8002c44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021ee:	2000      	movs	r0, #0
 80021f0:	f000 f808 	bl	8002204 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021f4:	f7ff fe2c 	bl	8001e50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021f8:	2300      	movs	r3, #0
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	40023c00 	.word	0x40023c00

08002204 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800220c:	4b12      	ldr	r3, [pc, #72]	; (8002258 <HAL_InitTick+0x54>)
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	4b12      	ldr	r3, [pc, #72]	; (800225c <HAL_InitTick+0x58>)
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	4619      	mov	r1, r3
 8002216:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800221a:	fbb3 f3f1 	udiv	r3, r3, r1
 800221e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002222:	4618      	mov	r0, r3
 8002224:	f000 fd43 	bl	8002cae <HAL_SYSTICK_Config>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d001      	beq.n	8002232 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e00e      	b.n	8002250 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2b0f      	cmp	r3, #15
 8002236:	d80a      	bhi.n	800224e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002238:	2200      	movs	r2, #0
 800223a:	6879      	ldr	r1, [r7, #4]
 800223c:	f04f 30ff 	mov.w	r0, #4294967295
 8002240:	f000 fd0b 	bl	8002c5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002244:	4a06      	ldr	r2, [pc, #24]	; (8002260 <HAL_InitTick+0x5c>)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800224a:	2300      	movs	r3, #0
 800224c:	e000      	b.n	8002250 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
}
 8002250:	4618      	mov	r0, r3
 8002252:	3708      	adds	r7, #8
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}
 8002258:	20000040 	.word	0x20000040
 800225c:	20000048 	.word	0x20000048
 8002260:	20000044 	.word	0x20000044

08002264 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002268:	4b06      	ldr	r3, [pc, #24]	; (8002284 <HAL_IncTick+0x20>)
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	461a      	mov	r2, r3
 800226e:	4b06      	ldr	r3, [pc, #24]	; (8002288 <HAL_IncTick+0x24>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4413      	add	r3, r2
 8002274:	4a04      	ldr	r2, [pc, #16]	; (8002288 <HAL_IncTick+0x24>)
 8002276:	6013      	str	r3, [r2, #0]
}
 8002278:	bf00      	nop
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	20000048 	.word	0x20000048
 8002288:	20000218 	.word	0x20000218

0800228c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
  return uwTick;
 8002290:	4b03      	ldr	r3, [pc, #12]	; (80022a0 <HAL_GetTick+0x14>)
 8002292:	681b      	ldr	r3, [r3, #0]
}
 8002294:	4618      	mov	r0, r3
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop
 80022a0:	20000218 	.word	0x20000218

080022a4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022ac:	2300      	movs	r3, #0
 80022ae:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d101      	bne.n	80022ba <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e033      	b.n	8002322 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d109      	bne.n	80022d6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f7ff fdec 	bl	8001ea0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2200      	movs	r2, #0
 80022cc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2200      	movs	r2, #0
 80022d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022da:	f003 0310 	and.w	r3, r3, #16
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d118      	bne.n	8002314 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80022ea:	f023 0302 	bic.w	r3, r3, #2
 80022ee:	f043 0202 	orr.w	r2, r3, #2
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f000 fad8 	bl	80028ac <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2200      	movs	r2, #0
 8002300:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002306:	f023 0303 	bic.w	r3, r3, #3
 800230a:	f043 0201 	orr.w	r2, r3, #1
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	641a      	str	r2, [r3, #64]	; 0x40
 8002312:	e001      	b.n	8002318 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2200      	movs	r2, #0
 800231c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002320:	7bfb      	ldrb	r3, [r7, #15]
}
 8002322:	4618      	mov	r0, r3
 8002324:	3710      	adds	r7, #16
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
	...

0800232c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800232c:	b480      	push	{r7}
 800232e:	b085      	sub	sp, #20
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002334:	2300      	movs	r3, #0
 8002336:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800233e:	2b01      	cmp	r3, #1
 8002340:	d101      	bne.n	8002346 <HAL_ADC_Start+0x1a>
 8002342:	2302      	movs	r3, #2
 8002344:	e0b2      	b.n	80024ac <HAL_ADC_Start+0x180>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2201      	movs	r2, #1
 800234a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	f003 0301 	and.w	r3, r3, #1
 8002358:	2b01      	cmp	r3, #1
 800235a:	d018      	beq.n	800238e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	689a      	ldr	r2, [r3, #8]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f042 0201 	orr.w	r2, r2, #1
 800236a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800236c:	4b52      	ldr	r3, [pc, #328]	; (80024b8 <HAL_ADC_Start+0x18c>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a52      	ldr	r2, [pc, #328]	; (80024bc <HAL_ADC_Start+0x190>)
 8002372:	fba2 2303 	umull	r2, r3, r2, r3
 8002376:	0c9a      	lsrs	r2, r3, #18
 8002378:	4613      	mov	r3, r2
 800237a:	005b      	lsls	r3, r3, #1
 800237c:	4413      	add	r3, r2
 800237e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002380:	e002      	b.n	8002388 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	3b01      	subs	r3, #1
 8002386:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d1f9      	bne.n	8002382 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	f003 0301 	and.w	r3, r3, #1
 8002398:	2b01      	cmp	r3, #1
 800239a:	d17a      	bne.n	8002492 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80023a4:	f023 0301 	bic.w	r3, r3, #1
 80023a8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d007      	beq.n	80023ce <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80023c6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023da:	d106      	bne.n	80023ea <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023e0:	f023 0206 	bic.w	r2, r3, #6
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	645a      	str	r2, [r3, #68]	; 0x44
 80023e8:	e002      	b.n	80023f0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2200      	movs	r2, #0
 80023ee:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2200      	movs	r2, #0
 80023f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023f8:	4b31      	ldr	r3, [pc, #196]	; (80024c0 <HAL_ADC_Start+0x194>)
 80023fa:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002404:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	f003 031f 	and.w	r3, r3, #31
 800240e:	2b00      	cmp	r3, #0
 8002410:	d12a      	bne.n	8002468 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a2b      	ldr	r2, [pc, #172]	; (80024c4 <HAL_ADC_Start+0x198>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d015      	beq.n	8002448 <HAL_ADC_Start+0x11c>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a29      	ldr	r2, [pc, #164]	; (80024c8 <HAL_ADC_Start+0x19c>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d105      	bne.n	8002432 <HAL_ADC_Start+0x106>
 8002426:	4b26      	ldr	r3, [pc, #152]	; (80024c0 <HAL_ADC_Start+0x194>)
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	f003 031f 	and.w	r3, r3, #31
 800242e:	2b00      	cmp	r3, #0
 8002430:	d00a      	beq.n	8002448 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a25      	ldr	r2, [pc, #148]	; (80024cc <HAL_ADC_Start+0x1a0>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d136      	bne.n	80024aa <HAL_ADC_Start+0x17e>
 800243c:	4b20      	ldr	r3, [pc, #128]	; (80024c0 <HAL_ADC_Start+0x194>)
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f003 0310 	and.w	r3, r3, #16
 8002444:	2b00      	cmp	r3, #0
 8002446:	d130      	bne.n	80024aa <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d129      	bne.n	80024aa <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	689a      	ldr	r2, [r3, #8]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002464:	609a      	str	r2, [r3, #8]
 8002466:	e020      	b.n	80024aa <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a15      	ldr	r2, [pc, #84]	; (80024c4 <HAL_ADC_Start+0x198>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d11b      	bne.n	80024aa <HAL_ADC_Start+0x17e>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800247c:	2b00      	cmp	r3, #0
 800247e:	d114      	bne.n	80024aa <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	689a      	ldr	r2, [r3, #8]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800248e:	609a      	str	r2, [r3, #8]
 8002490:	e00b      	b.n	80024aa <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002496:	f043 0210 	orr.w	r2, r3, #16
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024a2:	f043 0201 	orr.w	r2, r3, #1
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80024aa:	2300      	movs	r3, #0
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	3714      	adds	r7, #20
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr
 80024b8:	20000040 	.word	0x20000040
 80024bc:	431bde83 	.word	0x431bde83
 80024c0:	40012300 	.word	0x40012300
 80024c4:	40012000 	.word	0x40012000
 80024c8:	40012100 	.word	0x40012100
 80024cc:	40012200 	.word	0x40012200

080024d0 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d101      	bne.n	80024e6 <HAL_ADC_Stop+0x16>
 80024e2:	2302      	movs	r3, #2
 80024e4:	e021      	b.n	800252a <HAL_ADC_Stop+0x5a>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2201      	movs	r2, #1
 80024ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	689a      	ldr	r2, [r3, #8]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f022 0201 	bic.w	r2, r2, #1
 80024fc:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	f003 0301 	and.w	r3, r3, #1
 8002508:	2b00      	cmp	r3, #0
 800250a:	d109      	bne.n	8002520 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002510:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002514:	f023 0301 	bic.w	r3, r3, #1
 8002518:	f043 0201 	orr.w	r2, r3, #1
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2200      	movs	r2, #0
 8002524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002528:	2300      	movs	r3, #0
}
 800252a:	4618      	mov	r0, r3
 800252c:	370c      	adds	r7, #12
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr

08002536 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002536:	b580      	push	{r7, lr}
 8002538:	b084      	sub	sp, #16
 800253a:	af00      	add	r7, sp, #0
 800253c:	6078      	str	r0, [r7, #4]
 800253e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002540:	2300      	movs	r3, #0
 8002542:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800254e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002552:	d113      	bne.n	800257c <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800255e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002562:	d10b      	bne.n	800257c <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002568:	f043 0220 	orr.w	r2, r3, #32
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2200      	movs	r2, #0
 8002574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e063      	b.n	8002644 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800257c:	f7ff fe86 	bl	800228c <HAL_GetTick>
 8002580:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002582:	e021      	b.n	80025c8 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	f1b3 3fff 	cmp.w	r3, #4294967295
 800258a:	d01d      	beq.n	80025c8 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d007      	beq.n	80025a2 <HAL_ADC_PollForConversion+0x6c>
 8002592:	f7ff fe7b 	bl	800228c <HAL_GetTick>
 8002596:	4602      	mov	r2, r0
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	683a      	ldr	r2, [r7, #0]
 800259e:	429a      	cmp	r2, r3
 80025a0:	d212      	bcs.n	80025c8 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 0302 	and.w	r3, r3, #2
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d00b      	beq.n	80025c8 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b4:	f043 0204 	orr.w	r2, r3, #4
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2200      	movs	r2, #0
 80025c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80025c4:	2303      	movs	r3, #3
 80025c6:	e03d      	b.n	8002644 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0302 	and.w	r3, r3, #2
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d1d6      	bne.n	8002584 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f06f 0212 	mvn.w	r2, #18
 80025de:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d123      	bne.n	8002642 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d11f      	bne.n	8002642 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002608:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800260c:	2b00      	cmp	r3, #0
 800260e:	d006      	beq.n	800261e <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800261a:	2b00      	cmp	r3, #0
 800261c:	d111      	bne.n	8002642 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002622:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d105      	bne.n	8002642 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263a:	f043 0201 	orr.w	r2, r3, #1
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002642:	2300      	movs	r3, #0
}
 8002644:	4618      	mov	r0, r3
 8002646:	3710      	adds	r7, #16
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}

0800264c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800264c:	b480      	push	{r7}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800265a:	4618      	mov	r0, r3
 800265c:	370c      	adds	r7, #12
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr
	...

08002668 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002668:	b480      	push	{r7}
 800266a:	b085      	sub	sp, #20
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
 8002670:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002672:	2300      	movs	r3, #0
 8002674:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800267c:	2b01      	cmp	r3, #1
 800267e:	d101      	bne.n	8002684 <HAL_ADC_ConfigChannel+0x1c>
 8002680:	2302      	movs	r3, #2
 8002682:	e105      	b.n	8002890 <HAL_ADC_ConfigChannel+0x228>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2201      	movs	r2, #1
 8002688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	2b09      	cmp	r3, #9
 8002692:	d925      	bls.n	80026e0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	68d9      	ldr	r1, [r3, #12]
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	b29b      	uxth	r3, r3
 80026a0:	461a      	mov	r2, r3
 80026a2:	4613      	mov	r3, r2
 80026a4:	005b      	lsls	r3, r3, #1
 80026a6:	4413      	add	r3, r2
 80026a8:	3b1e      	subs	r3, #30
 80026aa:	2207      	movs	r2, #7
 80026ac:	fa02 f303 	lsl.w	r3, r2, r3
 80026b0:	43da      	mvns	r2, r3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	400a      	ands	r2, r1
 80026b8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	68d9      	ldr	r1, [r3, #12]
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	689a      	ldr	r2, [r3, #8]
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	b29b      	uxth	r3, r3
 80026ca:	4618      	mov	r0, r3
 80026cc:	4603      	mov	r3, r0
 80026ce:	005b      	lsls	r3, r3, #1
 80026d0:	4403      	add	r3, r0
 80026d2:	3b1e      	subs	r3, #30
 80026d4:	409a      	lsls	r2, r3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	430a      	orrs	r2, r1
 80026dc:	60da      	str	r2, [r3, #12]
 80026de:	e022      	b.n	8002726 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	6919      	ldr	r1, [r3, #16]
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	b29b      	uxth	r3, r3
 80026ec:	461a      	mov	r2, r3
 80026ee:	4613      	mov	r3, r2
 80026f0:	005b      	lsls	r3, r3, #1
 80026f2:	4413      	add	r3, r2
 80026f4:	2207      	movs	r2, #7
 80026f6:	fa02 f303 	lsl.w	r3, r2, r3
 80026fa:	43da      	mvns	r2, r3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	400a      	ands	r2, r1
 8002702:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	6919      	ldr	r1, [r3, #16]
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	689a      	ldr	r2, [r3, #8]
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	b29b      	uxth	r3, r3
 8002714:	4618      	mov	r0, r3
 8002716:	4603      	mov	r3, r0
 8002718:	005b      	lsls	r3, r3, #1
 800271a:	4403      	add	r3, r0
 800271c:	409a      	lsls	r2, r3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	430a      	orrs	r2, r1
 8002724:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	2b06      	cmp	r3, #6
 800272c:	d824      	bhi.n	8002778 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	685a      	ldr	r2, [r3, #4]
 8002738:	4613      	mov	r3, r2
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	4413      	add	r3, r2
 800273e:	3b05      	subs	r3, #5
 8002740:	221f      	movs	r2, #31
 8002742:	fa02 f303 	lsl.w	r3, r2, r3
 8002746:	43da      	mvns	r2, r3
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	400a      	ands	r2, r1
 800274e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	b29b      	uxth	r3, r3
 800275c:	4618      	mov	r0, r3
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	685a      	ldr	r2, [r3, #4]
 8002762:	4613      	mov	r3, r2
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	4413      	add	r3, r2
 8002768:	3b05      	subs	r3, #5
 800276a:	fa00 f203 	lsl.w	r2, r0, r3
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	430a      	orrs	r2, r1
 8002774:	635a      	str	r2, [r3, #52]	; 0x34
 8002776:	e04c      	b.n	8002812 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	2b0c      	cmp	r3, #12
 800277e:	d824      	bhi.n	80027ca <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	685a      	ldr	r2, [r3, #4]
 800278a:	4613      	mov	r3, r2
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	4413      	add	r3, r2
 8002790:	3b23      	subs	r3, #35	; 0x23
 8002792:	221f      	movs	r2, #31
 8002794:	fa02 f303 	lsl.w	r3, r2, r3
 8002798:	43da      	mvns	r2, r3
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	400a      	ands	r2, r1
 80027a0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	b29b      	uxth	r3, r3
 80027ae:	4618      	mov	r0, r3
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	685a      	ldr	r2, [r3, #4]
 80027b4:	4613      	mov	r3, r2
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	4413      	add	r3, r2
 80027ba:	3b23      	subs	r3, #35	; 0x23
 80027bc:	fa00 f203 	lsl.w	r2, r0, r3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	430a      	orrs	r2, r1
 80027c6:	631a      	str	r2, [r3, #48]	; 0x30
 80027c8:	e023      	b.n	8002812 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	685a      	ldr	r2, [r3, #4]
 80027d4:	4613      	mov	r3, r2
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	4413      	add	r3, r2
 80027da:	3b41      	subs	r3, #65	; 0x41
 80027dc:	221f      	movs	r2, #31
 80027de:	fa02 f303 	lsl.w	r3, r2, r3
 80027e2:	43da      	mvns	r2, r3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	400a      	ands	r2, r1
 80027ea:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	4618      	mov	r0, r3
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	685a      	ldr	r2, [r3, #4]
 80027fe:	4613      	mov	r3, r2
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	4413      	add	r3, r2
 8002804:	3b41      	subs	r3, #65	; 0x41
 8002806:	fa00 f203 	lsl.w	r2, r0, r3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	430a      	orrs	r2, r1
 8002810:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002812:	4b22      	ldr	r3, [pc, #136]	; (800289c <HAL_ADC_ConfigChannel+0x234>)
 8002814:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a21      	ldr	r2, [pc, #132]	; (80028a0 <HAL_ADC_ConfigChannel+0x238>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d109      	bne.n	8002834 <HAL_ADC_ConfigChannel+0x1cc>
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	2b12      	cmp	r3, #18
 8002826:	d105      	bne.n	8002834 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a19      	ldr	r2, [pc, #100]	; (80028a0 <HAL_ADC_ConfigChannel+0x238>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d123      	bne.n	8002886 <HAL_ADC_ConfigChannel+0x21e>
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	2b10      	cmp	r3, #16
 8002844:	d003      	beq.n	800284e <HAL_ADC_ConfigChannel+0x1e6>
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	2b11      	cmp	r3, #17
 800284c:	d11b      	bne.n	8002886 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	2b10      	cmp	r3, #16
 8002860:	d111      	bne.n	8002886 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002862:	4b10      	ldr	r3, [pc, #64]	; (80028a4 <HAL_ADC_ConfigChannel+0x23c>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a10      	ldr	r2, [pc, #64]	; (80028a8 <HAL_ADC_ConfigChannel+0x240>)
 8002868:	fba2 2303 	umull	r2, r3, r2, r3
 800286c:	0c9a      	lsrs	r2, r3, #18
 800286e:	4613      	mov	r3, r2
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	4413      	add	r3, r2
 8002874:	005b      	lsls	r3, r3, #1
 8002876:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002878:	e002      	b.n	8002880 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	3b01      	subs	r3, #1
 800287e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d1f9      	bne.n	800287a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2200      	movs	r2, #0
 800288a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800288e:	2300      	movs	r3, #0
}
 8002890:	4618      	mov	r0, r3
 8002892:	3714      	adds	r7, #20
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr
 800289c:	40012300 	.word	0x40012300
 80028a0:	40012000 	.word	0x40012000
 80028a4:	20000040 	.word	0x20000040
 80028a8:	431bde83 	.word	0x431bde83

080028ac <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b085      	sub	sp, #20
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80028b4:	4b79      	ldr	r3, [pc, #484]	; (8002a9c <ADC_Init+0x1f0>)
 80028b6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	685a      	ldr	r2, [r3, #4]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	431a      	orrs	r2, r3
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	685a      	ldr	r2, [r3, #4]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80028e0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	6859      	ldr	r1, [r3, #4]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	691b      	ldr	r3, [r3, #16]
 80028ec:	021a      	lsls	r2, r3, #8
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	430a      	orrs	r2, r1
 80028f4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	685a      	ldr	r2, [r3, #4]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002904:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	6859      	ldr	r1, [r3, #4]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	689a      	ldr	r2, [r3, #8]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	430a      	orrs	r2, r1
 8002916:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	689a      	ldr	r2, [r3, #8]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002926:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	6899      	ldr	r1, [r3, #8]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	68da      	ldr	r2, [r3, #12]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	430a      	orrs	r2, r1
 8002938:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800293e:	4a58      	ldr	r2, [pc, #352]	; (8002aa0 <ADC_Init+0x1f4>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d022      	beq.n	800298a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	689a      	ldr	r2, [r3, #8]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002952:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	6899      	ldr	r1, [r3, #8]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	430a      	orrs	r2, r1
 8002964:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	689a      	ldr	r2, [r3, #8]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002974:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	6899      	ldr	r1, [r3, #8]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	430a      	orrs	r2, r1
 8002986:	609a      	str	r2, [r3, #8]
 8002988:	e00f      	b.n	80029aa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	689a      	ldr	r2, [r3, #8]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002998:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	689a      	ldr	r2, [r3, #8]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80029a8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	689a      	ldr	r2, [r3, #8]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f022 0202 	bic.w	r2, r2, #2
 80029b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	6899      	ldr	r1, [r3, #8]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	7e1b      	ldrb	r3, [r3, #24]
 80029c4:	005a      	lsls	r2, r3, #1
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	430a      	orrs	r2, r1
 80029cc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d01b      	beq.n	8002a10 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	685a      	ldr	r2, [r3, #4]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029e6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	685a      	ldr	r2, [r3, #4]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80029f6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	6859      	ldr	r1, [r3, #4]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a02:	3b01      	subs	r3, #1
 8002a04:	035a      	lsls	r2, r3, #13
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	430a      	orrs	r2, r1
 8002a0c:	605a      	str	r2, [r3, #4]
 8002a0e:	e007      	b.n	8002a20 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	685a      	ldr	r2, [r3, #4]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a1e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002a2e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	69db      	ldr	r3, [r3, #28]
 8002a3a:	3b01      	subs	r3, #1
 8002a3c:	051a      	lsls	r2, r3, #20
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	430a      	orrs	r2, r1
 8002a44:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	689a      	ldr	r2, [r3, #8]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002a54:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	6899      	ldr	r1, [r3, #8]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002a62:	025a      	lsls	r2, r3, #9
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	430a      	orrs	r2, r1
 8002a6a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	689a      	ldr	r2, [r3, #8]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a7a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	6899      	ldr	r1, [r3, #8]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	695b      	ldr	r3, [r3, #20]
 8002a86:	029a      	lsls	r2, r3, #10
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	430a      	orrs	r2, r1
 8002a8e:	609a      	str	r2, [r3, #8]
}
 8002a90:	bf00      	nop
 8002a92:	3714      	adds	r7, #20
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr
 8002a9c:	40012300 	.word	0x40012300
 8002aa0:	0f000001 	.word	0x0f000001

08002aa4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b085      	sub	sp, #20
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	f003 0307 	and.w	r3, r3, #7
 8002ab2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ab4:	4b0c      	ldr	r3, [pc, #48]	; (8002ae8 <__NVIC_SetPriorityGrouping+0x44>)
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002aba:	68ba      	ldr	r2, [r7, #8]
 8002abc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002acc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ad0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ad4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ad6:	4a04      	ldr	r2, [pc, #16]	; (8002ae8 <__NVIC_SetPriorityGrouping+0x44>)
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	60d3      	str	r3, [r2, #12]
}
 8002adc:	bf00      	nop
 8002ade:	3714      	adds	r7, #20
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae6:	4770      	bx	lr
 8002ae8:	e000ed00 	.word	0xe000ed00

08002aec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002aec:	b480      	push	{r7}
 8002aee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002af0:	4b04      	ldr	r3, [pc, #16]	; (8002b04 <__NVIC_GetPriorityGrouping+0x18>)
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	0a1b      	lsrs	r3, r3, #8
 8002af6:	f003 0307 	and.w	r3, r3, #7
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr
 8002b04:	e000ed00 	.word	0xe000ed00

08002b08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	4603      	mov	r3, r0
 8002b10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	db0b      	blt.n	8002b32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b1a:	79fb      	ldrb	r3, [r7, #7]
 8002b1c:	f003 021f 	and.w	r2, r3, #31
 8002b20:	4907      	ldr	r1, [pc, #28]	; (8002b40 <__NVIC_EnableIRQ+0x38>)
 8002b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b26:	095b      	lsrs	r3, r3, #5
 8002b28:	2001      	movs	r0, #1
 8002b2a:	fa00 f202 	lsl.w	r2, r0, r2
 8002b2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b32:	bf00      	nop
 8002b34:	370c      	adds	r7, #12
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr
 8002b3e:	bf00      	nop
 8002b40:	e000e100 	.word	0xe000e100

08002b44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	6039      	str	r1, [r7, #0]
 8002b4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	db0a      	blt.n	8002b6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	b2da      	uxtb	r2, r3
 8002b5c:	490c      	ldr	r1, [pc, #48]	; (8002b90 <__NVIC_SetPriority+0x4c>)
 8002b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b62:	0112      	lsls	r2, r2, #4
 8002b64:	b2d2      	uxtb	r2, r2
 8002b66:	440b      	add	r3, r1
 8002b68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b6c:	e00a      	b.n	8002b84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	b2da      	uxtb	r2, r3
 8002b72:	4908      	ldr	r1, [pc, #32]	; (8002b94 <__NVIC_SetPriority+0x50>)
 8002b74:	79fb      	ldrb	r3, [r7, #7]
 8002b76:	f003 030f 	and.w	r3, r3, #15
 8002b7a:	3b04      	subs	r3, #4
 8002b7c:	0112      	lsls	r2, r2, #4
 8002b7e:	b2d2      	uxtb	r2, r2
 8002b80:	440b      	add	r3, r1
 8002b82:	761a      	strb	r2, [r3, #24]
}
 8002b84:	bf00      	nop
 8002b86:	370c      	adds	r7, #12
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr
 8002b90:	e000e100 	.word	0xe000e100
 8002b94:	e000ed00 	.word	0xe000ed00

08002b98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b089      	sub	sp, #36	; 0x24
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	60f8      	str	r0, [r7, #12]
 8002ba0:	60b9      	str	r1, [r7, #8]
 8002ba2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	f003 0307 	and.w	r3, r3, #7
 8002baa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	f1c3 0307 	rsb	r3, r3, #7
 8002bb2:	2b04      	cmp	r3, #4
 8002bb4:	bf28      	it	cs
 8002bb6:	2304      	movcs	r3, #4
 8002bb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	3304      	adds	r3, #4
 8002bbe:	2b06      	cmp	r3, #6
 8002bc0:	d902      	bls.n	8002bc8 <NVIC_EncodePriority+0x30>
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	3b03      	subs	r3, #3
 8002bc6:	e000      	b.n	8002bca <NVIC_EncodePriority+0x32>
 8002bc8:	2300      	movs	r3, #0
 8002bca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bcc:	f04f 32ff 	mov.w	r2, #4294967295
 8002bd0:	69bb      	ldr	r3, [r7, #24]
 8002bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd6:	43da      	mvns	r2, r3
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	401a      	ands	r2, r3
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002be0:	f04f 31ff 	mov.w	r1, #4294967295
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	fa01 f303 	lsl.w	r3, r1, r3
 8002bea:	43d9      	mvns	r1, r3
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bf0:	4313      	orrs	r3, r2
         );
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3724      	adds	r7, #36	; 0x24
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr
	...

08002c00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b082      	sub	sp, #8
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	3b01      	subs	r3, #1
 8002c0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c10:	d301      	bcc.n	8002c16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c12:	2301      	movs	r3, #1
 8002c14:	e00f      	b.n	8002c36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c16:	4a0a      	ldr	r2, [pc, #40]	; (8002c40 <SysTick_Config+0x40>)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	3b01      	subs	r3, #1
 8002c1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c1e:	210f      	movs	r1, #15
 8002c20:	f04f 30ff 	mov.w	r0, #4294967295
 8002c24:	f7ff ff8e 	bl	8002b44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c28:	4b05      	ldr	r3, [pc, #20]	; (8002c40 <SysTick_Config+0x40>)
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c2e:	4b04      	ldr	r3, [pc, #16]	; (8002c40 <SysTick_Config+0x40>)
 8002c30:	2207      	movs	r2, #7
 8002c32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c34:	2300      	movs	r3, #0
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3708      	adds	r7, #8
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	e000e010 	.word	0xe000e010

08002c44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b082      	sub	sp, #8
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	f7ff ff29 	bl	8002aa4 <__NVIC_SetPriorityGrouping>
}
 8002c52:	bf00      	nop
 8002c54:	3708      	adds	r7, #8
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}

08002c5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c5a:	b580      	push	{r7, lr}
 8002c5c:	b086      	sub	sp, #24
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	4603      	mov	r3, r0
 8002c62:	60b9      	str	r1, [r7, #8]
 8002c64:	607a      	str	r2, [r7, #4]
 8002c66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c6c:	f7ff ff3e 	bl	8002aec <__NVIC_GetPriorityGrouping>
 8002c70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	68b9      	ldr	r1, [r7, #8]
 8002c76:	6978      	ldr	r0, [r7, #20]
 8002c78:	f7ff ff8e 	bl	8002b98 <NVIC_EncodePriority>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c82:	4611      	mov	r1, r2
 8002c84:	4618      	mov	r0, r3
 8002c86:	f7ff ff5d 	bl	8002b44 <__NVIC_SetPriority>
}
 8002c8a:	bf00      	nop
 8002c8c:	3718      	adds	r7, #24
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}

08002c92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c92:	b580      	push	{r7, lr}
 8002c94:	b082      	sub	sp, #8
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	4603      	mov	r3, r0
 8002c9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f7ff ff31 	bl	8002b08 <__NVIC_EnableIRQ>
}
 8002ca6:	bf00      	nop
 8002ca8:	3708      	adds	r7, #8
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}

08002cae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cae:	b580      	push	{r7, lr}
 8002cb0:	b082      	sub	sp, #8
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f7ff ffa2 	bl	8002c00 <SysTick_Config>
 8002cbc:	4603      	mov	r3, r0
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3708      	adds	r7, #8
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
	...

08002cc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b089      	sub	sp, #36	; 0x24
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cde:	2300      	movs	r3, #0
 8002ce0:	61fb      	str	r3, [r7, #28]
 8002ce2:	e16b      	b.n	8002fbc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	697a      	ldr	r2, [r7, #20]
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002cf8:	693a      	ldr	r2, [r7, #16]
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	f040 815a 	bne.w	8002fb6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	f003 0303 	and.w	r3, r3, #3
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d005      	beq.n	8002d1a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d16:	2b02      	cmp	r3, #2
 8002d18:	d130      	bne.n	8002d7c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	005b      	lsls	r3, r3, #1
 8002d24:	2203      	movs	r2, #3
 8002d26:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2a:	43db      	mvns	r3, r3
 8002d2c:	69ba      	ldr	r2, [r7, #24]
 8002d2e:	4013      	ands	r3, r2
 8002d30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	68da      	ldr	r2, [r3, #12]
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	005b      	lsls	r3, r3, #1
 8002d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3e:	69ba      	ldr	r2, [r7, #24]
 8002d40:	4313      	orrs	r3, r2
 8002d42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	69ba      	ldr	r2, [r7, #24]
 8002d48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d50:	2201      	movs	r2, #1
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	fa02 f303 	lsl.w	r3, r2, r3
 8002d58:	43db      	mvns	r3, r3
 8002d5a:	69ba      	ldr	r2, [r7, #24]
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	091b      	lsrs	r3, r3, #4
 8002d66:	f003 0201 	and.w	r2, r3, #1
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d70:	69ba      	ldr	r2, [r7, #24]
 8002d72:	4313      	orrs	r3, r2
 8002d74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	69ba      	ldr	r2, [r7, #24]
 8002d7a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f003 0303 	and.w	r3, r3, #3
 8002d84:	2b03      	cmp	r3, #3
 8002d86:	d017      	beq.n	8002db8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d8e:	69fb      	ldr	r3, [r7, #28]
 8002d90:	005b      	lsls	r3, r3, #1
 8002d92:	2203      	movs	r2, #3
 8002d94:	fa02 f303 	lsl.w	r3, r2, r3
 8002d98:	43db      	mvns	r3, r3
 8002d9a:	69ba      	ldr	r2, [r7, #24]
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	689a      	ldr	r2, [r3, #8]
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	005b      	lsls	r3, r3, #1
 8002da8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dac:	69ba      	ldr	r2, [r7, #24]
 8002dae:	4313      	orrs	r3, r2
 8002db0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	69ba      	ldr	r2, [r7, #24]
 8002db6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	f003 0303 	and.w	r3, r3, #3
 8002dc0:	2b02      	cmp	r3, #2
 8002dc2:	d123      	bne.n	8002e0c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002dc4:	69fb      	ldr	r3, [r7, #28]
 8002dc6:	08da      	lsrs	r2, r3, #3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	3208      	adds	r2, #8
 8002dcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	f003 0307 	and.w	r3, r3, #7
 8002dd8:	009b      	lsls	r3, r3, #2
 8002dda:	220f      	movs	r2, #15
 8002ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8002de0:	43db      	mvns	r3, r3
 8002de2:	69ba      	ldr	r2, [r7, #24]
 8002de4:	4013      	ands	r3, r2
 8002de6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	691a      	ldr	r2, [r3, #16]
 8002dec:	69fb      	ldr	r3, [r7, #28]
 8002dee:	f003 0307 	and.w	r3, r3, #7
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	fa02 f303 	lsl.w	r3, r2, r3
 8002df8:	69ba      	ldr	r2, [r7, #24]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	08da      	lsrs	r2, r3, #3
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	3208      	adds	r2, #8
 8002e06:	69b9      	ldr	r1, [r7, #24]
 8002e08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	005b      	lsls	r3, r3, #1
 8002e16:	2203      	movs	r2, #3
 8002e18:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1c:	43db      	mvns	r3, r3
 8002e1e:	69ba      	ldr	r2, [r7, #24]
 8002e20:	4013      	ands	r3, r2
 8002e22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	f003 0203 	and.w	r2, r3, #3
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	005b      	lsls	r3, r3, #1
 8002e30:	fa02 f303 	lsl.w	r3, r2, r3
 8002e34:	69ba      	ldr	r2, [r7, #24]
 8002e36:	4313      	orrs	r3, r2
 8002e38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	69ba      	ldr	r2, [r7, #24]
 8002e3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	f000 80b4 	beq.w	8002fb6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e4e:	2300      	movs	r3, #0
 8002e50:	60fb      	str	r3, [r7, #12]
 8002e52:	4b60      	ldr	r3, [pc, #384]	; (8002fd4 <HAL_GPIO_Init+0x30c>)
 8002e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e56:	4a5f      	ldr	r2, [pc, #380]	; (8002fd4 <HAL_GPIO_Init+0x30c>)
 8002e58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e5c:	6453      	str	r3, [r2, #68]	; 0x44
 8002e5e:	4b5d      	ldr	r3, [pc, #372]	; (8002fd4 <HAL_GPIO_Init+0x30c>)
 8002e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e66:	60fb      	str	r3, [r7, #12]
 8002e68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e6a:	4a5b      	ldr	r2, [pc, #364]	; (8002fd8 <HAL_GPIO_Init+0x310>)
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	089b      	lsrs	r3, r3, #2
 8002e70:	3302      	adds	r3, #2
 8002e72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e78:	69fb      	ldr	r3, [r7, #28]
 8002e7a:	f003 0303 	and.w	r3, r3, #3
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	220f      	movs	r2, #15
 8002e82:	fa02 f303 	lsl.w	r3, r2, r3
 8002e86:	43db      	mvns	r3, r3
 8002e88:	69ba      	ldr	r2, [r7, #24]
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	4a52      	ldr	r2, [pc, #328]	; (8002fdc <HAL_GPIO_Init+0x314>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d02b      	beq.n	8002eee <HAL_GPIO_Init+0x226>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4a51      	ldr	r2, [pc, #324]	; (8002fe0 <HAL_GPIO_Init+0x318>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d025      	beq.n	8002eea <HAL_GPIO_Init+0x222>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	4a50      	ldr	r2, [pc, #320]	; (8002fe4 <HAL_GPIO_Init+0x31c>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d01f      	beq.n	8002ee6 <HAL_GPIO_Init+0x21e>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	4a4f      	ldr	r2, [pc, #316]	; (8002fe8 <HAL_GPIO_Init+0x320>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d019      	beq.n	8002ee2 <HAL_GPIO_Init+0x21a>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	4a4e      	ldr	r2, [pc, #312]	; (8002fec <HAL_GPIO_Init+0x324>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d013      	beq.n	8002ede <HAL_GPIO_Init+0x216>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	4a4d      	ldr	r2, [pc, #308]	; (8002ff0 <HAL_GPIO_Init+0x328>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d00d      	beq.n	8002eda <HAL_GPIO_Init+0x212>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4a4c      	ldr	r2, [pc, #304]	; (8002ff4 <HAL_GPIO_Init+0x32c>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d007      	beq.n	8002ed6 <HAL_GPIO_Init+0x20e>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4a4b      	ldr	r2, [pc, #300]	; (8002ff8 <HAL_GPIO_Init+0x330>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d101      	bne.n	8002ed2 <HAL_GPIO_Init+0x20a>
 8002ece:	2307      	movs	r3, #7
 8002ed0:	e00e      	b.n	8002ef0 <HAL_GPIO_Init+0x228>
 8002ed2:	2308      	movs	r3, #8
 8002ed4:	e00c      	b.n	8002ef0 <HAL_GPIO_Init+0x228>
 8002ed6:	2306      	movs	r3, #6
 8002ed8:	e00a      	b.n	8002ef0 <HAL_GPIO_Init+0x228>
 8002eda:	2305      	movs	r3, #5
 8002edc:	e008      	b.n	8002ef0 <HAL_GPIO_Init+0x228>
 8002ede:	2304      	movs	r3, #4
 8002ee0:	e006      	b.n	8002ef0 <HAL_GPIO_Init+0x228>
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e004      	b.n	8002ef0 <HAL_GPIO_Init+0x228>
 8002ee6:	2302      	movs	r3, #2
 8002ee8:	e002      	b.n	8002ef0 <HAL_GPIO_Init+0x228>
 8002eea:	2301      	movs	r3, #1
 8002eec:	e000      	b.n	8002ef0 <HAL_GPIO_Init+0x228>
 8002eee:	2300      	movs	r3, #0
 8002ef0:	69fa      	ldr	r2, [r7, #28]
 8002ef2:	f002 0203 	and.w	r2, r2, #3
 8002ef6:	0092      	lsls	r2, r2, #2
 8002ef8:	4093      	lsls	r3, r2
 8002efa:	69ba      	ldr	r2, [r7, #24]
 8002efc:	4313      	orrs	r3, r2
 8002efe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f00:	4935      	ldr	r1, [pc, #212]	; (8002fd8 <HAL_GPIO_Init+0x310>)
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	089b      	lsrs	r3, r3, #2
 8002f06:	3302      	adds	r3, #2
 8002f08:	69ba      	ldr	r2, [r7, #24]
 8002f0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f0e:	4b3b      	ldr	r3, [pc, #236]	; (8002ffc <HAL_GPIO_Init+0x334>)
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	43db      	mvns	r3, r3
 8002f18:	69ba      	ldr	r2, [r7, #24]
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d003      	beq.n	8002f32 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002f2a:	69ba      	ldr	r2, [r7, #24]
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f32:	4a32      	ldr	r2, [pc, #200]	; (8002ffc <HAL_GPIO_Init+0x334>)
 8002f34:	69bb      	ldr	r3, [r7, #24]
 8002f36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f38:	4b30      	ldr	r3, [pc, #192]	; (8002ffc <HAL_GPIO_Init+0x334>)
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	43db      	mvns	r3, r3
 8002f42:	69ba      	ldr	r2, [r7, #24]
 8002f44:	4013      	ands	r3, r2
 8002f46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d003      	beq.n	8002f5c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002f54:	69ba      	ldr	r2, [r7, #24]
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f5c:	4a27      	ldr	r2, [pc, #156]	; (8002ffc <HAL_GPIO_Init+0x334>)
 8002f5e:	69bb      	ldr	r3, [r7, #24]
 8002f60:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f62:	4b26      	ldr	r3, [pc, #152]	; (8002ffc <HAL_GPIO_Init+0x334>)
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	43db      	mvns	r3, r3
 8002f6c:	69ba      	ldr	r2, [r7, #24]
 8002f6e:	4013      	ands	r3, r2
 8002f70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d003      	beq.n	8002f86 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002f7e:	69ba      	ldr	r2, [r7, #24]
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f86:	4a1d      	ldr	r2, [pc, #116]	; (8002ffc <HAL_GPIO_Init+0x334>)
 8002f88:	69bb      	ldr	r3, [r7, #24]
 8002f8a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f8c:	4b1b      	ldr	r3, [pc, #108]	; (8002ffc <HAL_GPIO_Init+0x334>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	43db      	mvns	r3, r3
 8002f96:	69ba      	ldr	r2, [r7, #24]
 8002f98:	4013      	ands	r3, r2
 8002f9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d003      	beq.n	8002fb0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002fa8:	69ba      	ldr	r2, [r7, #24]
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	4313      	orrs	r3, r2
 8002fae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002fb0:	4a12      	ldr	r2, [pc, #72]	; (8002ffc <HAL_GPIO_Init+0x334>)
 8002fb2:	69bb      	ldr	r3, [r7, #24]
 8002fb4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	3301      	adds	r3, #1
 8002fba:	61fb      	str	r3, [r7, #28]
 8002fbc:	69fb      	ldr	r3, [r7, #28]
 8002fbe:	2b0f      	cmp	r3, #15
 8002fc0:	f67f ae90 	bls.w	8002ce4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002fc4:	bf00      	nop
 8002fc6:	bf00      	nop
 8002fc8:	3724      	adds	r7, #36	; 0x24
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr
 8002fd2:	bf00      	nop
 8002fd4:	40023800 	.word	0x40023800
 8002fd8:	40013800 	.word	0x40013800
 8002fdc:	40020000 	.word	0x40020000
 8002fe0:	40020400 	.word	0x40020400
 8002fe4:	40020800 	.word	0x40020800
 8002fe8:	40020c00 	.word	0x40020c00
 8002fec:	40021000 	.word	0x40021000
 8002ff0:	40021400 	.word	0x40021400
 8002ff4:	40021800 	.word	0x40021800
 8002ff8:	40021c00 	.word	0x40021c00
 8002ffc:	40013c00 	.word	0x40013c00

08003000 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003000:	b480      	push	{r7}
 8003002:	b085      	sub	sp, #20
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	460b      	mov	r3, r1
 800300a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	691a      	ldr	r2, [r3, #16]
 8003010:	887b      	ldrh	r3, [r7, #2]
 8003012:	4013      	ands	r3, r2
 8003014:	2b00      	cmp	r3, #0
 8003016:	d002      	beq.n	800301e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003018:	2301      	movs	r3, #1
 800301a:	73fb      	strb	r3, [r7, #15]
 800301c:	e001      	b.n	8003022 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800301e:	2300      	movs	r3, #0
 8003020:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003022:	7bfb      	ldrb	r3, [r7, #15]
}
 8003024:	4618      	mov	r0, r3
 8003026:	3714      	adds	r7, #20
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr

08003030 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003030:	b480      	push	{r7}
 8003032:	b083      	sub	sp, #12
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	460b      	mov	r3, r1
 800303a:	807b      	strh	r3, [r7, #2]
 800303c:	4613      	mov	r3, r2
 800303e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003040:	787b      	ldrb	r3, [r7, #1]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d003      	beq.n	800304e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003046:	887a      	ldrh	r2, [r7, #2]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800304c:	e003      	b.n	8003056 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800304e:	887b      	ldrh	r3, [r7, #2]
 8003050:	041a      	lsls	r2, r3, #16
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	619a      	str	r2, [r3, #24]
}
 8003056:	bf00      	nop
 8003058:	370c      	adds	r7, #12
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr
	...

08003064 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b086      	sub	sp, #24
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d101      	bne.n	8003076 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e267      	b.n	8003546 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 0301 	and.w	r3, r3, #1
 800307e:	2b00      	cmp	r3, #0
 8003080:	d075      	beq.n	800316e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003082:	4b88      	ldr	r3, [pc, #544]	; (80032a4 <HAL_RCC_OscConfig+0x240>)
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	f003 030c 	and.w	r3, r3, #12
 800308a:	2b04      	cmp	r3, #4
 800308c:	d00c      	beq.n	80030a8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800308e:	4b85      	ldr	r3, [pc, #532]	; (80032a4 <HAL_RCC_OscConfig+0x240>)
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003096:	2b08      	cmp	r3, #8
 8003098:	d112      	bne.n	80030c0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800309a:	4b82      	ldr	r3, [pc, #520]	; (80032a4 <HAL_RCC_OscConfig+0x240>)
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030a6:	d10b      	bne.n	80030c0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030a8:	4b7e      	ldr	r3, [pc, #504]	; (80032a4 <HAL_RCC_OscConfig+0x240>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d05b      	beq.n	800316c <HAL_RCC_OscConfig+0x108>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d157      	bne.n	800316c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e242      	b.n	8003546 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030c8:	d106      	bne.n	80030d8 <HAL_RCC_OscConfig+0x74>
 80030ca:	4b76      	ldr	r3, [pc, #472]	; (80032a4 <HAL_RCC_OscConfig+0x240>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a75      	ldr	r2, [pc, #468]	; (80032a4 <HAL_RCC_OscConfig+0x240>)
 80030d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030d4:	6013      	str	r3, [r2, #0]
 80030d6:	e01d      	b.n	8003114 <HAL_RCC_OscConfig+0xb0>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030e0:	d10c      	bne.n	80030fc <HAL_RCC_OscConfig+0x98>
 80030e2:	4b70      	ldr	r3, [pc, #448]	; (80032a4 <HAL_RCC_OscConfig+0x240>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a6f      	ldr	r2, [pc, #444]	; (80032a4 <HAL_RCC_OscConfig+0x240>)
 80030e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030ec:	6013      	str	r3, [r2, #0]
 80030ee:	4b6d      	ldr	r3, [pc, #436]	; (80032a4 <HAL_RCC_OscConfig+0x240>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a6c      	ldr	r2, [pc, #432]	; (80032a4 <HAL_RCC_OscConfig+0x240>)
 80030f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030f8:	6013      	str	r3, [r2, #0]
 80030fa:	e00b      	b.n	8003114 <HAL_RCC_OscConfig+0xb0>
 80030fc:	4b69      	ldr	r3, [pc, #420]	; (80032a4 <HAL_RCC_OscConfig+0x240>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a68      	ldr	r2, [pc, #416]	; (80032a4 <HAL_RCC_OscConfig+0x240>)
 8003102:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003106:	6013      	str	r3, [r2, #0]
 8003108:	4b66      	ldr	r3, [pc, #408]	; (80032a4 <HAL_RCC_OscConfig+0x240>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a65      	ldr	r2, [pc, #404]	; (80032a4 <HAL_RCC_OscConfig+0x240>)
 800310e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003112:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d013      	beq.n	8003144 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800311c:	f7ff f8b6 	bl	800228c <HAL_GetTick>
 8003120:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003122:	e008      	b.n	8003136 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003124:	f7ff f8b2 	bl	800228c <HAL_GetTick>
 8003128:	4602      	mov	r2, r0
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	2b64      	cmp	r3, #100	; 0x64
 8003130:	d901      	bls.n	8003136 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003132:	2303      	movs	r3, #3
 8003134:	e207      	b.n	8003546 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003136:	4b5b      	ldr	r3, [pc, #364]	; (80032a4 <HAL_RCC_OscConfig+0x240>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800313e:	2b00      	cmp	r3, #0
 8003140:	d0f0      	beq.n	8003124 <HAL_RCC_OscConfig+0xc0>
 8003142:	e014      	b.n	800316e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003144:	f7ff f8a2 	bl	800228c <HAL_GetTick>
 8003148:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800314a:	e008      	b.n	800315e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800314c:	f7ff f89e 	bl	800228c <HAL_GetTick>
 8003150:	4602      	mov	r2, r0
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	2b64      	cmp	r3, #100	; 0x64
 8003158:	d901      	bls.n	800315e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800315a:	2303      	movs	r3, #3
 800315c:	e1f3      	b.n	8003546 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800315e:	4b51      	ldr	r3, [pc, #324]	; (80032a4 <HAL_RCC_OscConfig+0x240>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d1f0      	bne.n	800314c <HAL_RCC_OscConfig+0xe8>
 800316a:	e000      	b.n	800316e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800316c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 0302 	and.w	r3, r3, #2
 8003176:	2b00      	cmp	r3, #0
 8003178:	d063      	beq.n	8003242 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800317a:	4b4a      	ldr	r3, [pc, #296]	; (80032a4 <HAL_RCC_OscConfig+0x240>)
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	f003 030c 	and.w	r3, r3, #12
 8003182:	2b00      	cmp	r3, #0
 8003184:	d00b      	beq.n	800319e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003186:	4b47      	ldr	r3, [pc, #284]	; (80032a4 <HAL_RCC_OscConfig+0x240>)
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800318e:	2b08      	cmp	r3, #8
 8003190:	d11c      	bne.n	80031cc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003192:	4b44      	ldr	r3, [pc, #272]	; (80032a4 <HAL_RCC_OscConfig+0x240>)
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d116      	bne.n	80031cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800319e:	4b41      	ldr	r3, [pc, #260]	; (80032a4 <HAL_RCC_OscConfig+0x240>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0302 	and.w	r3, r3, #2
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d005      	beq.n	80031b6 <HAL_RCC_OscConfig+0x152>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	68db      	ldr	r3, [r3, #12]
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d001      	beq.n	80031b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e1c7      	b.n	8003546 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031b6:	4b3b      	ldr	r3, [pc, #236]	; (80032a4 <HAL_RCC_OscConfig+0x240>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	691b      	ldr	r3, [r3, #16]
 80031c2:	00db      	lsls	r3, r3, #3
 80031c4:	4937      	ldr	r1, [pc, #220]	; (80032a4 <HAL_RCC_OscConfig+0x240>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031ca:	e03a      	b.n	8003242 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	68db      	ldr	r3, [r3, #12]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d020      	beq.n	8003216 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031d4:	4b34      	ldr	r3, [pc, #208]	; (80032a8 <HAL_RCC_OscConfig+0x244>)
 80031d6:	2201      	movs	r2, #1
 80031d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031da:	f7ff f857 	bl	800228c <HAL_GetTick>
 80031de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031e0:	e008      	b.n	80031f4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031e2:	f7ff f853 	bl	800228c <HAL_GetTick>
 80031e6:	4602      	mov	r2, r0
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	1ad3      	subs	r3, r2, r3
 80031ec:	2b02      	cmp	r3, #2
 80031ee:	d901      	bls.n	80031f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80031f0:	2303      	movs	r3, #3
 80031f2:	e1a8      	b.n	8003546 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031f4:	4b2b      	ldr	r3, [pc, #172]	; (80032a4 <HAL_RCC_OscConfig+0x240>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 0302 	and.w	r3, r3, #2
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d0f0      	beq.n	80031e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003200:	4b28      	ldr	r3, [pc, #160]	; (80032a4 <HAL_RCC_OscConfig+0x240>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	691b      	ldr	r3, [r3, #16]
 800320c:	00db      	lsls	r3, r3, #3
 800320e:	4925      	ldr	r1, [pc, #148]	; (80032a4 <HAL_RCC_OscConfig+0x240>)
 8003210:	4313      	orrs	r3, r2
 8003212:	600b      	str	r3, [r1, #0]
 8003214:	e015      	b.n	8003242 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003216:	4b24      	ldr	r3, [pc, #144]	; (80032a8 <HAL_RCC_OscConfig+0x244>)
 8003218:	2200      	movs	r2, #0
 800321a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800321c:	f7ff f836 	bl	800228c <HAL_GetTick>
 8003220:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003222:	e008      	b.n	8003236 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003224:	f7ff f832 	bl	800228c <HAL_GetTick>
 8003228:	4602      	mov	r2, r0
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	2b02      	cmp	r3, #2
 8003230:	d901      	bls.n	8003236 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003232:	2303      	movs	r3, #3
 8003234:	e187      	b.n	8003546 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003236:	4b1b      	ldr	r3, [pc, #108]	; (80032a4 <HAL_RCC_OscConfig+0x240>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0302 	and.w	r3, r3, #2
 800323e:	2b00      	cmp	r3, #0
 8003240:	d1f0      	bne.n	8003224 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 0308 	and.w	r3, r3, #8
 800324a:	2b00      	cmp	r3, #0
 800324c:	d036      	beq.n	80032bc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	695b      	ldr	r3, [r3, #20]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d016      	beq.n	8003284 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003256:	4b15      	ldr	r3, [pc, #84]	; (80032ac <HAL_RCC_OscConfig+0x248>)
 8003258:	2201      	movs	r2, #1
 800325a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800325c:	f7ff f816 	bl	800228c <HAL_GetTick>
 8003260:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003262:	e008      	b.n	8003276 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003264:	f7ff f812 	bl	800228c <HAL_GetTick>
 8003268:	4602      	mov	r2, r0
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	2b02      	cmp	r3, #2
 8003270:	d901      	bls.n	8003276 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003272:	2303      	movs	r3, #3
 8003274:	e167      	b.n	8003546 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003276:	4b0b      	ldr	r3, [pc, #44]	; (80032a4 <HAL_RCC_OscConfig+0x240>)
 8003278:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800327a:	f003 0302 	and.w	r3, r3, #2
 800327e:	2b00      	cmp	r3, #0
 8003280:	d0f0      	beq.n	8003264 <HAL_RCC_OscConfig+0x200>
 8003282:	e01b      	b.n	80032bc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003284:	4b09      	ldr	r3, [pc, #36]	; (80032ac <HAL_RCC_OscConfig+0x248>)
 8003286:	2200      	movs	r2, #0
 8003288:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800328a:	f7fe ffff 	bl	800228c <HAL_GetTick>
 800328e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003290:	e00e      	b.n	80032b0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003292:	f7fe fffb 	bl	800228c <HAL_GetTick>
 8003296:	4602      	mov	r2, r0
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	1ad3      	subs	r3, r2, r3
 800329c:	2b02      	cmp	r3, #2
 800329e:	d907      	bls.n	80032b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80032a0:	2303      	movs	r3, #3
 80032a2:	e150      	b.n	8003546 <HAL_RCC_OscConfig+0x4e2>
 80032a4:	40023800 	.word	0x40023800
 80032a8:	42470000 	.word	0x42470000
 80032ac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032b0:	4b88      	ldr	r3, [pc, #544]	; (80034d4 <HAL_RCC_OscConfig+0x470>)
 80032b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032b4:	f003 0302 	and.w	r3, r3, #2
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d1ea      	bne.n	8003292 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 0304 	and.w	r3, r3, #4
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	f000 8097 	beq.w	80033f8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032ca:	2300      	movs	r3, #0
 80032cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032ce:	4b81      	ldr	r3, [pc, #516]	; (80034d4 <HAL_RCC_OscConfig+0x470>)
 80032d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d10f      	bne.n	80032fa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032da:	2300      	movs	r3, #0
 80032dc:	60bb      	str	r3, [r7, #8]
 80032de:	4b7d      	ldr	r3, [pc, #500]	; (80034d4 <HAL_RCC_OscConfig+0x470>)
 80032e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e2:	4a7c      	ldr	r2, [pc, #496]	; (80034d4 <HAL_RCC_OscConfig+0x470>)
 80032e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032e8:	6413      	str	r3, [r2, #64]	; 0x40
 80032ea:	4b7a      	ldr	r3, [pc, #488]	; (80034d4 <HAL_RCC_OscConfig+0x470>)
 80032ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032f2:	60bb      	str	r3, [r7, #8]
 80032f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032f6:	2301      	movs	r3, #1
 80032f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032fa:	4b77      	ldr	r3, [pc, #476]	; (80034d8 <HAL_RCC_OscConfig+0x474>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003302:	2b00      	cmp	r3, #0
 8003304:	d118      	bne.n	8003338 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003306:	4b74      	ldr	r3, [pc, #464]	; (80034d8 <HAL_RCC_OscConfig+0x474>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a73      	ldr	r2, [pc, #460]	; (80034d8 <HAL_RCC_OscConfig+0x474>)
 800330c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003310:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003312:	f7fe ffbb 	bl	800228c <HAL_GetTick>
 8003316:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003318:	e008      	b.n	800332c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800331a:	f7fe ffb7 	bl	800228c <HAL_GetTick>
 800331e:	4602      	mov	r2, r0
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	1ad3      	subs	r3, r2, r3
 8003324:	2b02      	cmp	r3, #2
 8003326:	d901      	bls.n	800332c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003328:	2303      	movs	r3, #3
 800332a:	e10c      	b.n	8003546 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800332c:	4b6a      	ldr	r3, [pc, #424]	; (80034d8 <HAL_RCC_OscConfig+0x474>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003334:	2b00      	cmp	r3, #0
 8003336:	d0f0      	beq.n	800331a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	2b01      	cmp	r3, #1
 800333e:	d106      	bne.n	800334e <HAL_RCC_OscConfig+0x2ea>
 8003340:	4b64      	ldr	r3, [pc, #400]	; (80034d4 <HAL_RCC_OscConfig+0x470>)
 8003342:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003344:	4a63      	ldr	r2, [pc, #396]	; (80034d4 <HAL_RCC_OscConfig+0x470>)
 8003346:	f043 0301 	orr.w	r3, r3, #1
 800334a:	6713      	str	r3, [r2, #112]	; 0x70
 800334c:	e01c      	b.n	8003388 <HAL_RCC_OscConfig+0x324>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	2b05      	cmp	r3, #5
 8003354:	d10c      	bne.n	8003370 <HAL_RCC_OscConfig+0x30c>
 8003356:	4b5f      	ldr	r3, [pc, #380]	; (80034d4 <HAL_RCC_OscConfig+0x470>)
 8003358:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800335a:	4a5e      	ldr	r2, [pc, #376]	; (80034d4 <HAL_RCC_OscConfig+0x470>)
 800335c:	f043 0304 	orr.w	r3, r3, #4
 8003360:	6713      	str	r3, [r2, #112]	; 0x70
 8003362:	4b5c      	ldr	r3, [pc, #368]	; (80034d4 <HAL_RCC_OscConfig+0x470>)
 8003364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003366:	4a5b      	ldr	r2, [pc, #364]	; (80034d4 <HAL_RCC_OscConfig+0x470>)
 8003368:	f043 0301 	orr.w	r3, r3, #1
 800336c:	6713      	str	r3, [r2, #112]	; 0x70
 800336e:	e00b      	b.n	8003388 <HAL_RCC_OscConfig+0x324>
 8003370:	4b58      	ldr	r3, [pc, #352]	; (80034d4 <HAL_RCC_OscConfig+0x470>)
 8003372:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003374:	4a57      	ldr	r2, [pc, #348]	; (80034d4 <HAL_RCC_OscConfig+0x470>)
 8003376:	f023 0301 	bic.w	r3, r3, #1
 800337a:	6713      	str	r3, [r2, #112]	; 0x70
 800337c:	4b55      	ldr	r3, [pc, #340]	; (80034d4 <HAL_RCC_OscConfig+0x470>)
 800337e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003380:	4a54      	ldr	r2, [pc, #336]	; (80034d4 <HAL_RCC_OscConfig+0x470>)
 8003382:	f023 0304 	bic.w	r3, r3, #4
 8003386:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d015      	beq.n	80033bc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003390:	f7fe ff7c 	bl	800228c <HAL_GetTick>
 8003394:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003396:	e00a      	b.n	80033ae <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003398:	f7fe ff78 	bl	800228c <HAL_GetTick>
 800339c:	4602      	mov	r2, r0
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d901      	bls.n	80033ae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80033aa:	2303      	movs	r3, #3
 80033ac:	e0cb      	b.n	8003546 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033ae:	4b49      	ldr	r3, [pc, #292]	; (80034d4 <HAL_RCC_OscConfig+0x470>)
 80033b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033b2:	f003 0302 	and.w	r3, r3, #2
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d0ee      	beq.n	8003398 <HAL_RCC_OscConfig+0x334>
 80033ba:	e014      	b.n	80033e6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033bc:	f7fe ff66 	bl	800228c <HAL_GetTick>
 80033c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033c2:	e00a      	b.n	80033da <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033c4:	f7fe ff62 	bl	800228c <HAL_GetTick>
 80033c8:	4602      	mov	r2, r0
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d901      	bls.n	80033da <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	e0b5      	b.n	8003546 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033da:	4b3e      	ldr	r3, [pc, #248]	; (80034d4 <HAL_RCC_OscConfig+0x470>)
 80033dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033de:	f003 0302 	and.w	r3, r3, #2
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d1ee      	bne.n	80033c4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80033e6:	7dfb      	ldrb	r3, [r7, #23]
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d105      	bne.n	80033f8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033ec:	4b39      	ldr	r3, [pc, #228]	; (80034d4 <HAL_RCC_OscConfig+0x470>)
 80033ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f0:	4a38      	ldr	r2, [pc, #224]	; (80034d4 <HAL_RCC_OscConfig+0x470>)
 80033f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033f6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	699b      	ldr	r3, [r3, #24]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	f000 80a1 	beq.w	8003544 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003402:	4b34      	ldr	r3, [pc, #208]	; (80034d4 <HAL_RCC_OscConfig+0x470>)
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	f003 030c 	and.w	r3, r3, #12
 800340a:	2b08      	cmp	r3, #8
 800340c:	d05c      	beq.n	80034c8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	699b      	ldr	r3, [r3, #24]
 8003412:	2b02      	cmp	r3, #2
 8003414:	d141      	bne.n	800349a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003416:	4b31      	ldr	r3, [pc, #196]	; (80034dc <HAL_RCC_OscConfig+0x478>)
 8003418:	2200      	movs	r2, #0
 800341a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800341c:	f7fe ff36 	bl	800228c <HAL_GetTick>
 8003420:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003422:	e008      	b.n	8003436 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003424:	f7fe ff32 	bl	800228c <HAL_GetTick>
 8003428:	4602      	mov	r2, r0
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	2b02      	cmp	r3, #2
 8003430:	d901      	bls.n	8003436 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	e087      	b.n	8003546 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003436:	4b27      	ldr	r3, [pc, #156]	; (80034d4 <HAL_RCC_OscConfig+0x470>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d1f0      	bne.n	8003424 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	69da      	ldr	r2, [r3, #28]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6a1b      	ldr	r3, [r3, #32]
 800344a:	431a      	orrs	r2, r3
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003450:	019b      	lsls	r3, r3, #6
 8003452:	431a      	orrs	r2, r3
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003458:	085b      	lsrs	r3, r3, #1
 800345a:	3b01      	subs	r3, #1
 800345c:	041b      	lsls	r3, r3, #16
 800345e:	431a      	orrs	r2, r3
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003464:	061b      	lsls	r3, r3, #24
 8003466:	491b      	ldr	r1, [pc, #108]	; (80034d4 <HAL_RCC_OscConfig+0x470>)
 8003468:	4313      	orrs	r3, r2
 800346a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800346c:	4b1b      	ldr	r3, [pc, #108]	; (80034dc <HAL_RCC_OscConfig+0x478>)
 800346e:	2201      	movs	r2, #1
 8003470:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003472:	f7fe ff0b 	bl	800228c <HAL_GetTick>
 8003476:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003478:	e008      	b.n	800348c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800347a:	f7fe ff07 	bl	800228c <HAL_GetTick>
 800347e:	4602      	mov	r2, r0
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	1ad3      	subs	r3, r2, r3
 8003484:	2b02      	cmp	r3, #2
 8003486:	d901      	bls.n	800348c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003488:	2303      	movs	r3, #3
 800348a:	e05c      	b.n	8003546 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800348c:	4b11      	ldr	r3, [pc, #68]	; (80034d4 <HAL_RCC_OscConfig+0x470>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003494:	2b00      	cmp	r3, #0
 8003496:	d0f0      	beq.n	800347a <HAL_RCC_OscConfig+0x416>
 8003498:	e054      	b.n	8003544 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800349a:	4b10      	ldr	r3, [pc, #64]	; (80034dc <HAL_RCC_OscConfig+0x478>)
 800349c:	2200      	movs	r2, #0
 800349e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034a0:	f7fe fef4 	bl	800228c <HAL_GetTick>
 80034a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034a6:	e008      	b.n	80034ba <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034a8:	f7fe fef0 	bl	800228c <HAL_GetTick>
 80034ac:	4602      	mov	r2, r0
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	2b02      	cmp	r3, #2
 80034b4:	d901      	bls.n	80034ba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80034b6:	2303      	movs	r3, #3
 80034b8:	e045      	b.n	8003546 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034ba:	4b06      	ldr	r3, [pc, #24]	; (80034d4 <HAL_RCC_OscConfig+0x470>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d1f0      	bne.n	80034a8 <HAL_RCC_OscConfig+0x444>
 80034c6:	e03d      	b.n	8003544 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	699b      	ldr	r3, [r3, #24]
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d107      	bne.n	80034e0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	e038      	b.n	8003546 <HAL_RCC_OscConfig+0x4e2>
 80034d4:	40023800 	.word	0x40023800
 80034d8:	40007000 	.word	0x40007000
 80034dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80034e0:	4b1b      	ldr	r3, [pc, #108]	; (8003550 <HAL_RCC_OscConfig+0x4ec>)
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	699b      	ldr	r3, [r3, #24]
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	d028      	beq.n	8003540 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d121      	bne.n	8003540 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003506:	429a      	cmp	r2, r3
 8003508:	d11a      	bne.n	8003540 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800350a:	68fa      	ldr	r2, [r7, #12]
 800350c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003510:	4013      	ands	r3, r2
 8003512:	687a      	ldr	r2, [r7, #4]
 8003514:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003516:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003518:	4293      	cmp	r3, r2
 800351a:	d111      	bne.n	8003540 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003526:	085b      	lsrs	r3, r3, #1
 8003528:	3b01      	subs	r3, #1
 800352a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800352c:	429a      	cmp	r2, r3
 800352e:	d107      	bne.n	8003540 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800353a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800353c:	429a      	cmp	r2, r3
 800353e:	d001      	beq.n	8003544 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	e000      	b.n	8003546 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003544:	2300      	movs	r3, #0
}
 8003546:	4618      	mov	r0, r3
 8003548:	3718      	adds	r7, #24
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop
 8003550:	40023800 	.word	0x40023800

08003554 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b084      	sub	sp, #16
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
 800355c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d101      	bne.n	8003568 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	e0cc      	b.n	8003702 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003568:	4b68      	ldr	r3, [pc, #416]	; (800370c <HAL_RCC_ClockConfig+0x1b8>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 0307 	and.w	r3, r3, #7
 8003570:	683a      	ldr	r2, [r7, #0]
 8003572:	429a      	cmp	r2, r3
 8003574:	d90c      	bls.n	8003590 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003576:	4b65      	ldr	r3, [pc, #404]	; (800370c <HAL_RCC_ClockConfig+0x1b8>)
 8003578:	683a      	ldr	r2, [r7, #0]
 800357a:	b2d2      	uxtb	r2, r2
 800357c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800357e:	4b63      	ldr	r3, [pc, #396]	; (800370c <HAL_RCC_ClockConfig+0x1b8>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 0307 	and.w	r3, r3, #7
 8003586:	683a      	ldr	r2, [r7, #0]
 8003588:	429a      	cmp	r2, r3
 800358a:	d001      	beq.n	8003590 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e0b8      	b.n	8003702 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 0302 	and.w	r3, r3, #2
 8003598:	2b00      	cmp	r3, #0
 800359a:	d020      	beq.n	80035de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 0304 	and.w	r3, r3, #4
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d005      	beq.n	80035b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035a8:	4b59      	ldr	r3, [pc, #356]	; (8003710 <HAL_RCC_ClockConfig+0x1bc>)
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	4a58      	ldr	r2, [pc, #352]	; (8003710 <HAL_RCC_ClockConfig+0x1bc>)
 80035ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80035b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 0308 	and.w	r3, r3, #8
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d005      	beq.n	80035cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035c0:	4b53      	ldr	r3, [pc, #332]	; (8003710 <HAL_RCC_ClockConfig+0x1bc>)
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	4a52      	ldr	r2, [pc, #328]	; (8003710 <HAL_RCC_ClockConfig+0x1bc>)
 80035c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80035ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035cc:	4b50      	ldr	r3, [pc, #320]	; (8003710 <HAL_RCC_ClockConfig+0x1bc>)
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	494d      	ldr	r1, [pc, #308]	; (8003710 <HAL_RCC_ClockConfig+0x1bc>)
 80035da:	4313      	orrs	r3, r2
 80035dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 0301 	and.w	r3, r3, #1
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d044      	beq.n	8003674 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d107      	bne.n	8003602 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035f2:	4b47      	ldr	r3, [pc, #284]	; (8003710 <HAL_RCC_ClockConfig+0x1bc>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d119      	bne.n	8003632 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e07f      	b.n	8003702 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	2b02      	cmp	r3, #2
 8003608:	d003      	beq.n	8003612 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800360e:	2b03      	cmp	r3, #3
 8003610:	d107      	bne.n	8003622 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003612:	4b3f      	ldr	r3, [pc, #252]	; (8003710 <HAL_RCC_ClockConfig+0x1bc>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d109      	bne.n	8003632 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e06f      	b.n	8003702 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003622:	4b3b      	ldr	r3, [pc, #236]	; (8003710 <HAL_RCC_ClockConfig+0x1bc>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 0302 	and.w	r3, r3, #2
 800362a:	2b00      	cmp	r3, #0
 800362c:	d101      	bne.n	8003632 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e067      	b.n	8003702 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003632:	4b37      	ldr	r3, [pc, #220]	; (8003710 <HAL_RCC_ClockConfig+0x1bc>)
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	f023 0203 	bic.w	r2, r3, #3
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	4934      	ldr	r1, [pc, #208]	; (8003710 <HAL_RCC_ClockConfig+0x1bc>)
 8003640:	4313      	orrs	r3, r2
 8003642:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003644:	f7fe fe22 	bl	800228c <HAL_GetTick>
 8003648:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800364a:	e00a      	b.n	8003662 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800364c:	f7fe fe1e 	bl	800228c <HAL_GetTick>
 8003650:	4602      	mov	r2, r0
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	f241 3288 	movw	r2, #5000	; 0x1388
 800365a:	4293      	cmp	r3, r2
 800365c:	d901      	bls.n	8003662 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800365e:	2303      	movs	r3, #3
 8003660:	e04f      	b.n	8003702 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003662:	4b2b      	ldr	r3, [pc, #172]	; (8003710 <HAL_RCC_ClockConfig+0x1bc>)
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	f003 020c 	and.w	r2, r3, #12
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	429a      	cmp	r2, r3
 8003672:	d1eb      	bne.n	800364c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003674:	4b25      	ldr	r3, [pc, #148]	; (800370c <HAL_RCC_ClockConfig+0x1b8>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 0307 	and.w	r3, r3, #7
 800367c:	683a      	ldr	r2, [r7, #0]
 800367e:	429a      	cmp	r2, r3
 8003680:	d20c      	bcs.n	800369c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003682:	4b22      	ldr	r3, [pc, #136]	; (800370c <HAL_RCC_ClockConfig+0x1b8>)
 8003684:	683a      	ldr	r2, [r7, #0]
 8003686:	b2d2      	uxtb	r2, r2
 8003688:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800368a:	4b20      	ldr	r3, [pc, #128]	; (800370c <HAL_RCC_ClockConfig+0x1b8>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 0307 	and.w	r3, r3, #7
 8003692:	683a      	ldr	r2, [r7, #0]
 8003694:	429a      	cmp	r2, r3
 8003696:	d001      	beq.n	800369c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	e032      	b.n	8003702 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 0304 	and.w	r3, r3, #4
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d008      	beq.n	80036ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036a8:	4b19      	ldr	r3, [pc, #100]	; (8003710 <HAL_RCC_ClockConfig+0x1bc>)
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	4916      	ldr	r1, [pc, #88]	; (8003710 <HAL_RCC_ClockConfig+0x1bc>)
 80036b6:	4313      	orrs	r3, r2
 80036b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 0308 	and.w	r3, r3, #8
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d009      	beq.n	80036da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036c6:	4b12      	ldr	r3, [pc, #72]	; (8003710 <HAL_RCC_ClockConfig+0x1bc>)
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	691b      	ldr	r3, [r3, #16]
 80036d2:	00db      	lsls	r3, r3, #3
 80036d4:	490e      	ldr	r1, [pc, #56]	; (8003710 <HAL_RCC_ClockConfig+0x1bc>)
 80036d6:	4313      	orrs	r3, r2
 80036d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80036da:	f000 f821 	bl	8003720 <HAL_RCC_GetSysClockFreq>
 80036de:	4602      	mov	r2, r0
 80036e0:	4b0b      	ldr	r3, [pc, #44]	; (8003710 <HAL_RCC_ClockConfig+0x1bc>)
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	091b      	lsrs	r3, r3, #4
 80036e6:	f003 030f 	and.w	r3, r3, #15
 80036ea:	490a      	ldr	r1, [pc, #40]	; (8003714 <HAL_RCC_ClockConfig+0x1c0>)
 80036ec:	5ccb      	ldrb	r3, [r1, r3]
 80036ee:	fa22 f303 	lsr.w	r3, r2, r3
 80036f2:	4a09      	ldr	r2, [pc, #36]	; (8003718 <HAL_RCC_ClockConfig+0x1c4>)
 80036f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80036f6:	4b09      	ldr	r3, [pc, #36]	; (800371c <HAL_RCC_ClockConfig+0x1c8>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4618      	mov	r0, r3
 80036fc:	f7fe fd82 	bl	8002204 <HAL_InitTick>

  return HAL_OK;
 8003700:	2300      	movs	r3, #0
}
 8003702:	4618      	mov	r0, r3
 8003704:	3710      	adds	r7, #16
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
 800370a:	bf00      	nop
 800370c:	40023c00 	.word	0x40023c00
 8003710:	40023800 	.word	0x40023800
 8003714:	08005438 	.word	0x08005438
 8003718:	20000040 	.word	0x20000040
 800371c:	20000044 	.word	0x20000044

08003720 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003720:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003724:	b094      	sub	sp, #80	; 0x50
 8003726:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003728:	2300      	movs	r3, #0
 800372a:	647b      	str	r3, [r7, #68]	; 0x44
 800372c:	2300      	movs	r3, #0
 800372e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003730:	2300      	movs	r3, #0
 8003732:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003734:	2300      	movs	r3, #0
 8003736:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003738:	4b79      	ldr	r3, [pc, #484]	; (8003920 <HAL_RCC_GetSysClockFreq+0x200>)
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	f003 030c 	and.w	r3, r3, #12
 8003740:	2b08      	cmp	r3, #8
 8003742:	d00d      	beq.n	8003760 <HAL_RCC_GetSysClockFreq+0x40>
 8003744:	2b08      	cmp	r3, #8
 8003746:	f200 80e1 	bhi.w	800390c <HAL_RCC_GetSysClockFreq+0x1ec>
 800374a:	2b00      	cmp	r3, #0
 800374c:	d002      	beq.n	8003754 <HAL_RCC_GetSysClockFreq+0x34>
 800374e:	2b04      	cmp	r3, #4
 8003750:	d003      	beq.n	800375a <HAL_RCC_GetSysClockFreq+0x3a>
 8003752:	e0db      	b.n	800390c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003754:	4b73      	ldr	r3, [pc, #460]	; (8003924 <HAL_RCC_GetSysClockFreq+0x204>)
 8003756:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003758:	e0db      	b.n	8003912 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800375a:	4b73      	ldr	r3, [pc, #460]	; (8003928 <HAL_RCC_GetSysClockFreq+0x208>)
 800375c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800375e:	e0d8      	b.n	8003912 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003760:	4b6f      	ldr	r3, [pc, #444]	; (8003920 <HAL_RCC_GetSysClockFreq+0x200>)
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003768:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800376a:	4b6d      	ldr	r3, [pc, #436]	; (8003920 <HAL_RCC_GetSysClockFreq+0x200>)
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003772:	2b00      	cmp	r3, #0
 8003774:	d063      	beq.n	800383e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003776:	4b6a      	ldr	r3, [pc, #424]	; (8003920 <HAL_RCC_GetSysClockFreq+0x200>)
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	099b      	lsrs	r3, r3, #6
 800377c:	2200      	movs	r2, #0
 800377e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003780:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003784:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003788:	633b      	str	r3, [r7, #48]	; 0x30
 800378a:	2300      	movs	r3, #0
 800378c:	637b      	str	r3, [r7, #52]	; 0x34
 800378e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003792:	4622      	mov	r2, r4
 8003794:	462b      	mov	r3, r5
 8003796:	f04f 0000 	mov.w	r0, #0
 800379a:	f04f 0100 	mov.w	r1, #0
 800379e:	0159      	lsls	r1, r3, #5
 80037a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037a4:	0150      	lsls	r0, r2, #5
 80037a6:	4602      	mov	r2, r0
 80037a8:	460b      	mov	r3, r1
 80037aa:	4621      	mov	r1, r4
 80037ac:	1a51      	subs	r1, r2, r1
 80037ae:	6139      	str	r1, [r7, #16]
 80037b0:	4629      	mov	r1, r5
 80037b2:	eb63 0301 	sbc.w	r3, r3, r1
 80037b6:	617b      	str	r3, [r7, #20]
 80037b8:	f04f 0200 	mov.w	r2, #0
 80037bc:	f04f 0300 	mov.w	r3, #0
 80037c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80037c4:	4659      	mov	r1, fp
 80037c6:	018b      	lsls	r3, r1, #6
 80037c8:	4651      	mov	r1, sl
 80037ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80037ce:	4651      	mov	r1, sl
 80037d0:	018a      	lsls	r2, r1, #6
 80037d2:	4651      	mov	r1, sl
 80037d4:	ebb2 0801 	subs.w	r8, r2, r1
 80037d8:	4659      	mov	r1, fp
 80037da:	eb63 0901 	sbc.w	r9, r3, r1
 80037de:	f04f 0200 	mov.w	r2, #0
 80037e2:	f04f 0300 	mov.w	r3, #0
 80037e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80037ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80037ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80037f2:	4690      	mov	r8, r2
 80037f4:	4699      	mov	r9, r3
 80037f6:	4623      	mov	r3, r4
 80037f8:	eb18 0303 	adds.w	r3, r8, r3
 80037fc:	60bb      	str	r3, [r7, #8]
 80037fe:	462b      	mov	r3, r5
 8003800:	eb49 0303 	adc.w	r3, r9, r3
 8003804:	60fb      	str	r3, [r7, #12]
 8003806:	f04f 0200 	mov.w	r2, #0
 800380a:	f04f 0300 	mov.w	r3, #0
 800380e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003812:	4629      	mov	r1, r5
 8003814:	024b      	lsls	r3, r1, #9
 8003816:	4621      	mov	r1, r4
 8003818:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800381c:	4621      	mov	r1, r4
 800381e:	024a      	lsls	r2, r1, #9
 8003820:	4610      	mov	r0, r2
 8003822:	4619      	mov	r1, r3
 8003824:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003826:	2200      	movs	r2, #0
 8003828:	62bb      	str	r3, [r7, #40]	; 0x28
 800382a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800382c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003830:	f7fd fa14 	bl	8000c5c <__aeabi_uldivmod>
 8003834:	4602      	mov	r2, r0
 8003836:	460b      	mov	r3, r1
 8003838:	4613      	mov	r3, r2
 800383a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800383c:	e058      	b.n	80038f0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800383e:	4b38      	ldr	r3, [pc, #224]	; (8003920 <HAL_RCC_GetSysClockFreq+0x200>)
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	099b      	lsrs	r3, r3, #6
 8003844:	2200      	movs	r2, #0
 8003846:	4618      	mov	r0, r3
 8003848:	4611      	mov	r1, r2
 800384a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800384e:	623b      	str	r3, [r7, #32]
 8003850:	2300      	movs	r3, #0
 8003852:	627b      	str	r3, [r7, #36]	; 0x24
 8003854:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003858:	4642      	mov	r2, r8
 800385a:	464b      	mov	r3, r9
 800385c:	f04f 0000 	mov.w	r0, #0
 8003860:	f04f 0100 	mov.w	r1, #0
 8003864:	0159      	lsls	r1, r3, #5
 8003866:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800386a:	0150      	lsls	r0, r2, #5
 800386c:	4602      	mov	r2, r0
 800386e:	460b      	mov	r3, r1
 8003870:	4641      	mov	r1, r8
 8003872:	ebb2 0a01 	subs.w	sl, r2, r1
 8003876:	4649      	mov	r1, r9
 8003878:	eb63 0b01 	sbc.w	fp, r3, r1
 800387c:	f04f 0200 	mov.w	r2, #0
 8003880:	f04f 0300 	mov.w	r3, #0
 8003884:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003888:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800388c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003890:	ebb2 040a 	subs.w	r4, r2, sl
 8003894:	eb63 050b 	sbc.w	r5, r3, fp
 8003898:	f04f 0200 	mov.w	r2, #0
 800389c:	f04f 0300 	mov.w	r3, #0
 80038a0:	00eb      	lsls	r3, r5, #3
 80038a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80038a6:	00e2      	lsls	r2, r4, #3
 80038a8:	4614      	mov	r4, r2
 80038aa:	461d      	mov	r5, r3
 80038ac:	4643      	mov	r3, r8
 80038ae:	18e3      	adds	r3, r4, r3
 80038b0:	603b      	str	r3, [r7, #0]
 80038b2:	464b      	mov	r3, r9
 80038b4:	eb45 0303 	adc.w	r3, r5, r3
 80038b8:	607b      	str	r3, [r7, #4]
 80038ba:	f04f 0200 	mov.w	r2, #0
 80038be:	f04f 0300 	mov.w	r3, #0
 80038c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80038c6:	4629      	mov	r1, r5
 80038c8:	028b      	lsls	r3, r1, #10
 80038ca:	4621      	mov	r1, r4
 80038cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80038d0:	4621      	mov	r1, r4
 80038d2:	028a      	lsls	r2, r1, #10
 80038d4:	4610      	mov	r0, r2
 80038d6:	4619      	mov	r1, r3
 80038d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038da:	2200      	movs	r2, #0
 80038dc:	61bb      	str	r3, [r7, #24]
 80038de:	61fa      	str	r2, [r7, #28]
 80038e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80038e4:	f7fd f9ba 	bl	8000c5c <__aeabi_uldivmod>
 80038e8:	4602      	mov	r2, r0
 80038ea:	460b      	mov	r3, r1
 80038ec:	4613      	mov	r3, r2
 80038ee:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80038f0:	4b0b      	ldr	r3, [pc, #44]	; (8003920 <HAL_RCC_GetSysClockFreq+0x200>)
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	0c1b      	lsrs	r3, r3, #16
 80038f6:	f003 0303 	and.w	r3, r3, #3
 80038fa:	3301      	adds	r3, #1
 80038fc:	005b      	lsls	r3, r3, #1
 80038fe:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003900:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003902:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003904:	fbb2 f3f3 	udiv	r3, r2, r3
 8003908:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800390a:	e002      	b.n	8003912 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800390c:	4b05      	ldr	r3, [pc, #20]	; (8003924 <HAL_RCC_GetSysClockFreq+0x204>)
 800390e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003910:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003912:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003914:	4618      	mov	r0, r3
 8003916:	3750      	adds	r7, #80	; 0x50
 8003918:	46bd      	mov	sp, r7
 800391a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800391e:	bf00      	nop
 8003920:	40023800 	.word	0x40023800
 8003924:	00f42400 	.word	0x00f42400
 8003928:	007a1200 	.word	0x007a1200

0800392c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800392c:	b480      	push	{r7}
 800392e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003930:	4b03      	ldr	r3, [pc, #12]	; (8003940 <HAL_RCC_GetHCLKFreq+0x14>)
 8003932:	681b      	ldr	r3, [r3, #0]
}
 8003934:	4618      	mov	r0, r3
 8003936:	46bd      	mov	sp, r7
 8003938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393c:	4770      	bx	lr
 800393e:	bf00      	nop
 8003940:	20000040 	.word	0x20000040

08003944 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003948:	f7ff fff0 	bl	800392c <HAL_RCC_GetHCLKFreq>
 800394c:	4602      	mov	r2, r0
 800394e:	4b05      	ldr	r3, [pc, #20]	; (8003964 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	0a9b      	lsrs	r3, r3, #10
 8003954:	f003 0307 	and.w	r3, r3, #7
 8003958:	4903      	ldr	r1, [pc, #12]	; (8003968 <HAL_RCC_GetPCLK1Freq+0x24>)
 800395a:	5ccb      	ldrb	r3, [r1, r3]
 800395c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003960:	4618      	mov	r0, r3
 8003962:	bd80      	pop	{r7, pc}
 8003964:	40023800 	.word	0x40023800
 8003968:	08005448 	.word	0x08005448

0800396c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003970:	f7ff ffdc 	bl	800392c <HAL_RCC_GetHCLKFreq>
 8003974:	4602      	mov	r2, r0
 8003976:	4b05      	ldr	r3, [pc, #20]	; (800398c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	0b5b      	lsrs	r3, r3, #13
 800397c:	f003 0307 	and.w	r3, r3, #7
 8003980:	4903      	ldr	r1, [pc, #12]	; (8003990 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003982:	5ccb      	ldrb	r3, [r1, r3]
 8003984:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003988:	4618      	mov	r0, r3
 800398a:	bd80      	pop	{r7, pc}
 800398c:	40023800 	.word	0x40023800
 8003990:	08005448 	.word	0x08005448

08003994 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b082      	sub	sp, #8
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d101      	bne.n	80039a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	e041      	b.n	8003a2a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d106      	bne.n	80039c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2200      	movs	r2, #0
 80039b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f7fe fab4 	bl	8001f28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2202      	movs	r2, #2
 80039c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	3304      	adds	r3, #4
 80039d0:	4619      	mov	r1, r3
 80039d2:	4610      	mov	r0, r2
 80039d4:	f000 faa0 	bl	8003f18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2201      	movs	r2, #1
 80039dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2201      	movs	r2, #1
 80039ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2201      	movs	r2, #1
 80039f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2201      	movs	r2, #1
 80039fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2201      	movs	r2, #1
 8003a04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2201      	movs	r2, #1
 8003a14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2201      	movs	r2, #1
 8003a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a28:	2300      	movs	r3, #0
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3708      	adds	r7, #8
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
	...

08003a34 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b085      	sub	sp, #20
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a42:	b2db      	uxtb	r3, r3
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d001      	beq.n	8003a4c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e04e      	b.n	8003aea <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2202      	movs	r2, #2
 8003a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	68da      	ldr	r2, [r3, #12]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f042 0201 	orr.w	r2, r2, #1
 8003a62:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a23      	ldr	r2, [pc, #140]	; (8003af8 <HAL_TIM_Base_Start_IT+0xc4>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d022      	beq.n	8003ab4 <HAL_TIM_Base_Start_IT+0x80>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a76:	d01d      	beq.n	8003ab4 <HAL_TIM_Base_Start_IT+0x80>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a1f      	ldr	r2, [pc, #124]	; (8003afc <HAL_TIM_Base_Start_IT+0xc8>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d018      	beq.n	8003ab4 <HAL_TIM_Base_Start_IT+0x80>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a1e      	ldr	r2, [pc, #120]	; (8003b00 <HAL_TIM_Base_Start_IT+0xcc>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d013      	beq.n	8003ab4 <HAL_TIM_Base_Start_IT+0x80>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a1c      	ldr	r2, [pc, #112]	; (8003b04 <HAL_TIM_Base_Start_IT+0xd0>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d00e      	beq.n	8003ab4 <HAL_TIM_Base_Start_IT+0x80>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a1b      	ldr	r2, [pc, #108]	; (8003b08 <HAL_TIM_Base_Start_IT+0xd4>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d009      	beq.n	8003ab4 <HAL_TIM_Base_Start_IT+0x80>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a19      	ldr	r2, [pc, #100]	; (8003b0c <HAL_TIM_Base_Start_IT+0xd8>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d004      	beq.n	8003ab4 <HAL_TIM_Base_Start_IT+0x80>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a18      	ldr	r2, [pc, #96]	; (8003b10 <HAL_TIM_Base_Start_IT+0xdc>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d111      	bne.n	8003ad8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	f003 0307 	and.w	r3, r3, #7
 8003abe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2b06      	cmp	r3, #6
 8003ac4:	d010      	beq.n	8003ae8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f042 0201 	orr.w	r2, r2, #1
 8003ad4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ad6:	e007      	b.n	8003ae8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f042 0201 	orr.w	r2, r2, #1
 8003ae6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ae8:	2300      	movs	r3, #0
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3714      	adds	r7, #20
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr
 8003af6:	bf00      	nop
 8003af8:	40010000 	.word	0x40010000
 8003afc:	40000400 	.word	0x40000400
 8003b00:	40000800 	.word	0x40000800
 8003b04:	40000c00 	.word	0x40000c00
 8003b08:	40010400 	.word	0x40010400
 8003b0c:	40014000 	.word	0x40014000
 8003b10:	40001800 	.word	0x40001800

08003b14 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b082      	sub	sp, #8
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	691b      	ldr	r3, [r3, #16]
 8003b22:	f003 0302 	and.w	r3, r3, #2
 8003b26:	2b02      	cmp	r3, #2
 8003b28:	d122      	bne.n	8003b70 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	f003 0302 	and.w	r3, r3, #2
 8003b34:	2b02      	cmp	r3, #2
 8003b36:	d11b      	bne.n	8003b70 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f06f 0202 	mvn.w	r2, #2
 8003b40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2201      	movs	r2, #1
 8003b46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	699b      	ldr	r3, [r3, #24]
 8003b4e:	f003 0303 	and.w	r3, r3, #3
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d003      	beq.n	8003b5e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f000 f9bf 	bl	8003eda <HAL_TIM_IC_CaptureCallback>
 8003b5c:	e005      	b.n	8003b6a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f000 f9b1 	bl	8003ec6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	f000 f9c2 	bl	8003eee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	691b      	ldr	r3, [r3, #16]
 8003b76:	f003 0304 	and.w	r3, r3, #4
 8003b7a:	2b04      	cmp	r3, #4
 8003b7c:	d122      	bne.n	8003bc4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	f003 0304 	and.w	r3, r3, #4
 8003b88:	2b04      	cmp	r3, #4
 8003b8a:	d11b      	bne.n	8003bc4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f06f 0204 	mvn.w	r2, #4
 8003b94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2202      	movs	r2, #2
 8003b9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	699b      	ldr	r3, [r3, #24]
 8003ba2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d003      	beq.n	8003bb2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f000 f995 	bl	8003eda <HAL_TIM_IC_CaptureCallback>
 8003bb0:	e005      	b.n	8003bbe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f000 f987 	bl	8003ec6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	f000 f998 	bl	8003eee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	691b      	ldr	r3, [r3, #16]
 8003bca:	f003 0308 	and.w	r3, r3, #8
 8003bce:	2b08      	cmp	r3, #8
 8003bd0:	d122      	bne.n	8003c18 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	f003 0308 	and.w	r3, r3, #8
 8003bdc:	2b08      	cmp	r3, #8
 8003bde:	d11b      	bne.n	8003c18 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f06f 0208 	mvn.w	r2, #8
 8003be8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2204      	movs	r2, #4
 8003bee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	69db      	ldr	r3, [r3, #28]
 8003bf6:	f003 0303 	and.w	r3, r3, #3
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d003      	beq.n	8003c06 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f000 f96b 	bl	8003eda <HAL_TIM_IC_CaptureCallback>
 8003c04:	e005      	b.n	8003c12 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f000 f95d 	bl	8003ec6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	f000 f96e 	bl	8003eee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2200      	movs	r2, #0
 8003c16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	691b      	ldr	r3, [r3, #16]
 8003c1e:	f003 0310 	and.w	r3, r3, #16
 8003c22:	2b10      	cmp	r3, #16
 8003c24:	d122      	bne.n	8003c6c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	f003 0310 	and.w	r3, r3, #16
 8003c30:	2b10      	cmp	r3, #16
 8003c32:	d11b      	bne.n	8003c6c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f06f 0210 	mvn.w	r2, #16
 8003c3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2208      	movs	r2, #8
 8003c42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	69db      	ldr	r3, [r3, #28]
 8003c4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d003      	beq.n	8003c5a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f000 f941 	bl	8003eda <HAL_TIM_IC_CaptureCallback>
 8003c58:	e005      	b.n	8003c66 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f000 f933 	bl	8003ec6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	f000 f944 	bl	8003eee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	691b      	ldr	r3, [r3, #16]
 8003c72:	f003 0301 	and.w	r3, r3, #1
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d10e      	bne.n	8003c98 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	68db      	ldr	r3, [r3, #12]
 8003c80:	f003 0301 	and.w	r3, r3, #1
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d107      	bne.n	8003c98 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f06f 0201 	mvn.w	r2, #1
 8003c90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f000 f90d 	bl	8003eb2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	691b      	ldr	r3, [r3, #16]
 8003c9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ca2:	2b80      	cmp	r3, #128	; 0x80
 8003ca4:	d10e      	bne.n	8003cc4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cb0:	2b80      	cmp	r3, #128	; 0x80
 8003cb2:	d107      	bne.n	8003cc4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003cbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f000 faea 	bl	8004298 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	691b      	ldr	r3, [r3, #16]
 8003cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cce:	2b40      	cmp	r3, #64	; 0x40
 8003cd0:	d10e      	bne.n	8003cf0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	68db      	ldr	r3, [r3, #12]
 8003cd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cdc:	2b40      	cmp	r3, #64	; 0x40
 8003cde:	d107      	bne.n	8003cf0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003ce8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f000 f909 	bl	8003f02 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	691b      	ldr	r3, [r3, #16]
 8003cf6:	f003 0320 	and.w	r3, r3, #32
 8003cfa:	2b20      	cmp	r3, #32
 8003cfc:	d10e      	bne.n	8003d1c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	68db      	ldr	r3, [r3, #12]
 8003d04:	f003 0320 	and.w	r3, r3, #32
 8003d08:	2b20      	cmp	r3, #32
 8003d0a:	d107      	bne.n	8003d1c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f06f 0220 	mvn.w	r2, #32
 8003d14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f000 fab4 	bl	8004284 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d1c:	bf00      	nop
 8003d1e:	3708      	adds	r7, #8
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}

08003d24 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b084      	sub	sp, #16
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
 8003d2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d101      	bne.n	8003d40 <HAL_TIM_ConfigClockSource+0x1c>
 8003d3c:	2302      	movs	r3, #2
 8003d3e:	e0b4      	b.n	8003eaa <HAL_TIM_ConfigClockSource+0x186>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2201      	movs	r2, #1
 8003d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2202      	movs	r2, #2
 8003d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003d5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d66:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	68ba      	ldr	r2, [r7, #8]
 8003d6e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d78:	d03e      	beq.n	8003df8 <HAL_TIM_ConfigClockSource+0xd4>
 8003d7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d7e:	f200 8087 	bhi.w	8003e90 <HAL_TIM_ConfigClockSource+0x16c>
 8003d82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d86:	f000 8086 	beq.w	8003e96 <HAL_TIM_ConfigClockSource+0x172>
 8003d8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d8e:	d87f      	bhi.n	8003e90 <HAL_TIM_ConfigClockSource+0x16c>
 8003d90:	2b70      	cmp	r3, #112	; 0x70
 8003d92:	d01a      	beq.n	8003dca <HAL_TIM_ConfigClockSource+0xa6>
 8003d94:	2b70      	cmp	r3, #112	; 0x70
 8003d96:	d87b      	bhi.n	8003e90 <HAL_TIM_ConfigClockSource+0x16c>
 8003d98:	2b60      	cmp	r3, #96	; 0x60
 8003d9a:	d050      	beq.n	8003e3e <HAL_TIM_ConfigClockSource+0x11a>
 8003d9c:	2b60      	cmp	r3, #96	; 0x60
 8003d9e:	d877      	bhi.n	8003e90 <HAL_TIM_ConfigClockSource+0x16c>
 8003da0:	2b50      	cmp	r3, #80	; 0x50
 8003da2:	d03c      	beq.n	8003e1e <HAL_TIM_ConfigClockSource+0xfa>
 8003da4:	2b50      	cmp	r3, #80	; 0x50
 8003da6:	d873      	bhi.n	8003e90 <HAL_TIM_ConfigClockSource+0x16c>
 8003da8:	2b40      	cmp	r3, #64	; 0x40
 8003daa:	d058      	beq.n	8003e5e <HAL_TIM_ConfigClockSource+0x13a>
 8003dac:	2b40      	cmp	r3, #64	; 0x40
 8003dae:	d86f      	bhi.n	8003e90 <HAL_TIM_ConfigClockSource+0x16c>
 8003db0:	2b30      	cmp	r3, #48	; 0x30
 8003db2:	d064      	beq.n	8003e7e <HAL_TIM_ConfigClockSource+0x15a>
 8003db4:	2b30      	cmp	r3, #48	; 0x30
 8003db6:	d86b      	bhi.n	8003e90 <HAL_TIM_ConfigClockSource+0x16c>
 8003db8:	2b20      	cmp	r3, #32
 8003dba:	d060      	beq.n	8003e7e <HAL_TIM_ConfigClockSource+0x15a>
 8003dbc:	2b20      	cmp	r3, #32
 8003dbe:	d867      	bhi.n	8003e90 <HAL_TIM_ConfigClockSource+0x16c>
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d05c      	beq.n	8003e7e <HAL_TIM_ConfigClockSource+0x15a>
 8003dc4:	2b10      	cmp	r3, #16
 8003dc6:	d05a      	beq.n	8003e7e <HAL_TIM_ConfigClockSource+0x15a>
 8003dc8:	e062      	b.n	8003e90 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6818      	ldr	r0, [r3, #0]
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	6899      	ldr	r1, [r3, #8]
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	685a      	ldr	r2, [r3, #4]
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	68db      	ldr	r3, [r3, #12]
 8003dda:	f000 f9b7 	bl	800414c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003dec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	68ba      	ldr	r2, [r7, #8]
 8003df4:	609a      	str	r2, [r3, #8]
      break;
 8003df6:	e04f      	b.n	8003e98 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6818      	ldr	r0, [r3, #0]
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	6899      	ldr	r1, [r3, #8]
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	685a      	ldr	r2, [r3, #4]
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	68db      	ldr	r3, [r3, #12]
 8003e08:	f000 f9a0 	bl	800414c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	689a      	ldr	r2, [r3, #8]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e1a:	609a      	str	r2, [r3, #8]
      break;
 8003e1c:	e03c      	b.n	8003e98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6818      	ldr	r0, [r3, #0]
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	6859      	ldr	r1, [r3, #4]
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	68db      	ldr	r3, [r3, #12]
 8003e2a:	461a      	mov	r2, r3
 8003e2c:	f000 f914 	bl	8004058 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	2150      	movs	r1, #80	; 0x50
 8003e36:	4618      	mov	r0, r3
 8003e38:	f000 f96d 	bl	8004116 <TIM_ITRx_SetConfig>
      break;
 8003e3c:	e02c      	b.n	8003e98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6818      	ldr	r0, [r3, #0]
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	6859      	ldr	r1, [r3, #4]
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	68db      	ldr	r3, [r3, #12]
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	f000 f933 	bl	80040b6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	2160      	movs	r1, #96	; 0x60
 8003e56:	4618      	mov	r0, r3
 8003e58:	f000 f95d 	bl	8004116 <TIM_ITRx_SetConfig>
      break;
 8003e5c:	e01c      	b.n	8003e98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6818      	ldr	r0, [r3, #0]
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	6859      	ldr	r1, [r3, #4]
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	68db      	ldr	r3, [r3, #12]
 8003e6a:	461a      	mov	r2, r3
 8003e6c:	f000 f8f4 	bl	8004058 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	2140      	movs	r1, #64	; 0x40
 8003e76:	4618      	mov	r0, r3
 8003e78:	f000 f94d 	bl	8004116 <TIM_ITRx_SetConfig>
      break;
 8003e7c:	e00c      	b.n	8003e98 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4619      	mov	r1, r3
 8003e88:	4610      	mov	r0, r2
 8003e8a:	f000 f944 	bl	8004116 <TIM_ITRx_SetConfig>
      break;
 8003e8e:	e003      	b.n	8003e98 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	73fb      	strb	r3, [r7, #15]
      break;
 8003e94:	e000      	b.n	8003e98 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003e96:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003ea8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3710      	adds	r7, #16
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}

08003eb2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003eb2:	b480      	push	{r7}
 8003eb4:	b083      	sub	sp, #12
 8003eb6:	af00      	add	r7, sp, #0
 8003eb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003eba:	bf00      	nop
 8003ebc:	370c      	adds	r7, #12
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr

08003ec6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ec6:	b480      	push	{r7}
 8003ec8:	b083      	sub	sp, #12
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ece:	bf00      	nop
 8003ed0:	370c      	adds	r7, #12
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr

08003eda <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003eda:	b480      	push	{r7}
 8003edc:	b083      	sub	sp, #12
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ee2:	bf00      	nop
 8003ee4:	370c      	adds	r7, #12
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr

08003eee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003eee:	b480      	push	{r7}
 8003ef0:	b083      	sub	sp, #12
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ef6:	bf00      	nop
 8003ef8:	370c      	adds	r7, #12
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr

08003f02 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f02:	b480      	push	{r7}
 8003f04:	b083      	sub	sp, #12
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f0a:	bf00      	nop
 8003f0c:	370c      	adds	r7, #12
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr
	...

08003f18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b085      	sub	sp, #20
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
 8003f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	4a40      	ldr	r2, [pc, #256]	; (800402c <TIM_Base_SetConfig+0x114>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d013      	beq.n	8003f58 <TIM_Base_SetConfig+0x40>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f36:	d00f      	beq.n	8003f58 <TIM_Base_SetConfig+0x40>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	4a3d      	ldr	r2, [pc, #244]	; (8004030 <TIM_Base_SetConfig+0x118>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d00b      	beq.n	8003f58 <TIM_Base_SetConfig+0x40>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	4a3c      	ldr	r2, [pc, #240]	; (8004034 <TIM_Base_SetConfig+0x11c>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d007      	beq.n	8003f58 <TIM_Base_SetConfig+0x40>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	4a3b      	ldr	r2, [pc, #236]	; (8004038 <TIM_Base_SetConfig+0x120>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d003      	beq.n	8003f58 <TIM_Base_SetConfig+0x40>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	4a3a      	ldr	r2, [pc, #232]	; (800403c <TIM_Base_SetConfig+0x124>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d108      	bne.n	8003f6a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	68fa      	ldr	r2, [r7, #12]
 8003f66:	4313      	orrs	r3, r2
 8003f68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	4a2f      	ldr	r2, [pc, #188]	; (800402c <TIM_Base_SetConfig+0x114>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d02b      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f78:	d027      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	4a2c      	ldr	r2, [pc, #176]	; (8004030 <TIM_Base_SetConfig+0x118>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d023      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	4a2b      	ldr	r2, [pc, #172]	; (8004034 <TIM_Base_SetConfig+0x11c>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d01f      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4a2a      	ldr	r2, [pc, #168]	; (8004038 <TIM_Base_SetConfig+0x120>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d01b      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4a29      	ldr	r2, [pc, #164]	; (800403c <TIM_Base_SetConfig+0x124>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d017      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4a28      	ldr	r2, [pc, #160]	; (8004040 <TIM_Base_SetConfig+0x128>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d013      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	4a27      	ldr	r2, [pc, #156]	; (8004044 <TIM_Base_SetConfig+0x12c>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d00f      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	4a26      	ldr	r2, [pc, #152]	; (8004048 <TIM_Base_SetConfig+0x130>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d00b      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	4a25      	ldr	r2, [pc, #148]	; (800404c <TIM_Base_SetConfig+0x134>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d007      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4a24      	ldr	r2, [pc, #144]	; (8004050 <TIM_Base_SetConfig+0x138>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d003      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	4a23      	ldr	r2, [pc, #140]	; (8004054 <TIM_Base_SetConfig+0x13c>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d108      	bne.n	8003fdc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	68db      	ldr	r3, [r3, #12]
 8003fd6:	68fa      	ldr	r2, [r7, #12]
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	695b      	ldr	r3, [r3, #20]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	68fa      	ldr	r2, [r7, #12]
 8003fee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	689a      	ldr	r2, [r3, #8]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	4a0a      	ldr	r2, [pc, #40]	; (800402c <TIM_Base_SetConfig+0x114>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d003      	beq.n	8004010 <TIM_Base_SetConfig+0xf8>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	4a0c      	ldr	r2, [pc, #48]	; (800403c <TIM_Base_SetConfig+0x124>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d103      	bne.n	8004018 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	691a      	ldr	r2, [r3, #16]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2201      	movs	r2, #1
 800401c:	615a      	str	r2, [r3, #20]
}
 800401e:	bf00      	nop
 8004020:	3714      	adds	r7, #20
 8004022:	46bd      	mov	sp, r7
 8004024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004028:	4770      	bx	lr
 800402a:	bf00      	nop
 800402c:	40010000 	.word	0x40010000
 8004030:	40000400 	.word	0x40000400
 8004034:	40000800 	.word	0x40000800
 8004038:	40000c00 	.word	0x40000c00
 800403c:	40010400 	.word	0x40010400
 8004040:	40014000 	.word	0x40014000
 8004044:	40014400 	.word	0x40014400
 8004048:	40014800 	.word	0x40014800
 800404c:	40001800 	.word	0x40001800
 8004050:	40001c00 	.word	0x40001c00
 8004054:	40002000 	.word	0x40002000

08004058 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004058:	b480      	push	{r7}
 800405a:	b087      	sub	sp, #28
 800405c:	af00      	add	r7, sp, #0
 800405e:	60f8      	str	r0, [r7, #12]
 8004060:	60b9      	str	r1, [r7, #8]
 8004062:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	6a1b      	ldr	r3, [r3, #32]
 8004068:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	6a1b      	ldr	r3, [r3, #32]
 800406e:	f023 0201 	bic.w	r2, r3, #1
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	699b      	ldr	r3, [r3, #24]
 800407a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004082:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	011b      	lsls	r3, r3, #4
 8004088:	693a      	ldr	r2, [r7, #16]
 800408a:	4313      	orrs	r3, r2
 800408c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	f023 030a 	bic.w	r3, r3, #10
 8004094:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004096:	697a      	ldr	r2, [r7, #20]
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	4313      	orrs	r3, r2
 800409c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	693a      	ldr	r2, [r7, #16]
 80040a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	697a      	ldr	r2, [r7, #20]
 80040a8:	621a      	str	r2, [r3, #32]
}
 80040aa:	bf00      	nop
 80040ac:	371c      	adds	r7, #28
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr

080040b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040b6:	b480      	push	{r7}
 80040b8:	b087      	sub	sp, #28
 80040ba:	af00      	add	r7, sp, #0
 80040bc:	60f8      	str	r0, [r7, #12]
 80040be:	60b9      	str	r1, [r7, #8]
 80040c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	6a1b      	ldr	r3, [r3, #32]
 80040c6:	f023 0210 	bic.w	r2, r3, #16
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	699b      	ldr	r3, [r3, #24]
 80040d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	6a1b      	ldr	r3, [r3, #32]
 80040d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80040e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	031b      	lsls	r3, r3, #12
 80040e6:	697a      	ldr	r2, [r7, #20]
 80040e8:	4313      	orrs	r3, r2
 80040ea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80040f2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	011b      	lsls	r3, r3, #4
 80040f8:	693a      	ldr	r2, [r7, #16]
 80040fa:	4313      	orrs	r3, r2
 80040fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	697a      	ldr	r2, [r7, #20]
 8004102:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	693a      	ldr	r2, [r7, #16]
 8004108:	621a      	str	r2, [r3, #32]
}
 800410a:	bf00      	nop
 800410c:	371c      	adds	r7, #28
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr

08004116 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004116:	b480      	push	{r7}
 8004118:	b085      	sub	sp, #20
 800411a:	af00      	add	r7, sp, #0
 800411c:	6078      	str	r0, [r7, #4]
 800411e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800412c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800412e:	683a      	ldr	r2, [r7, #0]
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	4313      	orrs	r3, r2
 8004134:	f043 0307 	orr.w	r3, r3, #7
 8004138:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	68fa      	ldr	r2, [r7, #12]
 800413e:	609a      	str	r2, [r3, #8]
}
 8004140:	bf00      	nop
 8004142:	3714      	adds	r7, #20
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr

0800414c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800414c:	b480      	push	{r7}
 800414e:	b087      	sub	sp, #28
 8004150:	af00      	add	r7, sp, #0
 8004152:	60f8      	str	r0, [r7, #12]
 8004154:	60b9      	str	r1, [r7, #8]
 8004156:	607a      	str	r2, [r7, #4]
 8004158:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004166:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	021a      	lsls	r2, r3, #8
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	431a      	orrs	r2, r3
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	4313      	orrs	r3, r2
 8004174:	697a      	ldr	r2, [r7, #20]
 8004176:	4313      	orrs	r3, r2
 8004178:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	697a      	ldr	r2, [r7, #20]
 800417e:	609a      	str	r2, [r3, #8]
}
 8004180:	bf00      	nop
 8004182:	371c      	adds	r7, #28
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr

0800418c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800418c:	b480      	push	{r7}
 800418e:	b085      	sub	sp, #20
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800419c:	2b01      	cmp	r3, #1
 800419e:	d101      	bne.n	80041a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80041a0:	2302      	movs	r3, #2
 80041a2:	e05a      	b.n	800425a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2201      	movs	r2, #1
 80041a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2202      	movs	r2, #2
 80041b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	68fa      	ldr	r2, [r7, #12]
 80041d2:	4313      	orrs	r3, r2
 80041d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	68fa      	ldr	r2, [r7, #12]
 80041dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a21      	ldr	r2, [pc, #132]	; (8004268 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d022      	beq.n	800422e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041f0:	d01d      	beq.n	800422e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a1d      	ldr	r2, [pc, #116]	; (800426c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d018      	beq.n	800422e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a1b      	ldr	r2, [pc, #108]	; (8004270 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d013      	beq.n	800422e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a1a      	ldr	r2, [pc, #104]	; (8004274 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d00e      	beq.n	800422e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a18      	ldr	r2, [pc, #96]	; (8004278 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d009      	beq.n	800422e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a17      	ldr	r2, [pc, #92]	; (800427c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d004      	beq.n	800422e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a15      	ldr	r2, [pc, #84]	; (8004280 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d10c      	bne.n	8004248 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004234:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	68ba      	ldr	r2, [r7, #8]
 800423c:	4313      	orrs	r3, r2
 800423e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	68ba      	ldr	r2, [r7, #8]
 8004246:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2201      	movs	r2, #1
 800424c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2200      	movs	r2, #0
 8004254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004258:	2300      	movs	r3, #0
}
 800425a:	4618      	mov	r0, r3
 800425c:	3714      	adds	r7, #20
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr
 8004266:	bf00      	nop
 8004268:	40010000 	.word	0x40010000
 800426c:	40000400 	.word	0x40000400
 8004270:	40000800 	.word	0x40000800
 8004274:	40000c00 	.word	0x40000c00
 8004278:	40010400 	.word	0x40010400
 800427c:	40014000 	.word	0x40014000
 8004280:	40001800 	.word	0x40001800

08004284 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004284:	b480      	push	{r7}
 8004286:	b083      	sub	sp, #12
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800428c:	bf00      	nop
 800428e:	370c      	adds	r7, #12
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr

08004298 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004298:	b480      	push	{r7}
 800429a:	b083      	sub	sp, #12
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80042a0:	bf00      	nop
 80042a2:	370c      	adds	r7, #12
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr

080042ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b082      	sub	sp, #8
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d101      	bne.n	80042be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	e03f      	b.n	800433e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042c4:	b2db      	uxtb	r3, r3
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d106      	bne.n	80042d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2200      	movs	r2, #0
 80042ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f7fd fe4e 	bl	8001f74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2224      	movs	r2, #36	; 0x24
 80042dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	68da      	ldr	r2, [r3, #12]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80042ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80042f0:	6878      	ldr	r0, [r7, #4]
 80042f2:	f000 f929 	bl	8004548 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	691a      	ldr	r2, [r3, #16]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004304:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	695a      	ldr	r2, [r3, #20]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004314:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	68da      	ldr	r2, [r3, #12]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004324:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2200      	movs	r2, #0
 800432a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2220      	movs	r2, #32
 8004330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2220      	movs	r2, #32
 8004338:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800433c:	2300      	movs	r3, #0
}
 800433e:	4618      	mov	r0, r3
 8004340:	3708      	adds	r7, #8
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}

08004346 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004346:	b580      	push	{r7, lr}
 8004348:	b08a      	sub	sp, #40	; 0x28
 800434a:	af02      	add	r7, sp, #8
 800434c:	60f8      	str	r0, [r7, #12]
 800434e:	60b9      	str	r1, [r7, #8]
 8004350:	603b      	str	r3, [r7, #0]
 8004352:	4613      	mov	r3, r2
 8004354:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004356:	2300      	movs	r3, #0
 8004358:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004360:	b2db      	uxtb	r3, r3
 8004362:	2b20      	cmp	r3, #32
 8004364:	d17c      	bne.n	8004460 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d002      	beq.n	8004372 <HAL_UART_Transmit+0x2c>
 800436c:	88fb      	ldrh	r3, [r7, #6]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d101      	bne.n	8004376 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e075      	b.n	8004462 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800437c:	2b01      	cmp	r3, #1
 800437e:	d101      	bne.n	8004384 <HAL_UART_Transmit+0x3e>
 8004380:	2302      	movs	r3, #2
 8004382:	e06e      	b.n	8004462 <HAL_UART_Transmit+0x11c>
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2201      	movs	r2, #1
 8004388:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2200      	movs	r2, #0
 8004390:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2221      	movs	r2, #33	; 0x21
 8004396:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800439a:	f7fd ff77 	bl	800228c <HAL_GetTick>
 800439e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	88fa      	ldrh	r2, [r7, #6]
 80043a4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	88fa      	ldrh	r2, [r7, #6]
 80043aa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043b4:	d108      	bne.n	80043c8 <HAL_UART_Transmit+0x82>
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	691b      	ldr	r3, [r3, #16]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d104      	bne.n	80043c8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80043be:	2300      	movs	r3, #0
 80043c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	61bb      	str	r3, [r7, #24]
 80043c6:	e003      	b.n	80043d0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80043cc:	2300      	movs	r3, #0
 80043ce:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2200      	movs	r2, #0
 80043d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80043d8:	e02a      	b.n	8004430 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	9300      	str	r3, [sp, #0]
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	2200      	movs	r2, #0
 80043e2:	2180      	movs	r1, #128	; 0x80
 80043e4:	68f8      	ldr	r0, [r7, #12]
 80043e6:	f000 f840 	bl	800446a <UART_WaitOnFlagUntilTimeout>
 80043ea:	4603      	mov	r3, r0
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d001      	beq.n	80043f4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80043f0:	2303      	movs	r3, #3
 80043f2:	e036      	b.n	8004462 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80043f4:	69fb      	ldr	r3, [r7, #28]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d10b      	bne.n	8004412 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80043fa:	69bb      	ldr	r3, [r7, #24]
 80043fc:	881b      	ldrh	r3, [r3, #0]
 80043fe:	461a      	mov	r2, r3
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004408:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800440a:	69bb      	ldr	r3, [r7, #24]
 800440c:	3302      	adds	r3, #2
 800440e:	61bb      	str	r3, [r7, #24]
 8004410:	e007      	b.n	8004422 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004412:	69fb      	ldr	r3, [r7, #28]
 8004414:	781a      	ldrb	r2, [r3, #0]
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800441c:	69fb      	ldr	r3, [r7, #28]
 800441e:	3301      	adds	r3, #1
 8004420:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004426:	b29b      	uxth	r3, r3
 8004428:	3b01      	subs	r3, #1
 800442a:	b29a      	uxth	r2, r3
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004434:	b29b      	uxth	r3, r3
 8004436:	2b00      	cmp	r3, #0
 8004438:	d1cf      	bne.n	80043da <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	9300      	str	r3, [sp, #0]
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	2200      	movs	r2, #0
 8004442:	2140      	movs	r1, #64	; 0x40
 8004444:	68f8      	ldr	r0, [r7, #12]
 8004446:	f000 f810 	bl	800446a <UART_WaitOnFlagUntilTimeout>
 800444a:	4603      	mov	r3, r0
 800444c:	2b00      	cmp	r3, #0
 800444e:	d001      	beq.n	8004454 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004450:	2303      	movs	r3, #3
 8004452:	e006      	b.n	8004462 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2220      	movs	r2, #32
 8004458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800445c:	2300      	movs	r3, #0
 800445e:	e000      	b.n	8004462 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004460:	2302      	movs	r3, #2
  }
}
 8004462:	4618      	mov	r0, r3
 8004464:	3720      	adds	r7, #32
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}

0800446a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800446a:	b580      	push	{r7, lr}
 800446c:	b090      	sub	sp, #64	; 0x40
 800446e:	af00      	add	r7, sp, #0
 8004470:	60f8      	str	r0, [r7, #12]
 8004472:	60b9      	str	r1, [r7, #8]
 8004474:	603b      	str	r3, [r7, #0]
 8004476:	4613      	mov	r3, r2
 8004478:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800447a:	e050      	b.n	800451e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800447c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800447e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004482:	d04c      	beq.n	800451e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004484:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004486:	2b00      	cmp	r3, #0
 8004488:	d007      	beq.n	800449a <UART_WaitOnFlagUntilTimeout+0x30>
 800448a:	f7fd feff 	bl	800228c <HAL_GetTick>
 800448e:	4602      	mov	r2, r0
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	1ad3      	subs	r3, r2, r3
 8004494:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004496:	429a      	cmp	r2, r3
 8004498:	d241      	bcs.n	800451e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	330c      	adds	r3, #12
 80044a0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044a4:	e853 3f00 	ldrex	r3, [r3]
 80044a8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80044aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80044b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	330c      	adds	r3, #12
 80044b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80044ba:	637a      	str	r2, [r7, #52]	; 0x34
 80044bc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044be:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80044c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80044c2:	e841 2300 	strex	r3, r2, [r1]
 80044c6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80044c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d1e5      	bne.n	800449a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	3314      	adds	r3, #20
 80044d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	e853 3f00 	ldrex	r3, [r3]
 80044dc:	613b      	str	r3, [r7, #16]
   return(result);
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	f023 0301 	bic.w	r3, r3, #1
 80044e4:	63bb      	str	r3, [r7, #56]	; 0x38
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	3314      	adds	r3, #20
 80044ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80044ee:	623a      	str	r2, [r7, #32]
 80044f0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044f2:	69f9      	ldr	r1, [r7, #28]
 80044f4:	6a3a      	ldr	r2, [r7, #32]
 80044f6:	e841 2300 	strex	r3, r2, [r1]
 80044fa:	61bb      	str	r3, [r7, #24]
   return(result);
 80044fc:	69bb      	ldr	r3, [r7, #24]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d1e5      	bne.n	80044ce <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2220      	movs	r2, #32
 8004506:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2220      	movs	r2, #32
 800450e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2200      	movs	r2, #0
 8004516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800451a:	2303      	movs	r3, #3
 800451c:	e00f      	b.n	800453e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	4013      	ands	r3, r2
 8004528:	68ba      	ldr	r2, [r7, #8]
 800452a:	429a      	cmp	r2, r3
 800452c:	bf0c      	ite	eq
 800452e:	2301      	moveq	r3, #1
 8004530:	2300      	movne	r3, #0
 8004532:	b2db      	uxtb	r3, r3
 8004534:	461a      	mov	r2, r3
 8004536:	79fb      	ldrb	r3, [r7, #7]
 8004538:	429a      	cmp	r2, r3
 800453a:	d09f      	beq.n	800447c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800453c:	2300      	movs	r3, #0
}
 800453e:	4618      	mov	r0, r3
 8004540:	3740      	adds	r7, #64	; 0x40
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}
	...

08004548 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004548:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800454c:	b0c0      	sub	sp, #256	; 0x100
 800454e:	af00      	add	r7, sp, #0
 8004550:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	691b      	ldr	r3, [r3, #16]
 800455c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004564:	68d9      	ldr	r1, [r3, #12]
 8004566:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	ea40 0301 	orr.w	r3, r0, r1
 8004570:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004572:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004576:	689a      	ldr	r2, [r3, #8]
 8004578:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800457c:	691b      	ldr	r3, [r3, #16]
 800457e:	431a      	orrs	r2, r3
 8004580:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004584:	695b      	ldr	r3, [r3, #20]
 8004586:	431a      	orrs	r2, r3
 8004588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800458c:	69db      	ldr	r3, [r3, #28]
 800458e:	4313      	orrs	r3, r2
 8004590:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	68db      	ldr	r3, [r3, #12]
 800459c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80045a0:	f021 010c 	bic.w	r1, r1, #12
 80045a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80045ae:	430b      	orrs	r3, r1
 80045b0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80045b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	695b      	ldr	r3, [r3, #20]
 80045ba:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80045be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045c2:	6999      	ldr	r1, [r3, #24]
 80045c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	ea40 0301 	orr.w	r3, r0, r1
 80045ce:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80045d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	4b8f      	ldr	r3, [pc, #572]	; (8004814 <UART_SetConfig+0x2cc>)
 80045d8:	429a      	cmp	r2, r3
 80045da:	d005      	beq.n	80045e8 <UART_SetConfig+0xa0>
 80045dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045e0:	681a      	ldr	r2, [r3, #0]
 80045e2:	4b8d      	ldr	r3, [pc, #564]	; (8004818 <UART_SetConfig+0x2d0>)
 80045e4:	429a      	cmp	r2, r3
 80045e6:	d104      	bne.n	80045f2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80045e8:	f7ff f9c0 	bl	800396c <HAL_RCC_GetPCLK2Freq>
 80045ec:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80045f0:	e003      	b.n	80045fa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80045f2:	f7ff f9a7 	bl	8003944 <HAL_RCC_GetPCLK1Freq>
 80045f6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045fe:	69db      	ldr	r3, [r3, #28]
 8004600:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004604:	f040 810c 	bne.w	8004820 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004608:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800460c:	2200      	movs	r2, #0
 800460e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004612:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004616:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800461a:	4622      	mov	r2, r4
 800461c:	462b      	mov	r3, r5
 800461e:	1891      	adds	r1, r2, r2
 8004620:	65b9      	str	r1, [r7, #88]	; 0x58
 8004622:	415b      	adcs	r3, r3
 8004624:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004626:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800462a:	4621      	mov	r1, r4
 800462c:	eb12 0801 	adds.w	r8, r2, r1
 8004630:	4629      	mov	r1, r5
 8004632:	eb43 0901 	adc.w	r9, r3, r1
 8004636:	f04f 0200 	mov.w	r2, #0
 800463a:	f04f 0300 	mov.w	r3, #0
 800463e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004642:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004646:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800464a:	4690      	mov	r8, r2
 800464c:	4699      	mov	r9, r3
 800464e:	4623      	mov	r3, r4
 8004650:	eb18 0303 	adds.w	r3, r8, r3
 8004654:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004658:	462b      	mov	r3, r5
 800465a:	eb49 0303 	adc.w	r3, r9, r3
 800465e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004662:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	2200      	movs	r2, #0
 800466a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800466e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004672:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004676:	460b      	mov	r3, r1
 8004678:	18db      	adds	r3, r3, r3
 800467a:	653b      	str	r3, [r7, #80]	; 0x50
 800467c:	4613      	mov	r3, r2
 800467e:	eb42 0303 	adc.w	r3, r2, r3
 8004682:	657b      	str	r3, [r7, #84]	; 0x54
 8004684:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004688:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800468c:	f7fc fae6 	bl	8000c5c <__aeabi_uldivmod>
 8004690:	4602      	mov	r2, r0
 8004692:	460b      	mov	r3, r1
 8004694:	4b61      	ldr	r3, [pc, #388]	; (800481c <UART_SetConfig+0x2d4>)
 8004696:	fba3 2302 	umull	r2, r3, r3, r2
 800469a:	095b      	lsrs	r3, r3, #5
 800469c:	011c      	lsls	r4, r3, #4
 800469e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046a2:	2200      	movs	r2, #0
 80046a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80046a8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80046ac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80046b0:	4642      	mov	r2, r8
 80046b2:	464b      	mov	r3, r9
 80046b4:	1891      	adds	r1, r2, r2
 80046b6:	64b9      	str	r1, [r7, #72]	; 0x48
 80046b8:	415b      	adcs	r3, r3
 80046ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046bc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80046c0:	4641      	mov	r1, r8
 80046c2:	eb12 0a01 	adds.w	sl, r2, r1
 80046c6:	4649      	mov	r1, r9
 80046c8:	eb43 0b01 	adc.w	fp, r3, r1
 80046cc:	f04f 0200 	mov.w	r2, #0
 80046d0:	f04f 0300 	mov.w	r3, #0
 80046d4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80046d8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80046dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80046e0:	4692      	mov	sl, r2
 80046e2:	469b      	mov	fp, r3
 80046e4:	4643      	mov	r3, r8
 80046e6:	eb1a 0303 	adds.w	r3, sl, r3
 80046ea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80046ee:	464b      	mov	r3, r9
 80046f0:	eb4b 0303 	adc.w	r3, fp, r3
 80046f4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80046f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	2200      	movs	r2, #0
 8004700:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004704:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004708:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800470c:	460b      	mov	r3, r1
 800470e:	18db      	adds	r3, r3, r3
 8004710:	643b      	str	r3, [r7, #64]	; 0x40
 8004712:	4613      	mov	r3, r2
 8004714:	eb42 0303 	adc.w	r3, r2, r3
 8004718:	647b      	str	r3, [r7, #68]	; 0x44
 800471a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800471e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004722:	f7fc fa9b 	bl	8000c5c <__aeabi_uldivmod>
 8004726:	4602      	mov	r2, r0
 8004728:	460b      	mov	r3, r1
 800472a:	4611      	mov	r1, r2
 800472c:	4b3b      	ldr	r3, [pc, #236]	; (800481c <UART_SetConfig+0x2d4>)
 800472e:	fba3 2301 	umull	r2, r3, r3, r1
 8004732:	095b      	lsrs	r3, r3, #5
 8004734:	2264      	movs	r2, #100	; 0x64
 8004736:	fb02 f303 	mul.w	r3, r2, r3
 800473a:	1acb      	subs	r3, r1, r3
 800473c:	00db      	lsls	r3, r3, #3
 800473e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004742:	4b36      	ldr	r3, [pc, #216]	; (800481c <UART_SetConfig+0x2d4>)
 8004744:	fba3 2302 	umull	r2, r3, r3, r2
 8004748:	095b      	lsrs	r3, r3, #5
 800474a:	005b      	lsls	r3, r3, #1
 800474c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004750:	441c      	add	r4, r3
 8004752:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004756:	2200      	movs	r2, #0
 8004758:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800475c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004760:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004764:	4642      	mov	r2, r8
 8004766:	464b      	mov	r3, r9
 8004768:	1891      	adds	r1, r2, r2
 800476a:	63b9      	str	r1, [r7, #56]	; 0x38
 800476c:	415b      	adcs	r3, r3
 800476e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004770:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004774:	4641      	mov	r1, r8
 8004776:	1851      	adds	r1, r2, r1
 8004778:	6339      	str	r1, [r7, #48]	; 0x30
 800477a:	4649      	mov	r1, r9
 800477c:	414b      	adcs	r3, r1
 800477e:	637b      	str	r3, [r7, #52]	; 0x34
 8004780:	f04f 0200 	mov.w	r2, #0
 8004784:	f04f 0300 	mov.w	r3, #0
 8004788:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800478c:	4659      	mov	r1, fp
 800478e:	00cb      	lsls	r3, r1, #3
 8004790:	4651      	mov	r1, sl
 8004792:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004796:	4651      	mov	r1, sl
 8004798:	00ca      	lsls	r2, r1, #3
 800479a:	4610      	mov	r0, r2
 800479c:	4619      	mov	r1, r3
 800479e:	4603      	mov	r3, r0
 80047a0:	4642      	mov	r2, r8
 80047a2:	189b      	adds	r3, r3, r2
 80047a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80047a8:	464b      	mov	r3, r9
 80047aa:	460a      	mov	r2, r1
 80047ac:	eb42 0303 	adc.w	r3, r2, r3
 80047b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80047b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	2200      	movs	r2, #0
 80047bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80047c0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80047c4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80047c8:	460b      	mov	r3, r1
 80047ca:	18db      	adds	r3, r3, r3
 80047cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80047ce:	4613      	mov	r3, r2
 80047d0:	eb42 0303 	adc.w	r3, r2, r3
 80047d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80047da:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80047de:	f7fc fa3d 	bl	8000c5c <__aeabi_uldivmod>
 80047e2:	4602      	mov	r2, r0
 80047e4:	460b      	mov	r3, r1
 80047e6:	4b0d      	ldr	r3, [pc, #52]	; (800481c <UART_SetConfig+0x2d4>)
 80047e8:	fba3 1302 	umull	r1, r3, r3, r2
 80047ec:	095b      	lsrs	r3, r3, #5
 80047ee:	2164      	movs	r1, #100	; 0x64
 80047f0:	fb01 f303 	mul.w	r3, r1, r3
 80047f4:	1ad3      	subs	r3, r2, r3
 80047f6:	00db      	lsls	r3, r3, #3
 80047f8:	3332      	adds	r3, #50	; 0x32
 80047fa:	4a08      	ldr	r2, [pc, #32]	; (800481c <UART_SetConfig+0x2d4>)
 80047fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004800:	095b      	lsrs	r3, r3, #5
 8004802:	f003 0207 	and.w	r2, r3, #7
 8004806:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4422      	add	r2, r4
 800480e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004810:	e106      	b.n	8004a20 <UART_SetConfig+0x4d8>
 8004812:	bf00      	nop
 8004814:	40011000 	.word	0x40011000
 8004818:	40011400 	.word	0x40011400
 800481c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004820:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004824:	2200      	movs	r2, #0
 8004826:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800482a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800482e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004832:	4642      	mov	r2, r8
 8004834:	464b      	mov	r3, r9
 8004836:	1891      	adds	r1, r2, r2
 8004838:	6239      	str	r1, [r7, #32]
 800483a:	415b      	adcs	r3, r3
 800483c:	627b      	str	r3, [r7, #36]	; 0x24
 800483e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004842:	4641      	mov	r1, r8
 8004844:	1854      	adds	r4, r2, r1
 8004846:	4649      	mov	r1, r9
 8004848:	eb43 0501 	adc.w	r5, r3, r1
 800484c:	f04f 0200 	mov.w	r2, #0
 8004850:	f04f 0300 	mov.w	r3, #0
 8004854:	00eb      	lsls	r3, r5, #3
 8004856:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800485a:	00e2      	lsls	r2, r4, #3
 800485c:	4614      	mov	r4, r2
 800485e:	461d      	mov	r5, r3
 8004860:	4643      	mov	r3, r8
 8004862:	18e3      	adds	r3, r4, r3
 8004864:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004868:	464b      	mov	r3, r9
 800486a:	eb45 0303 	adc.w	r3, r5, r3
 800486e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004872:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	2200      	movs	r2, #0
 800487a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800487e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004882:	f04f 0200 	mov.w	r2, #0
 8004886:	f04f 0300 	mov.w	r3, #0
 800488a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800488e:	4629      	mov	r1, r5
 8004890:	008b      	lsls	r3, r1, #2
 8004892:	4621      	mov	r1, r4
 8004894:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004898:	4621      	mov	r1, r4
 800489a:	008a      	lsls	r2, r1, #2
 800489c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80048a0:	f7fc f9dc 	bl	8000c5c <__aeabi_uldivmod>
 80048a4:	4602      	mov	r2, r0
 80048a6:	460b      	mov	r3, r1
 80048a8:	4b60      	ldr	r3, [pc, #384]	; (8004a2c <UART_SetConfig+0x4e4>)
 80048aa:	fba3 2302 	umull	r2, r3, r3, r2
 80048ae:	095b      	lsrs	r3, r3, #5
 80048b0:	011c      	lsls	r4, r3, #4
 80048b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048b6:	2200      	movs	r2, #0
 80048b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80048bc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80048c0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80048c4:	4642      	mov	r2, r8
 80048c6:	464b      	mov	r3, r9
 80048c8:	1891      	adds	r1, r2, r2
 80048ca:	61b9      	str	r1, [r7, #24]
 80048cc:	415b      	adcs	r3, r3
 80048ce:	61fb      	str	r3, [r7, #28]
 80048d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80048d4:	4641      	mov	r1, r8
 80048d6:	1851      	adds	r1, r2, r1
 80048d8:	6139      	str	r1, [r7, #16]
 80048da:	4649      	mov	r1, r9
 80048dc:	414b      	adcs	r3, r1
 80048de:	617b      	str	r3, [r7, #20]
 80048e0:	f04f 0200 	mov.w	r2, #0
 80048e4:	f04f 0300 	mov.w	r3, #0
 80048e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80048ec:	4659      	mov	r1, fp
 80048ee:	00cb      	lsls	r3, r1, #3
 80048f0:	4651      	mov	r1, sl
 80048f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80048f6:	4651      	mov	r1, sl
 80048f8:	00ca      	lsls	r2, r1, #3
 80048fa:	4610      	mov	r0, r2
 80048fc:	4619      	mov	r1, r3
 80048fe:	4603      	mov	r3, r0
 8004900:	4642      	mov	r2, r8
 8004902:	189b      	adds	r3, r3, r2
 8004904:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004908:	464b      	mov	r3, r9
 800490a:	460a      	mov	r2, r1
 800490c:	eb42 0303 	adc.w	r3, r2, r3
 8004910:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004914:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	2200      	movs	r2, #0
 800491c:	67bb      	str	r3, [r7, #120]	; 0x78
 800491e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004920:	f04f 0200 	mov.w	r2, #0
 8004924:	f04f 0300 	mov.w	r3, #0
 8004928:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800492c:	4649      	mov	r1, r9
 800492e:	008b      	lsls	r3, r1, #2
 8004930:	4641      	mov	r1, r8
 8004932:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004936:	4641      	mov	r1, r8
 8004938:	008a      	lsls	r2, r1, #2
 800493a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800493e:	f7fc f98d 	bl	8000c5c <__aeabi_uldivmod>
 8004942:	4602      	mov	r2, r0
 8004944:	460b      	mov	r3, r1
 8004946:	4611      	mov	r1, r2
 8004948:	4b38      	ldr	r3, [pc, #224]	; (8004a2c <UART_SetConfig+0x4e4>)
 800494a:	fba3 2301 	umull	r2, r3, r3, r1
 800494e:	095b      	lsrs	r3, r3, #5
 8004950:	2264      	movs	r2, #100	; 0x64
 8004952:	fb02 f303 	mul.w	r3, r2, r3
 8004956:	1acb      	subs	r3, r1, r3
 8004958:	011b      	lsls	r3, r3, #4
 800495a:	3332      	adds	r3, #50	; 0x32
 800495c:	4a33      	ldr	r2, [pc, #204]	; (8004a2c <UART_SetConfig+0x4e4>)
 800495e:	fba2 2303 	umull	r2, r3, r2, r3
 8004962:	095b      	lsrs	r3, r3, #5
 8004964:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004968:	441c      	add	r4, r3
 800496a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800496e:	2200      	movs	r2, #0
 8004970:	673b      	str	r3, [r7, #112]	; 0x70
 8004972:	677a      	str	r2, [r7, #116]	; 0x74
 8004974:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004978:	4642      	mov	r2, r8
 800497a:	464b      	mov	r3, r9
 800497c:	1891      	adds	r1, r2, r2
 800497e:	60b9      	str	r1, [r7, #8]
 8004980:	415b      	adcs	r3, r3
 8004982:	60fb      	str	r3, [r7, #12]
 8004984:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004988:	4641      	mov	r1, r8
 800498a:	1851      	adds	r1, r2, r1
 800498c:	6039      	str	r1, [r7, #0]
 800498e:	4649      	mov	r1, r9
 8004990:	414b      	adcs	r3, r1
 8004992:	607b      	str	r3, [r7, #4]
 8004994:	f04f 0200 	mov.w	r2, #0
 8004998:	f04f 0300 	mov.w	r3, #0
 800499c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80049a0:	4659      	mov	r1, fp
 80049a2:	00cb      	lsls	r3, r1, #3
 80049a4:	4651      	mov	r1, sl
 80049a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80049aa:	4651      	mov	r1, sl
 80049ac:	00ca      	lsls	r2, r1, #3
 80049ae:	4610      	mov	r0, r2
 80049b0:	4619      	mov	r1, r3
 80049b2:	4603      	mov	r3, r0
 80049b4:	4642      	mov	r2, r8
 80049b6:	189b      	adds	r3, r3, r2
 80049b8:	66bb      	str	r3, [r7, #104]	; 0x68
 80049ba:	464b      	mov	r3, r9
 80049bc:	460a      	mov	r2, r1
 80049be:	eb42 0303 	adc.w	r3, r2, r3
 80049c2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80049c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	2200      	movs	r2, #0
 80049cc:	663b      	str	r3, [r7, #96]	; 0x60
 80049ce:	667a      	str	r2, [r7, #100]	; 0x64
 80049d0:	f04f 0200 	mov.w	r2, #0
 80049d4:	f04f 0300 	mov.w	r3, #0
 80049d8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80049dc:	4649      	mov	r1, r9
 80049de:	008b      	lsls	r3, r1, #2
 80049e0:	4641      	mov	r1, r8
 80049e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80049e6:	4641      	mov	r1, r8
 80049e8:	008a      	lsls	r2, r1, #2
 80049ea:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80049ee:	f7fc f935 	bl	8000c5c <__aeabi_uldivmod>
 80049f2:	4602      	mov	r2, r0
 80049f4:	460b      	mov	r3, r1
 80049f6:	4b0d      	ldr	r3, [pc, #52]	; (8004a2c <UART_SetConfig+0x4e4>)
 80049f8:	fba3 1302 	umull	r1, r3, r3, r2
 80049fc:	095b      	lsrs	r3, r3, #5
 80049fe:	2164      	movs	r1, #100	; 0x64
 8004a00:	fb01 f303 	mul.w	r3, r1, r3
 8004a04:	1ad3      	subs	r3, r2, r3
 8004a06:	011b      	lsls	r3, r3, #4
 8004a08:	3332      	adds	r3, #50	; 0x32
 8004a0a:	4a08      	ldr	r2, [pc, #32]	; (8004a2c <UART_SetConfig+0x4e4>)
 8004a0c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a10:	095b      	lsrs	r3, r3, #5
 8004a12:	f003 020f 	and.w	r2, r3, #15
 8004a16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4422      	add	r2, r4
 8004a1e:	609a      	str	r2, [r3, #8]
}
 8004a20:	bf00      	nop
 8004a22:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004a26:	46bd      	mov	sp, r7
 8004a28:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a2c:	51eb851f 	.word	0x51eb851f

08004a30 <siprintf>:
 8004a30:	b40e      	push	{r1, r2, r3}
 8004a32:	b500      	push	{lr}
 8004a34:	b09c      	sub	sp, #112	; 0x70
 8004a36:	ab1d      	add	r3, sp, #116	; 0x74
 8004a38:	9002      	str	r0, [sp, #8]
 8004a3a:	9006      	str	r0, [sp, #24]
 8004a3c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004a40:	4809      	ldr	r0, [pc, #36]	; (8004a68 <siprintf+0x38>)
 8004a42:	9107      	str	r1, [sp, #28]
 8004a44:	9104      	str	r1, [sp, #16]
 8004a46:	4909      	ldr	r1, [pc, #36]	; (8004a6c <siprintf+0x3c>)
 8004a48:	f853 2b04 	ldr.w	r2, [r3], #4
 8004a4c:	9105      	str	r1, [sp, #20]
 8004a4e:	6800      	ldr	r0, [r0, #0]
 8004a50:	9301      	str	r3, [sp, #4]
 8004a52:	a902      	add	r1, sp, #8
 8004a54:	f000 f992 	bl	8004d7c <_svfiprintf_r>
 8004a58:	9b02      	ldr	r3, [sp, #8]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	701a      	strb	r2, [r3, #0]
 8004a5e:	b01c      	add	sp, #112	; 0x70
 8004a60:	f85d eb04 	ldr.w	lr, [sp], #4
 8004a64:	b003      	add	sp, #12
 8004a66:	4770      	bx	lr
 8004a68:	20000098 	.word	0x20000098
 8004a6c:	ffff0208 	.word	0xffff0208

08004a70 <memset>:
 8004a70:	4402      	add	r2, r0
 8004a72:	4603      	mov	r3, r0
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d100      	bne.n	8004a7a <memset+0xa>
 8004a78:	4770      	bx	lr
 8004a7a:	f803 1b01 	strb.w	r1, [r3], #1
 8004a7e:	e7f9      	b.n	8004a74 <memset+0x4>

08004a80 <__errno>:
 8004a80:	4b01      	ldr	r3, [pc, #4]	; (8004a88 <__errno+0x8>)
 8004a82:	6818      	ldr	r0, [r3, #0]
 8004a84:	4770      	bx	lr
 8004a86:	bf00      	nop
 8004a88:	20000098 	.word	0x20000098

08004a8c <__libc_init_array>:
 8004a8c:	b570      	push	{r4, r5, r6, lr}
 8004a8e:	4d0d      	ldr	r5, [pc, #52]	; (8004ac4 <__libc_init_array+0x38>)
 8004a90:	4c0d      	ldr	r4, [pc, #52]	; (8004ac8 <__libc_init_array+0x3c>)
 8004a92:	1b64      	subs	r4, r4, r5
 8004a94:	10a4      	asrs	r4, r4, #2
 8004a96:	2600      	movs	r6, #0
 8004a98:	42a6      	cmp	r6, r4
 8004a9a:	d109      	bne.n	8004ab0 <__libc_init_array+0x24>
 8004a9c:	4d0b      	ldr	r5, [pc, #44]	; (8004acc <__libc_init_array+0x40>)
 8004a9e:	4c0c      	ldr	r4, [pc, #48]	; (8004ad0 <__libc_init_array+0x44>)
 8004aa0:	f000 fc6a 	bl	8005378 <_init>
 8004aa4:	1b64      	subs	r4, r4, r5
 8004aa6:	10a4      	asrs	r4, r4, #2
 8004aa8:	2600      	movs	r6, #0
 8004aaa:	42a6      	cmp	r6, r4
 8004aac:	d105      	bne.n	8004aba <__libc_init_array+0x2e>
 8004aae:	bd70      	pop	{r4, r5, r6, pc}
 8004ab0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ab4:	4798      	blx	r3
 8004ab6:	3601      	adds	r6, #1
 8004ab8:	e7ee      	b.n	8004a98 <__libc_init_array+0xc>
 8004aba:	f855 3b04 	ldr.w	r3, [r5], #4
 8004abe:	4798      	blx	r3
 8004ac0:	3601      	adds	r6, #1
 8004ac2:	e7f2      	b.n	8004aaa <__libc_init_array+0x1e>
 8004ac4:	0800548c 	.word	0x0800548c
 8004ac8:	0800548c 	.word	0x0800548c
 8004acc:	0800548c 	.word	0x0800548c
 8004ad0:	08005490 	.word	0x08005490

08004ad4 <__retarget_lock_acquire_recursive>:
 8004ad4:	4770      	bx	lr

08004ad6 <__retarget_lock_release_recursive>:
 8004ad6:	4770      	bx	lr

08004ad8 <_free_r>:
 8004ad8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004ada:	2900      	cmp	r1, #0
 8004adc:	d044      	beq.n	8004b68 <_free_r+0x90>
 8004ade:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ae2:	9001      	str	r0, [sp, #4]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	f1a1 0404 	sub.w	r4, r1, #4
 8004aea:	bfb8      	it	lt
 8004aec:	18e4      	addlt	r4, r4, r3
 8004aee:	f000 f8df 	bl	8004cb0 <__malloc_lock>
 8004af2:	4a1e      	ldr	r2, [pc, #120]	; (8004b6c <_free_r+0x94>)
 8004af4:	9801      	ldr	r0, [sp, #4]
 8004af6:	6813      	ldr	r3, [r2, #0]
 8004af8:	b933      	cbnz	r3, 8004b08 <_free_r+0x30>
 8004afa:	6063      	str	r3, [r4, #4]
 8004afc:	6014      	str	r4, [r2, #0]
 8004afe:	b003      	add	sp, #12
 8004b00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004b04:	f000 b8da 	b.w	8004cbc <__malloc_unlock>
 8004b08:	42a3      	cmp	r3, r4
 8004b0a:	d908      	bls.n	8004b1e <_free_r+0x46>
 8004b0c:	6825      	ldr	r5, [r4, #0]
 8004b0e:	1961      	adds	r1, r4, r5
 8004b10:	428b      	cmp	r3, r1
 8004b12:	bf01      	itttt	eq
 8004b14:	6819      	ldreq	r1, [r3, #0]
 8004b16:	685b      	ldreq	r3, [r3, #4]
 8004b18:	1949      	addeq	r1, r1, r5
 8004b1a:	6021      	streq	r1, [r4, #0]
 8004b1c:	e7ed      	b.n	8004afa <_free_r+0x22>
 8004b1e:	461a      	mov	r2, r3
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	b10b      	cbz	r3, 8004b28 <_free_r+0x50>
 8004b24:	42a3      	cmp	r3, r4
 8004b26:	d9fa      	bls.n	8004b1e <_free_r+0x46>
 8004b28:	6811      	ldr	r1, [r2, #0]
 8004b2a:	1855      	adds	r5, r2, r1
 8004b2c:	42a5      	cmp	r5, r4
 8004b2e:	d10b      	bne.n	8004b48 <_free_r+0x70>
 8004b30:	6824      	ldr	r4, [r4, #0]
 8004b32:	4421      	add	r1, r4
 8004b34:	1854      	adds	r4, r2, r1
 8004b36:	42a3      	cmp	r3, r4
 8004b38:	6011      	str	r1, [r2, #0]
 8004b3a:	d1e0      	bne.n	8004afe <_free_r+0x26>
 8004b3c:	681c      	ldr	r4, [r3, #0]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	6053      	str	r3, [r2, #4]
 8004b42:	440c      	add	r4, r1
 8004b44:	6014      	str	r4, [r2, #0]
 8004b46:	e7da      	b.n	8004afe <_free_r+0x26>
 8004b48:	d902      	bls.n	8004b50 <_free_r+0x78>
 8004b4a:	230c      	movs	r3, #12
 8004b4c:	6003      	str	r3, [r0, #0]
 8004b4e:	e7d6      	b.n	8004afe <_free_r+0x26>
 8004b50:	6825      	ldr	r5, [r4, #0]
 8004b52:	1961      	adds	r1, r4, r5
 8004b54:	428b      	cmp	r3, r1
 8004b56:	bf04      	itt	eq
 8004b58:	6819      	ldreq	r1, [r3, #0]
 8004b5a:	685b      	ldreq	r3, [r3, #4]
 8004b5c:	6063      	str	r3, [r4, #4]
 8004b5e:	bf04      	itt	eq
 8004b60:	1949      	addeq	r1, r1, r5
 8004b62:	6021      	streq	r1, [r4, #0]
 8004b64:	6054      	str	r4, [r2, #4]
 8004b66:	e7ca      	b.n	8004afe <_free_r+0x26>
 8004b68:	b003      	add	sp, #12
 8004b6a:	bd30      	pop	{r4, r5, pc}
 8004b6c:	2000035c 	.word	0x2000035c

08004b70 <sbrk_aligned>:
 8004b70:	b570      	push	{r4, r5, r6, lr}
 8004b72:	4e0e      	ldr	r6, [pc, #56]	; (8004bac <sbrk_aligned+0x3c>)
 8004b74:	460c      	mov	r4, r1
 8004b76:	6831      	ldr	r1, [r6, #0]
 8004b78:	4605      	mov	r5, r0
 8004b7a:	b911      	cbnz	r1, 8004b82 <sbrk_aligned+0x12>
 8004b7c:	f000 fba6 	bl	80052cc <_sbrk_r>
 8004b80:	6030      	str	r0, [r6, #0]
 8004b82:	4621      	mov	r1, r4
 8004b84:	4628      	mov	r0, r5
 8004b86:	f000 fba1 	bl	80052cc <_sbrk_r>
 8004b8a:	1c43      	adds	r3, r0, #1
 8004b8c:	d00a      	beq.n	8004ba4 <sbrk_aligned+0x34>
 8004b8e:	1cc4      	adds	r4, r0, #3
 8004b90:	f024 0403 	bic.w	r4, r4, #3
 8004b94:	42a0      	cmp	r0, r4
 8004b96:	d007      	beq.n	8004ba8 <sbrk_aligned+0x38>
 8004b98:	1a21      	subs	r1, r4, r0
 8004b9a:	4628      	mov	r0, r5
 8004b9c:	f000 fb96 	bl	80052cc <_sbrk_r>
 8004ba0:	3001      	adds	r0, #1
 8004ba2:	d101      	bne.n	8004ba8 <sbrk_aligned+0x38>
 8004ba4:	f04f 34ff 	mov.w	r4, #4294967295
 8004ba8:	4620      	mov	r0, r4
 8004baa:	bd70      	pop	{r4, r5, r6, pc}
 8004bac:	20000360 	.word	0x20000360

08004bb0 <_malloc_r>:
 8004bb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004bb4:	1ccd      	adds	r5, r1, #3
 8004bb6:	f025 0503 	bic.w	r5, r5, #3
 8004bba:	3508      	adds	r5, #8
 8004bbc:	2d0c      	cmp	r5, #12
 8004bbe:	bf38      	it	cc
 8004bc0:	250c      	movcc	r5, #12
 8004bc2:	2d00      	cmp	r5, #0
 8004bc4:	4607      	mov	r7, r0
 8004bc6:	db01      	blt.n	8004bcc <_malloc_r+0x1c>
 8004bc8:	42a9      	cmp	r1, r5
 8004bca:	d905      	bls.n	8004bd8 <_malloc_r+0x28>
 8004bcc:	230c      	movs	r3, #12
 8004bce:	603b      	str	r3, [r7, #0]
 8004bd0:	2600      	movs	r6, #0
 8004bd2:	4630      	mov	r0, r6
 8004bd4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004bd8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004cac <_malloc_r+0xfc>
 8004bdc:	f000 f868 	bl	8004cb0 <__malloc_lock>
 8004be0:	f8d8 3000 	ldr.w	r3, [r8]
 8004be4:	461c      	mov	r4, r3
 8004be6:	bb5c      	cbnz	r4, 8004c40 <_malloc_r+0x90>
 8004be8:	4629      	mov	r1, r5
 8004bea:	4638      	mov	r0, r7
 8004bec:	f7ff ffc0 	bl	8004b70 <sbrk_aligned>
 8004bf0:	1c43      	adds	r3, r0, #1
 8004bf2:	4604      	mov	r4, r0
 8004bf4:	d155      	bne.n	8004ca2 <_malloc_r+0xf2>
 8004bf6:	f8d8 4000 	ldr.w	r4, [r8]
 8004bfa:	4626      	mov	r6, r4
 8004bfc:	2e00      	cmp	r6, #0
 8004bfe:	d145      	bne.n	8004c8c <_malloc_r+0xdc>
 8004c00:	2c00      	cmp	r4, #0
 8004c02:	d048      	beq.n	8004c96 <_malloc_r+0xe6>
 8004c04:	6823      	ldr	r3, [r4, #0]
 8004c06:	4631      	mov	r1, r6
 8004c08:	4638      	mov	r0, r7
 8004c0a:	eb04 0903 	add.w	r9, r4, r3
 8004c0e:	f000 fb5d 	bl	80052cc <_sbrk_r>
 8004c12:	4581      	cmp	r9, r0
 8004c14:	d13f      	bne.n	8004c96 <_malloc_r+0xe6>
 8004c16:	6821      	ldr	r1, [r4, #0]
 8004c18:	1a6d      	subs	r5, r5, r1
 8004c1a:	4629      	mov	r1, r5
 8004c1c:	4638      	mov	r0, r7
 8004c1e:	f7ff ffa7 	bl	8004b70 <sbrk_aligned>
 8004c22:	3001      	adds	r0, #1
 8004c24:	d037      	beq.n	8004c96 <_malloc_r+0xe6>
 8004c26:	6823      	ldr	r3, [r4, #0]
 8004c28:	442b      	add	r3, r5
 8004c2a:	6023      	str	r3, [r4, #0]
 8004c2c:	f8d8 3000 	ldr.w	r3, [r8]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d038      	beq.n	8004ca6 <_malloc_r+0xf6>
 8004c34:	685a      	ldr	r2, [r3, #4]
 8004c36:	42a2      	cmp	r2, r4
 8004c38:	d12b      	bne.n	8004c92 <_malloc_r+0xe2>
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	605a      	str	r2, [r3, #4]
 8004c3e:	e00f      	b.n	8004c60 <_malloc_r+0xb0>
 8004c40:	6822      	ldr	r2, [r4, #0]
 8004c42:	1b52      	subs	r2, r2, r5
 8004c44:	d41f      	bmi.n	8004c86 <_malloc_r+0xd6>
 8004c46:	2a0b      	cmp	r2, #11
 8004c48:	d917      	bls.n	8004c7a <_malloc_r+0xca>
 8004c4a:	1961      	adds	r1, r4, r5
 8004c4c:	42a3      	cmp	r3, r4
 8004c4e:	6025      	str	r5, [r4, #0]
 8004c50:	bf18      	it	ne
 8004c52:	6059      	strne	r1, [r3, #4]
 8004c54:	6863      	ldr	r3, [r4, #4]
 8004c56:	bf08      	it	eq
 8004c58:	f8c8 1000 	streq.w	r1, [r8]
 8004c5c:	5162      	str	r2, [r4, r5]
 8004c5e:	604b      	str	r3, [r1, #4]
 8004c60:	4638      	mov	r0, r7
 8004c62:	f104 060b 	add.w	r6, r4, #11
 8004c66:	f000 f829 	bl	8004cbc <__malloc_unlock>
 8004c6a:	f026 0607 	bic.w	r6, r6, #7
 8004c6e:	1d23      	adds	r3, r4, #4
 8004c70:	1af2      	subs	r2, r6, r3
 8004c72:	d0ae      	beq.n	8004bd2 <_malloc_r+0x22>
 8004c74:	1b9b      	subs	r3, r3, r6
 8004c76:	50a3      	str	r3, [r4, r2]
 8004c78:	e7ab      	b.n	8004bd2 <_malloc_r+0x22>
 8004c7a:	42a3      	cmp	r3, r4
 8004c7c:	6862      	ldr	r2, [r4, #4]
 8004c7e:	d1dd      	bne.n	8004c3c <_malloc_r+0x8c>
 8004c80:	f8c8 2000 	str.w	r2, [r8]
 8004c84:	e7ec      	b.n	8004c60 <_malloc_r+0xb0>
 8004c86:	4623      	mov	r3, r4
 8004c88:	6864      	ldr	r4, [r4, #4]
 8004c8a:	e7ac      	b.n	8004be6 <_malloc_r+0x36>
 8004c8c:	4634      	mov	r4, r6
 8004c8e:	6876      	ldr	r6, [r6, #4]
 8004c90:	e7b4      	b.n	8004bfc <_malloc_r+0x4c>
 8004c92:	4613      	mov	r3, r2
 8004c94:	e7cc      	b.n	8004c30 <_malloc_r+0x80>
 8004c96:	230c      	movs	r3, #12
 8004c98:	603b      	str	r3, [r7, #0]
 8004c9a:	4638      	mov	r0, r7
 8004c9c:	f000 f80e 	bl	8004cbc <__malloc_unlock>
 8004ca0:	e797      	b.n	8004bd2 <_malloc_r+0x22>
 8004ca2:	6025      	str	r5, [r4, #0]
 8004ca4:	e7dc      	b.n	8004c60 <_malloc_r+0xb0>
 8004ca6:	605b      	str	r3, [r3, #4]
 8004ca8:	deff      	udf	#255	; 0xff
 8004caa:	bf00      	nop
 8004cac:	2000035c 	.word	0x2000035c

08004cb0 <__malloc_lock>:
 8004cb0:	4801      	ldr	r0, [pc, #4]	; (8004cb8 <__malloc_lock+0x8>)
 8004cb2:	f7ff bf0f 	b.w	8004ad4 <__retarget_lock_acquire_recursive>
 8004cb6:	bf00      	nop
 8004cb8:	20000358 	.word	0x20000358

08004cbc <__malloc_unlock>:
 8004cbc:	4801      	ldr	r0, [pc, #4]	; (8004cc4 <__malloc_unlock+0x8>)
 8004cbe:	f7ff bf0a 	b.w	8004ad6 <__retarget_lock_release_recursive>
 8004cc2:	bf00      	nop
 8004cc4:	20000358 	.word	0x20000358

08004cc8 <__ssputs_r>:
 8004cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ccc:	688e      	ldr	r6, [r1, #8]
 8004cce:	461f      	mov	r7, r3
 8004cd0:	42be      	cmp	r6, r7
 8004cd2:	680b      	ldr	r3, [r1, #0]
 8004cd4:	4682      	mov	sl, r0
 8004cd6:	460c      	mov	r4, r1
 8004cd8:	4690      	mov	r8, r2
 8004cda:	d82c      	bhi.n	8004d36 <__ssputs_r+0x6e>
 8004cdc:	898a      	ldrh	r2, [r1, #12]
 8004cde:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004ce2:	d026      	beq.n	8004d32 <__ssputs_r+0x6a>
 8004ce4:	6965      	ldr	r5, [r4, #20]
 8004ce6:	6909      	ldr	r1, [r1, #16]
 8004ce8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004cec:	eba3 0901 	sub.w	r9, r3, r1
 8004cf0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004cf4:	1c7b      	adds	r3, r7, #1
 8004cf6:	444b      	add	r3, r9
 8004cf8:	106d      	asrs	r5, r5, #1
 8004cfa:	429d      	cmp	r5, r3
 8004cfc:	bf38      	it	cc
 8004cfe:	461d      	movcc	r5, r3
 8004d00:	0553      	lsls	r3, r2, #21
 8004d02:	d527      	bpl.n	8004d54 <__ssputs_r+0x8c>
 8004d04:	4629      	mov	r1, r5
 8004d06:	f7ff ff53 	bl	8004bb0 <_malloc_r>
 8004d0a:	4606      	mov	r6, r0
 8004d0c:	b360      	cbz	r0, 8004d68 <__ssputs_r+0xa0>
 8004d0e:	6921      	ldr	r1, [r4, #16]
 8004d10:	464a      	mov	r2, r9
 8004d12:	f000 faeb 	bl	80052ec <memcpy>
 8004d16:	89a3      	ldrh	r3, [r4, #12]
 8004d18:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004d1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d20:	81a3      	strh	r3, [r4, #12]
 8004d22:	6126      	str	r6, [r4, #16]
 8004d24:	6165      	str	r5, [r4, #20]
 8004d26:	444e      	add	r6, r9
 8004d28:	eba5 0509 	sub.w	r5, r5, r9
 8004d2c:	6026      	str	r6, [r4, #0]
 8004d2e:	60a5      	str	r5, [r4, #8]
 8004d30:	463e      	mov	r6, r7
 8004d32:	42be      	cmp	r6, r7
 8004d34:	d900      	bls.n	8004d38 <__ssputs_r+0x70>
 8004d36:	463e      	mov	r6, r7
 8004d38:	6820      	ldr	r0, [r4, #0]
 8004d3a:	4632      	mov	r2, r6
 8004d3c:	4641      	mov	r1, r8
 8004d3e:	f000 faab 	bl	8005298 <memmove>
 8004d42:	68a3      	ldr	r3, [r4, #8]
 8004d44:	1b9b      	subs	r3, r3, r6
 8004d46:	60a3      	str	r3, [r4, #8]
 8004d48:	6823      	ldr	r3, [r4, #0]
 8004d4a:	4433      	add	r3, r6
 8004d4c:	6023      	str	r3, [r4, #0]
 8004d4e:	2000      	movs	r0, #0
 8004d50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d54:	462a      	mov	r2, r5
 8004d56:	f000 fad7 	bl	8005308 <_realloc_r>
 8004d5a:	4606      	mov	r6, r0
 8004d5c:	2800      	cmp	r0, #0
 8004d5e:	d1e0      	bne.n	8004d22 <__ssputs_r+0x5a>
 8004d60:	6921      	ldr	r1, [r4, #16]
 8004d62:	4650      	mov	r0, sl
 8004d64:	f7ff feb8 	bl	8004ad8 <_free_r>
 8004d68:	230c      	movs	r3, #12
 8004d6a:	f8ca 3000 	str.w	r3, [sl]
 8004d6e:	89a3      	ldrh	r3, [r4, #12]
 8004d70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d74:	81a3      	strh	r3, [r4, #12]
 8004d76:	f04f 30ff 	mov.w	r0, #4294967295
 8004d7a:	e7e9      	b.n	8004d50 <__ssputs_r+0x88>

08004d7c <_svfiprintf_r>:
 8004d7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d80:	4698      	mov	r8, r3
 8004d82:	898b      	ldrh	r3, [r1, #12]
 8004d84:	061b      	lsls	r3, r3, #24
 8004d86:	b09d      	sub	sp, #116	; 0x74
 8004d88:	4607      	mov	r7, r0
 8004d8a:	460d      	mov	r5, r1
 8004d8c:	4614      	mov	r4, r2
 8004d8e:	d50e      	bpl.n	8004dae <_svfiprintf_r+0x32>
 8004d90:	690b      	ldr	r3, [r1, #16]
 8004d92:	b963      	cbnz	r3, 8004dae <_svfiprintf_r+0x32>
 8004d94:	2140      	movs	r1, #64	; 0x40
 8004d96:	f7ff ff0b 	bl	8004bb0 <_malloc_r>
 8004d9a:	6028      	str	r0, [r5, #0]
 8004d9c:	6128      	str	r0, [r5, #16]
 8004d9e:	b920      	cbnz	r0, 8004daa <_svfiprintf_r+0x2e>
 8004da0:	230c      	movs	r3, #12
 8004da2:	603b      	str	r3, [r7, #0]
 8004da4:	f04f 30ff 	mov.w	r0, #4294967295
 8004da8:	e0d0      	b.n	8004f4c <_svfiprintf_r+0x1d0>
 8004daa:	2340      	movs	r3, #64	; 0x40
 8004dac:	616b      	str	r3, [r5, #20]
 8004dae:	2300      	movs	r3, #0
 8004db0:	9309      	str	r3, [sp, #36]	; 0x24
 8004db2:	2320      	movs	r3, #32
 8004db4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004db8:	f8cd 800c 	str.w	r8, [sp, #12]
 8004dbc:	2330      	movs	r3, #48	; 0x30
 8004dbe:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004f64 <_svfiprintf_r+0x1e8>
 8004dc2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004dc6:	f04f 0901 	mov.w	r9, #1
 8004dca:	4623      	mov	r3, r4
 8004dcc:	469a      	mov	sl, r3
 8004dce:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004dd2:	b10a      	cbz	r2, 8004dd8 <_svfiprintf_r+0x5c>
 8004dd4:	2a25      	cmp	r2, #37	; 0x25
 8004dd6:	d1f9      	bne.n	8004dcc <_svfiprintf_r+0x50>
 8004dd8:	ebba 0b04 	subs.w	fp, sl, r4
 8004ddc:	d00b      	beq.n	8004df6 <_svfiprintf_r+0x7a>
 8004dde:	465b      	mov	r3, fp
 8004de0:	4622      	mov	r2, r4
 8004de2:	4629      	mov	r1, r5
 8004de4:	4638      	mov	r0, r7
 8004de6:	f7ff ff6f 	bl	8004cc8 <__ssputs_r>
 8004dea:	3001      	adds	r0, #1
 8004dec:	f000 80a9 	beq.w	8004f42 <_svfiprintf_r+0x1c6>
 8004df0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004df2:	445a      	add	r2, fp
 8004df4:	9209      	str	r2, [sp, #36]	; 0x24
 8004df6:	f89a 3000 	ldrb.w	r3, [sl]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	f000 80a1 	beq.w	8004f42 <_svfiprintf_r+0x1c6>
 8004e00:	2300      	movs	r3, #0
 8004e02:	f04f 32ff 	mov.w	r2, #4294967295
 8004e06:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004e0a:	f10a 0a01 	add.w	sl, sl, #1
 8004e0e:	9304      	str	r3, [sp, #16]
 8004e10:	9307      	str	r3, [sp, #28]
 8004e12:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004e16:	931a      	str	r3, [sp, #104]	; 0x68
 8004e18:	4654      	mov	r4, sl
 8004e1a:	2205      	movs	r2, #5
 8004e1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e20:	4850      	ldr	r0, [pc, #320]	; (8004f64 <_svfiprintf_r+0x1e8>)
 8004e22:	f7fb f9dd 	bl	80001e0 <memchr>
 8004e26:	9a04      	ldr	r2, [sp, #16]
 8004e28:	b9d8      	cbnz	r0, 8004e62 <_svfiprintf_r+0xe6>
 8004e2a:	06d0      	lsls	r0, r2, #27
 8004e2c:	bf44      	itt	mi
 8004e2e:	2320      	movmi	r3, #32
 8004e30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004e34:	0711      	lsls	r1, r2, #28
 8004e36:	bf44      	itt	mi
 8004e38:	232b      	movmi	r3, #43	; 0x2b
 8004e3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004e3e:	f89a 3000 	ldrb.w	r3, [sl]
 8004e42:	2b2a      	cmp	r3, #42	; 0x2a
 8004e44:	d015      	beq.n	8004e72 <_svfiprintf_r+0xf6>
 8004e46:	9a07      	ldr	r2, [sp, #28]
 8004e48:	4654      	mov	r4, sl
 8004e4a:	2000      	movs	r0, #0
 8004e4c:	f04f 0c0a 	mov.w	ip, #10
 8004e50:	4621      	mov	r1, r4
 8004e52:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004e56:	3b30      	subs	r3, #48	; 0x30
 8004e58:	2b09      	cmp	r3, #9
 8004e5a:	d94d      	bls.n	8004ef8 <_svfiprintf_r+0x17c>
 8004e5c:	b1b0      	cbz	r0, 8004e8c <_svfiprintf_r+0x110>
 8004e5e:	9207      	str	r2, [sp, #28]
 8004e60:	e014      	b.n	8004e8c <_svfiprintf_r+0x110>
 8004e62:	eba0 0308 	sub.w	r3, r0, r8
 8004e66:	fa09 f303 	lsl.w	r3, r9, r3
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	9304      	str	r3, [sp, #16]
 8004e6e:	46a2      	mov	sl, r4
 8004e70:	e7d2      	b.n	8004e18 <_svfiprintf_r+0x9c>
 8004e72:	9b03      	ldr	r3, [sp, #12]
 8004e74:	1d19      	adds	r1, r3, #4
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	9103      	str	r1, [sp, #12]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	bfbb      	ittet	lt
 8004e7e:	425b      	neglt	r3, r3
 8004e80:	f042 0202 	orrlt.w	r2, r2, #2
 8004e84:	9307      	strge	r3, [sp, #28]
 8004e86:	9307      	strlt	r3, [sp, #28]
 8004e88:	bfb8      	it	lt
 8004e8a:	9204      	strlt	r2, [sp, #16]
 8004e8c:	7823      	ldrb	r3, [r4, #0]
 8004e8e:	2b2e      	cmp	r3, #46	; 0x2e
 8004e90:	d10c      	bne.n	8004eac <_svfiprintf_r+0x130>
 8004e92:	7863      	ldrb	r3, [r4, #1]
 8004e94:	2b2a      	cmp	r3, #42	; 0x2a
 8004e96:	d134      	bne.n	8004f02 <_svfiprintf_r+0x186>
 8004e98:	9b03      	ldr	r3, [sp, #12]
 8004e9a:	1d1a      	adds	r2, r3, #4
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	9203      	str	r2, [sp, #12]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	bfb8      	it	lt
 8004ea4:	f04f 33ff 	movlt.w	r3, #4294967295
 8004ea8:	3402      	adds	r4, #2
 8004eaa:	9305      	str	r3, [sp, #20]
 8004eac:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8004f74 <_svfiprintf_r+0x1f8>
 8004eb0:	7821      	ldrb	r1, [r4, #0]
 8004eb2:	2203      	movs	r2, #3
 8004eb4:	4650      	mov	r0, sl
 8004eb6:	f7fb f993 	bl	80001e0 <memchr>
 8004eba:	b138      	cbz	r0, 8004ecc <_svfiprintf_r+0x150>
 8004ebc:	9b04      	ldr	r3, [sp, #16]
 8004ebe:	eba0 000a 	sub.w	r0, r0, sl
 8004ec2:	2240      	movs	r2, #64	; 0x40
 8004ec4:	4082      	lsls	r2, r0
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	3401      	adds	r4, #1
 8004eca:	9304      	str	r3, [sp, #16]
 8004ecc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ed0:	4825      	ldr	r0, [pc, #148]	; (8004f68 <_svfiprintf_r+0x1ec>)
 8004ed2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004ed6:	2206      	movs	r2, #6
 8004ed8:	f7fb f982 	bl	80001e0 <memchr>
 8004edc:	2800      	cmp	r0, #0
 8004ede:	d038      	beq.n	8004f52 <_svfiprintf_r+0x1d6>
 8004ee0:	4b22      	ldr	r3, [pc, #136]	; (8004f6c <_svfiprintf_r+0x1f0>)
 8004ee2:	bb1b      	cbnz	r3, 8004f2c <_svfiprintf_r+0x1b0>
 8004ee4:	9b03      	ldr	r3, [sp, #12]
 8004ee6:	3307      	adds	r3, #7
 8004ee8:	f023 0307 	bic.w	r3, r3, #7
 8004eec:	3308      	adds	r3, #8
 8004eee:	9303      	str	r3, [sp, #12]
 8004ef0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ef2:	4433      	add	r3, r6
 8004ef4:	9309      	str	r3, [sp, #36]	; 0x24
 8004ef6:	e768      	b.n	8004dca <_svfiprintf_r+0x4e>
 8004ef8:	fb0c 3202 	mla	r2, ip, r2, r3
 8004efc:	460c      	mov	r4, r1
 8004efe:	2001      	movs	r0, #1
 8004f00:	e7a6      	b.n	8004e50 <_svfiprintf_r+0xd4>
 8004f02:	2300      	movs	r3, #0
 8004f04:	3401      	adds	r4, #1
 8004f06:	9305      	str	r3, [sp, #20]
 8004f08:	4619      	mov	r1, r3
 8004f0a:	f04f 0c0a 	mov.w	ip, #10
 8004f0e:	4620      	mov	r0, r4
 8004f10:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004f14:	3a30      	subs	r2, #48	; 0x30
 8004f16:	2a09      	cmp	r2, #9
 8004f18:	d903      	bls.n	8004f22 <_svfiprintf_r+0x1a6>
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d0c6      	beq.n	8004eac <_svfiprintf_r+0x130>
 8004f1e:	9105      	str	r1, [sp, #20]
 8004f20:	e7c4      	b.n	8004eac <_svfiprintf_r+0x130>
 8004f22:	fb0c 2101 	mla	r1, ip, r1, r2
 8004f26:	4604      	mov	r4, r0
 8004f28:	2301      	movs	r3, #1
 8004f2a:	e7f0      	b.n	8004f0e <_svfiprintf_r+0x192>
 8004f2c:	ab03      	add	r3, sp, #12
 8004f2e:	9300      	str	r3, [sp, #0]
 8004f30:	462a      	mov	r2, r5
 8004f32:	4b0f      	ldr	r3, [pc, #60]	; (8004f70 <_svfiprintf_r+0x1f4>)
 8004f34:	a904      	add	r1, sp, #16
 8004f36:	4638      	mov	r0, r7
 8004f38:	f3af 8000 	nop.w
 8004f3c:	1c42      	adds	r2, r0, #1
 8004f3e:	4606      	mov	r6, r0
 8004f40:	d1d6      	bne.n	8004ef0 <_svfiprintf_r+0x174>
 8004f42:	89ab      	ldrh	r3, [r5, #12]
 8004f44:	065b      	lsls	r3, r3, #25
 8004f46:	f53f af2d 	bmi.w	8004da4 <_svfiprintf_r+0x28>
 8004f4a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004f4c:	b01d      	add	sp, #116	; 0x74
 8004f4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f52:	ab03      	add	r3, sp, #12
 8004f54:	9300      	str	r3, [sp, #0]
 8004f56:	462a      	mov	r2, r5
 8004f58:	4b05      	ldr	r3, [pc, #20]	; (8004f70 <_svfiprintf_r+0x1f4>)
 8004f5a:	a904      	add	r1, sp, #16
 8004f5c:	4638      	mov	r0, r7
 8004f5e:	f000 f879 	bl	8005054 <_printf_i>
 8004f62:	e7eb      	b.n	8004f3c <_svfiprintf_r+0x1c0>
 8004f64:	08005450 	.word	0x08005450
 8004f68:	0800545a 	.word	0x0800545a
 8004f6c:	00000000 	.word	0x00000000
 8004f70:	08004cc9 	.word	0x08004cc9
 8004f74:	08005456 	.word	0x08005456

08004f78 <_printf_common>:
 8004f78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f7c:	4616      	mov	r6, r2
 8004f7e:	4699      	mov	r9, r3
 8004f80:	688a      	ldr	r2, [r1, #8]
 8004f82:	690b      	ldr	r3, [r1, #16]
 8004f84:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	bfb8      	it	lt
 8004f8c:	4613      	movlt	r3, r2
 8004f8e:	6033      	str	r3, [r6, #0]
 8004f90:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004f94:	4607      	mov	r7, r0
 8004f96:	460c      	mov	r4, r1
 8004f98:	b10a      	cbz	r2, 8004f9e <_printf_common+0x26>
 8004f9a:	3301      	adds	r3, #1
 8004f9c:	6033      	str	r3, [r6, #0]
 8004f9e:	6823      	ldr	r3, [r4, #0]
 8004fa0:	0699      	lsls	r1, r3, #26
 8004fa2:	bf42      	ittt	mi
 8004fa4:	6833      	ldrmi	r3, [r6, #0]
 8004fa6:	3302      	addmi	r3, #2
 8004fa8:	6033      	strmi	r3, [r6, #0]
 8004faa:	6825      	ldr	r5, [r4, #0]
 8004fac:	f015 0506 	ands.w	r5, r5, #6
 8004fb0:	d106      	bne.n	8004fc0 <_printf_common+0x48>
 8004fb2:	f104 0a19 	add.w	sl, r4, #25
 8004fb6:	68e3      	ldr	r3, [r4, #12]
 8004fb8:	6832      	ldr	r2, [r6, #0]
 8004fba:	1a9b      	subs	r3, r3, r2
 8004fbc:	42ab      	cmp	r3, r5
 8004fbe:	dc26      	bgt.n	800500e <_printf_common+0x96>
 8004fc0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004fc4:	1e13      	subs	r3, r2, #0
 8004fc6:	6822      	ldr	r2, [r4, #0]
 8004fc8:	bf18      	it	ne
 8004fca:	2301      	movne	r3, #1
 8004fcc:	0692      	lsls	r2, r2, #26
 8004fce:	d42b      	bmi.n	8005028 <_printf_common+0xb0>
 8004fd0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004fd4:	4649      	mov	r1, r9
 8004fd6:	4638      	mov	r0, r7
 8004fd8:	47c0      	blx	r8
 8004fda:	3001      	adds	r0, #1
 8004fdc:	d01e      	beq.n	800501c <_printf_common+0xa4>
 8004fde:	6823      	ldr	r3, [r4, #0]
 8004fe0:	6922      	ldr	r2, [r4, #16]
 8004fe2:	f003 0306 	and.w	r3, r3, #6
 8004fe6:	2b04      	cmp	r3, #4
 8004fe8:	bf02      	ittt	eq
 8004fea:	68e5      	ldreq	r5, [r4, #12]
 8004fec:	6833      	ldreq	r3, [r6, #0]
 8004fee:	1aed      	subeq	r5, r5, r3
 8004ff0:	68a3      	ldr	r3, [r4, #8]
 8004ff2:	bf0c      	ite	eq
 8004ff4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ff8:	2500      	movne	r5, #0
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	bfc4      	itt	gt
 8004ffe:	1a9b      	subgt	r3, r3, r2
 8005000:	18ed      	addgt	r5, r5, r3
 8005002:	2600      	movs	r6, #0
 8005004:	341a      	adds	r4, #26
 8005006:	42b5      	cmp	r5, r6
 8005008:	d11a      	bne.n	8005040 <_printf_common+0xc8>
 800500a:	2000      	movs	r0, #0
 800500c:	e008      	b.n	8005020 <_printf_common+0xa8>
 800500e:	2301      	movs	r3, #1
 8005010:	4652      	mov	r2, sl
 8005012:	4649      	mov	r1, r9
 8005014:	4638      	mov	r0, r7
 8005016:	47c0      	blx	r8
 8005018:	3001      	adds	r0, #1
 800501a:	d103      	bne.n	8005024 <_printf_common+0xac>
 800501c:	f04f 30ff 	mov.w	r0, #4294967295
 8005020:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005024:	3501      	adds	r5, #1
 8005026:	e7c6      	b.n	8004fb6 <_printf_common+0x3e>
 8005028:	18e1      	adds	r1, r4, r3
 800502a:	1c5a      	adds	r2, r3, #1
 800502c:	2030      	movs	r0, #48	; 0x30
 800502e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005032:	4422      	add	r2, r4
 8005034:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005038:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800503c:	3302      	adds	r3, #2
 800503e:	e7c7      	b.n	8004fd0 <_printf_common+0x58>
 8005040:	2301      	movs	r3, #1
 8005042:	4622      	mov	r2, r4
 8005044:	4649      	mov	r1, r9
 8005046:	4638      	mov	r0, r7
 8005048:	47c0      	blx	r8
 800504a:	3001      	adds	r0, #1
 800504c:	d0e6      	beq.n	800501c <_printf_common+0xa4>
 800504e:	3601      	adds	r6, #1
 8005050:	e7d9      	b.n	8005006 <_printf_common+0x8e>
	...

08005054 <_printf_i>:
 8005054:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005058:	7e0f      	ldrb	r7, [r1, #24]
 800505a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800505c:	2f78      	cmp	r7, #120	; 0x78
 800505e:	4691      	mov	r9, r2
 8005060:	4680      	mov	r8, r0
 8005062:	460c      	mov	r4, r1
 8005064:	469a      	mov	sl, r3
 8005066:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800506a:	d807      	bhi.n	800507c <_printf_i+0x28>
 800506c:	2f62      	cmp	r7, #98	; 0x62
 800506e:	d80a      	bhi.n	8005086 <_printf_i+0x32>
 8005070:	2f00      	cmp	r7, #0
 8005072:	f000 80d4 	beq.w	800521e <_printf_i+0x1ca>
 8005076:	2f58      	cmp	r7, #88	; 0x58
 8005078:	f000 80c0 	beq.w	80051fc <_printf_i+0x1a8>
 800507c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005080:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005084:	e03a      	b.n	80050fc <_printf_i+0xa8>
 8005086:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800508a:	2b15      	cmp	r3, #21
 800508c:	d8f6      	bhi.n	800507c <_printf_i+0x28>
 800508e:	a101      	add	r1, pc, #4	; (adr r1, 8005094 <_printf_i+0x40>)
 8005090:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005094:	080050ed 	.word	0x080050ed
 8005098:	08005101 	.word	0x08005101
 800509c:	0800507d 	.word	0x0800507d
 80050a0:	0800507d 	.word	0x0800507d
 80050a4:	0800507d 	.word	0x0800507d
 80050a8:	0800507d 	.word	0x0800507d
 80050ac:	08005101 	.word	0x08005101
 80050b0:	0800507d 	.word	0x0800507d
 80050b4:	0800507d 	.word	0x0800507d
 80050b8:	0800507d 	.word	0x0800507d
 80050bc:	0800507d 	.word	0x0800507d
 80050c0:	08005205 	.word	0x08005205
 80050c4:	0800512d 	.word	0x0800512d
 80050c8:	080051bf 	.word	0x080051bf
 80050cc:	0800507d 	.word	0x0800507d
 80050d0:	0800507d 	.word	0x0800507d
 80050d4:	08005227 	.word	0x08005227
 80050d8:	0800507d 	.word	0x0800507d
 80050dc:	0800512d 	.word	0x0800512d
 80050e0:	0800507d 	.word	0x0800507d
 80050e4:	0800507d 	.word	0x0800507d
 80050e8:	080051c7 	.word	0x080051c7
 80050ec:	682b      	ldr	r3, [r5, #0]
 80050ee:	1d1a      	adds	r2, r3, #4
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	602a      	str	r2, [r5, #0]
 80050f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80050f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80050fc:	2301      	movs	r3, #1
 80050fe:	e09f      	b.n	8005240 <_printf_i+0x1ec>
 8005100:	6820      	ldr	r0, [r4, #0]
 8005102:	682b      	ldr	r3, [r5, #0]
 8005104:	0607      	lsls	r7, r0, #24
 8005106:	f103 0104 	add.w	r1, r3, #4
 800510a:	6029      	str	r1, [r5, #0]
 800510c:	d501      	bpl.n	8005112 <_printf_i+0xbe>
 800510e:	681e      	ldr	r6, [r3, #0]
 8005110:	e003      	b.n	800511a <_printf_i+0xc6>
 8005112:	0646      	lsls	r6, r0, #25
 8005114:	d5fb      	bpl.n	800510e <_printf_i+0xba>
 8005116:	f9b3 6000 	ldrsh.w	r6, [r3]
 800511a:	2e00      	cmp	r6, #0
 800511c:	da03      	bge.n	8005126 <_printf_i+0xd2>
 800511e:	232d      	movs	r3, #45	; 0x2d
 8005120:	4276      	negs	r6, r6
 8005122:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005126:	485a      	ldr	r0, [pc, #360]	; (8005290 <_printf_i+0x23c>)
 8005128:	230a      	movs	r3, #10
 800512a:	e012      	b.n	8005152 <_printf_i+0xfe>
 800512c:	682b      	ldr	r3, [r5, #0]
 800512e:	6820      	ldr	r0, [r4, #0]
 8005130:	1d19      	adds	r1, r3, #4
 8005132:	6029      	str	r1, [r5, #0]
 8005134:	0605      	lsls	r5, r0, #24
 8005136:	d501      	bpl.n	800513c <_printf_i+0xe8>
 8005138:	681e      	ldr	r6, [r3, #0]
 800513a:	e002      	b.n	8005142 <_printf_i+0xee>
 800513c:	0641      	lsls	r1, r0, #25
 800513e:	d5fb      	bpl.n	8005138 <_printf_i+0xe4>
 8005140:	881e      	ldrh	r6, [r3, #0]
 8005142:	4853      	ldr	r0, [pc, #332]	; (8005290 <_printf_i+0x23c>)
 8005144:	2f6f      	cmp	r7, #111	; 0x6f
 8005146:	bf0c      	ite	eq
 8005148:	2308      	moveq	r3, #8
 800514a:	230a      	movne	r3, #10
 800514c:	2100      	movs	r1, #0
 800514e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005152:	6865      	ldr	r5, [r4, #4]
 8005154:	60a5      	str	r5, [r4, #8]
 8005156:	2d00      	cmp	r5, #0
 8005158:	bfa2      	ittt	ge
 800515a:	6821      	ldrge	r1, [r4, #0]
 800515c:	f021 0104 	bicge.w	r1, r1, #4
 8005160:	6021      	strge	r1, [r4, #0]
 8005162:	b90e      	cbnz	r6, 8005168 <_printf_i+0x114>
 8005164:	2d00      	cmp	r5, #0
 8005166:	d04b      	beq.n	8005200 <_printf_i+0x1ac>
 8005168:	4615      	mov	r5, r2
 800516a:	fbb6 f1f3 	udiv	r1, r6, r3
 800516e:	fb03 6711 	mls	r7, r3, r1, r6
 8005172:	5dc7      	ldrb	r7, [r0, r7]
 8005174:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005178:	4637      	mov	r7, r6
 800517a:	42bb      	cmp	r3, r7
 800517c:	460e      	mov	r6, r1
 800517e:	d9f4      	bls.n	800516a <_printf_i+0x116>
 8005180:	2b08      	cmp	r3, #8
 8005182:	d10b      	bne.n	800519c <_printf_i+0x148>
 8005184:	6823      	ldr	r3, [r4, #0]
 8005186:	07de      	lsls	r6, r3, #31
 8005188:	d508      	bpl.n	800519c <_printf_i+0x148>
 800518a:	6923      	ldr	r3, [r4, #16]
 800518c:	6861      	ldr	r1, [r4, #4]
 800518e:	4299      	cmp	r1, r3
 8005190:	bfde      	ittt	le
 8005192:	2330      	movle	r3, #48	; 0x30
 8005194:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005198:	f105 35ff 	addle.w	r5, r5, #4294967295
 800519c:	1b52      	subs	r2, r2, r5
 800519e:	6122      	str	r2, [r4, #16]
 80051a0:	f8cd a000 	str.w	sl, [sp]
 80051a4:	464b      	mov	r3, r9
 80051a6:	aa03      	add	r2, sp, #12
 80051a8:	4621      	mov	r1, r4
 80051aa:	4640      	mov	r0, r8
 80051ac:	f7ff fee4 	bl	8004f78 <_printf_common>
 80051b0:	3001      	adds	r0, #1
 80051b2:	d14a      	bne.n	800524a <_printf_i+0x1f6>
 80051b4:	f04f 30ff 	mov.w	r0, #4294967295
 80051b8:	b004      	add	sp, #16
 80051ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051be:	6823      	ldr	r3, [r4, #0]
 80051c0:	f043 0320 	orr.w	r3, r3, #32
 80051c4:	6023      	str	r3, [r4, #0]
 80051c6:	4833      	ldr	r0, [pc, #204]	; (8005294 <_printf_i+0x240>)
 80051c8:	2778      	movs	r7, #120	; 0x78
 80051ca:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80051ce:	6823      	ldr	r3, [r4, #0]
 80051d0:	6829      	ldr	r1, [r5, #0]
 80051d2:	061f      	lsls	r7, r3, #24
 80051d4:	f851 6b04 	ldr.w	r6, [r1], #4
 80051d8:	d402      	bmi.n	80051e0 <_printf_i+0x18c>
 80051da:	065f      	lsls	r7, r3, #25
 80051dc:	bf48      	it	mi
 80051de:	b2b6      	uxthmi	r6, r6
 80051e0:	07df      	lsls	r7, r3, #31
 80051e2:	bf48      	it	mi
 80051e4:	f043 0320 	orrmi.w	r3, r3, #32
 80051e8:	6029      	str	r1, [r5, #0]
 80051ea:	bf48      	it	mi
 80051ec:	6023      	strmi	r3, [r4, #0]
 80051ee:	b91e      	cbnz	r6, 80051f8 <_printf_i+0x1a4>
 80051f0:	6823      	ldr	r3, [r4, #0]
 80051f2:	f023 0320 	bic.w	r3, r3, #32
 80051f6:	6023      	str	r3, [r4, #0]
 80051f8:	2310      	movs	r3, #16
 80051fa:	e7a7      	b.n	800514c <_printf_i+0xf8>
 80051fc:	4824      	ldr	r0, [pc, #144]	; (8005290 <_printf_i+0x23c>)
 80051fe:	e7e4      	b.n	80051ca <_printf_i+0x176>
 8005200:	4615      	mov	r5, r2
 8005202:	e7bd      	b.n	8005180 <_printf_i+0x12c>
 8005204:	682b      	ldr	r3, [r5, #0]
 8005206:	6826      	ldr	r6, [r4, #0]
 8005208:	6961      	ldr	r1, [r4, #20]
 800520a:	1d18      	adds	r0, r3, #4
 800520c:	6028      	str	r0, [r5, #0]
 800520e:	0635      	lsls	r5, r6, #24
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	d501      	bpl.n	8005218 <_printf_i+0x1c4>
 8005214:	6019      	str	r1, [r3, #0]
 8005216:	e002      	b.n	800521e <_printf_i+0x1ca>
 8005218:	0670      	lsls	r0, r6, #25
 800521a:	d5fb      	bpl.n	8005214 <_printf_i+0x1c0>
 800521c:	8019      	strh	r1, [r3, #0]
 800521e:	2300      	movs	r3, #0
 8005220:	6123      	str	r3, [r4, #16]
 8005222:	4615      	mov	r5, r2
 8005224:	e7bc      	b.n	80051a0 <_printf_i+0x14c>
 8005226:	682b      	ldr	r3, [r5, #0]
 8005228:	1d1a      	adds	r2, r3, #4
 800522a:	602a      	str	r2, [r5, #0]
 800522c:	681d      	ldr	r5, [r3, #0]
 800522e:	6862      	ldr	r2, [r4, #4]
 8005230:	2100      	movs	r1, #0
 8005232:	4628      	mov	r0, r5
 8005234:	f7fa ffd4 	bl	80001e0 <memchr>
 8005238:	b108      	cbz	r0, 800523e <_printf_i+0x1ea>
 800523a:	1b40      	subs	r0, r0, r5
 800523c:	6060      	str	r0, [r4, #4]
 800523e:	6863      	ldr	r3, [r4, #4]
 8005240:	6123      	str	r3, [r4, #16]
 8005242:	2300      	movs	r3, #0
 8005244:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005248:	e7aa      	b.n	80051a0 <_printf_i+0x14c>
 800524a:	6923      	ldr	r3, [r4, #16]
 800524c:	462a      	mov	r2, r5
 800524e:	4649      	mov	r1, r9
 8005250:	4640      	mov	r0, r8
 8005252:	47d0      	blx	sl
 8005254:	3001      	adds	r0, #1
 8005256:	d0ad      	beq.n	80051b4 <_printf_i+0x160>
 8005258:	6823      	ldr	r3, [r4, #0]
 800525a:	079b      	lsls	r3, r3, #30
 800525c:	d413      	bmi.n	8005286 <_printf_i+0x232>
 800525e:	68e0      	ldr	r0, [r4, #12]
 8005260:	9b03      	ldr	r3, [sp, #12]
 8005262:	4298      	cmp	r0, r3
 8005264:	bfb8      	it	lt
 8005266:	4618      	movlt	r0, r3
 8005268:	e7a6      	b.n	80051b8 <_printf_i+0x164>
 800526a:	2301      	movs	r3, #1
 800526c:	4632      	mov	r2, r6
 800526e:	4649      	mov	r1, r9
 8005270:	4640      	mov	r0, r8
 8005272:	47d0      	blx	sl
 8005274:	3001      	adds	r0, #1
 8005276:	d09d      	beq.n	80051b4 <_printf_i+0x160>
 8005278:	3501      	adds	r5, #1
 800527a:	68e3      	ldr	r3, [r4, #12]
 800527c:	9903      	ldr	r1, [sp, #12]
 800527e:	1a5b      	subs	r3, r3, r1
 8005280:	42ab      	cmp	r3, r5
 8005282:	dcf2      	bgt.n	800526a <_printf_i+0x216>
 8005284:	e7eb      	b.n	800525e <_printf_i+0x20a>
 8005286:	2500      	movs	r5, #0
 8005288:	f104 0619 	add.w	r6, r4, #25
 800528c:	e7f5      	b.n	800527a <_printf_i+0x226>
 800528e:	bf00      	nop
 8005290:	08005461 	.word	0x08005461
 8005294:	08005472 	.word	0x08005472

08005298 <memmove>:
 8005298:	4288      	cmp	r0, r1
 800529a:	b510      	push	{r4, lr}
 800529c:	eb01 0402 	add.w	r4, r1, r2
 80052a0:	d902      	bls.n	80052a8 <memmove+0x10>
 80052a2:	4284      	cmp	r4, r0
 80052a4:	4623      	mov	r3, r4
 80052a6:	d807      	bhi.n	80052b8 <memmove+0x20>
 80052a8:	1e43      	subs	r3, r0, #1
 80052aa:	42a1      	cmp	r1, r4
 80052ac:	d008      	beq.n	80052c0 <memmove+0x28>
 80052ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80052b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80052b6:	e7f8      	b.n	80052aa <memmove+0x12>
 80052b8:	4402      	add	r2, r0
 80052ba:	4601      	mov	r1, r0
 80052bc:	428a      	cmp	r2, r1
 80052be:	d100      	bne.n	80052c2 <memmove+0x2a>
 80052c0:	bd10      	pop	{r4, pc}
 80052c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80052c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80052ca:	e7f7      	b.n	80052bc <memmove+0x24>

080052cc <_sbrk_r>:
 80052cc:	b538      	push	{r3, r4, r5, lr}
 80052ce:	4d06      	ldr	r5, [pc, #24]	; (80052e8 <_sbrk_r+0x1c>)
 80052d0:	2300      	movs	r3, #0
 80052d2:	4604      	mov	r4, r0
 80052d4:	4608      	mov	r0, r1
 80052d6:	602b      	str	r3, [r5, #0]
 80052d8:	f7fc ff00 	bl	80020dc <_sbrk>
 80052dc:	1c43      	adds	r3, r0, #1
 80052de:	d102      	bne.n	80052e6 <_sbrk_r+0x1a>
 80052e0:	682b      	ldr	r3, [r5, #0]
 80052e2:	b103      	cbz	r3, 80052e6 <_sbrk_r+0x1a>
 80052e4:	6023      	str	r3, [r4, #0]
 80052e6:	bd38      	pop	{r3, r4, r5, pc}
 80052e8:	20000354 	.word	0x20000354

080052ec <memcpy>:
 80052ec:	440a      	add	r2, r1
 80052ee:	4291      	cmp	r1, r2
 80052f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80052f4:	d100      	bne.n	80052f8 <memcpy+0xc>
 80052f6:	4770      	bx	lr
 80052f8:	b510      	push	{r4, lr}
 80052fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80052fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005302:	4291      	cmp	r1, r2
 8005304:	d1f9      	bne.n	80052fa <memcpy+0xe>
 8005306:	bd10      	pop	{r4, pc}

08005308 <_realloc_r>:
 8005308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800530c:	4680      	mov	r8, r0
 800530e:	4614      	mov	r4, r2
 8005310:	460e      	mov	r6, r1
 8005312:	b921      	cbnz	r1, 800531e <_realloc_r+0x16>
 8005314:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005318:	4611      	mov	r1, r2
 800531a:	f7ff bc49 	b.w	8004bb0 <_malloc_r>
 800531e:	b92a      	cbnz	r2, 800532c <_realloc_r+0x24>
 8005320:	f7ff fbda 	bl	8004ad8 <_free_r>
 8005324:	4625      	mov	r5, r4
 8005326:	4628      	mov	r0, r5
 8005328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800532c:	f000 f81b 	bl	8005366 <_malloc_usable_size_r>
 8005330:	4284      	cmp	r4, r0
 8005332:	4607      	mov	r7, r0
 8005334:	d802      	bhi.n	800533c <_realloc_r+0x34>
 8005336:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800533a:	d812      	bhi.n	8005362 <_realloc_r+0x5a>
 800533c:	4621      	mov	r1, r4
 800533e:	4640      	mov	r0, r8
 8005340:	f7ff fc36 	bl	8004bb0 <_malloc_r>
 8005344:	4605      	mov	r5, r0
 8005346:	2800      	cmp	r0, #0
 8005348:	d0ed      	beq.n	8005326 <_realloc_r+0x1e>
 800534a:	42bc      	cmp	r4, r7
 800534c:	4622      	mov	r2, r4
 800534e:	4631      	mov	r1, r6
 8005350:	bf28      	it	cs
 8005352:	463a      	movcs	r2, r7
 8005354:	f7ff ffca 	bl	80052ec <memcpy>
 8005358:	4631      	mov	r1, r6
 800535a:	4640      	mov	r0, r8
 800535c:	f7ff fbbc 	bl	8004ad8 <_free_r>
 8005360:	e7e1      	b.n	8005326 <_realloc_r+0x1e>
 8005362:	4635      	mov	r5, r6
 8005364:	e7df      	b.n	8005326 <_realloc_r+0x1e>

08005366 <_malloc_usable_size_r>:
 8005366:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800536a:	1f18      	subs	r0, r3, #4
 800536c:	2b00      	cmp	r3, #0
 800536e:	bfbc      	itt	lt
 8005370:	580b      	ldrlt	r3, [r1, r0]
 8005372:	18c0      	addlt	r0, r0, r3
 8005374:	4770      	bx	lr
	...

08005378 <_init>:
 8005378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800537a:	bf00      	nop
 800537c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800537e:	bc08      	pop	{r3}
 8005380:	469e      	mov	lr, r3
 8005382:	4770      	bx	lr

08005384 <_fini>:
 8005384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005386:	bf00      	nop
 8005388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800538a:	bc08      	pop	{r3}
 800538c:	469e      	mov	lr, r3
 800538e:	4770      	bx	lr
